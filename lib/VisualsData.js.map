{"version":3,"sources":["typedefs/typedefs.ts","semanticQuery/sqExprVisitor.ts","types/enumType.ts","types/fill.ts","types/fillRule.ts","types/image.ts","types/paragraphs.ts","types/structuralType.ts","types/valueType.ts","contracts/dataShapeBinding.ts","contracts/dataShapeBindingDataReduction.ts","contracts/federatedConceptualSchema.ts","contracts/selector.ts","contracts/query.ts","contracts/queryProjection.ts","contracts/visualData.ts","dataView/colorAllocator.ts","dataView/compiledDataViewMapping.ts","dataView/dataRoleHelper.ts","dataView/dataViewCategoricalReader.ts","dataView/dataViewConcatenateCategoricalColumns.ts","dataView/dataViewMappingVisitor.ts","dataView/dataViewNormalizeValues.ts","dataView/dataViewObject.ts","dataView/dataViewObjectDefinition.ts","dataView/dataViewObjectDescriptor.ts","dataView/dataViewObjectEvaluationUtils.ts","dataView/dataViewObjectEvaluator.ts","dataView/dataViewPivotCategorical.ts","dataView/dataViewPivotMatrix.ts","dataView/dataViewSelfCrossJoin.ts","dataView/dataViewPivotCategoricalToPrimaryGroups.ts","dataView/dataViewTransform.ts","displayNameGetter.ts","dataReader/dataReader.ts","iFormattingService.ts","semanticQuery/exprPatterns/fieldExprPattern.ts","dataView/dataViewAnalysis.ts","dataView/dataViewScopeIdentity.ts","dataView/dataViewScopeWildcard.ts","dataView/rules/evalContext.ts","dataView/dataViewRegression.ts","dataView/dataViewSelectTransform.ts","dataView/rules/categoricalEvalContext.ts","dataView/rules/tableEvalContext.ts","dataView/rules/ruleEvaluation.ts","dataView/rules/colorRuleEvaluation.ts","dataView/utils/dataViewMatrixUtils.ts","dataView/utils/dataViewMetadataColumnUtils.ts","contracts/conceptualSchema.ts","dataView/scriptResultUtil.ts","segmentation/dataViewMerger.ts","semanticQuery/sqExprRewriter.ts","semanticQuery/exprPatterns/equalsToInRewriter.ts","semanticQuery/exprPatterns/filterScopeIdsCollector.ts","semanticQuery/exprPatterns/scopeIdentityExtractor.ts","semanticQuery/primitiveValueEncoding.ts","semanticQuery/sqHierarchyExprUtils.ts","semanticQuery/sqExprGroupUtils.ts","semanticQuery/sqExpr.ts","semanticQuery/sqExprUtils.ts","semanticQuery/semanticQueryRewriter.ts","semanticQuery/semanticQuery.ts","dataView/dataViewBuilder.ts","dataView/rules/staticEvalContext.ts","dataView/rules/matrixEvalContext.ts","services/formattingService.ts","services/serialization/sqExprShortSerializer.ts"],"names":["powerbi","powerbi.data","powerbi.data.DefaultSQExprVisitorWithArg","powerbi.data.DefaultSQExprVisitorWithArg.constructor","powerbi.data.DefaultSQExprVisitorWithArg.visitEntity","powerbi.data.DefaultSQExprVisitorWithArg.visitColumnRef","powerbi.data.DefaultSQExprVisitorWithArg.visitMeasureRef","powerbi.data.DefaultSQExprVisitorWithArg.visitAggr","powerbi.data.DefaultSQExprVisitorWithArg.visitHierarchy","powerbi.data.DefaultSQExprVisitorWithArg.visitHierarchyLevel","powerbi.data.DefaultSQExprVisitorWithArg.visitPropertyVariationSource","powerbi.data.DefaultSQExprVisitorWithArg.visitBetween","powerbi.data.DefaultSQExprVisitorWithArg.visitIn","powerbi.data.DefaultSQExprVisitorWithArg.visitAnd","powerbi.data.DefaultSQExprVisitorWithArg.visitOr","powerbi.data.DefaultSQExprVisitorWithArg.visitCompare","powerbi.data.DefaultSQExprVisitorWithArg.visitContains","powerbi.data.DefaultSQExprVisitorWithArg.visitExists","powerbi.data.DefaultSQExprVisitorWithArg.visitNot","powerbi.data.DefaultSQExprVisitorWithArg.visitStartsWith","powerbi.data.DefaultSQExprVisitorWithArg.visitConstant","powerbi.data.DefaultSQExprVisitorWithArg.visitDateSpan","powerbi.data.DefaultSQExprVisitorWithArg.visitDateAdd","powerbi.data.DefaultSQExprVisitorWithArg.visitNow","powerbi.data.DefaultSQExprVisitorWithArg.visitDefaultValue","powerbi.data.DefaultSQExprVisitorWithArg.visitAnyValue","powerbi.data.DefaultSQExprVisitorWithArg.visitArithmetic","powerbi.data.DefaultSQExprVisitorWithArg.visitFillRule","powerbi.data.DefaultSQExprVisitorWithArg.visitDefault","powerbi.data.DefaultSQExprVisitor","powerbi.data.DefaultSQExprVisitor.constructor","powerbi.data.DefaultSQExprVisitorWithTraversal","powerbi.data.DefaultSQExprVisitorWithTraversal.constructor","powerbi.data.DefaultSQExprVisitorWithTraversal.visitEntity","powerbi.data.DefaultSQExprVisitorWithTraversal.visitColumnRef","powerbi.data.DefaultSQExprVisitorWithTraversal.visitMeasureRef","powerbi.data.DefaultSQExprVisitorWithTraversal.visitAggr","powerbi.data.DefaultSQExprVisitorWithTraversal.visitHierarchy","powerbi.data.DefaultSQExprVisitorWithTraversal.visitHierarchyLevel","powerbi.data.DefaultSQExprVisitorWithTraversal.visitPropertyVariationSource","powerbi.data.DefaultSQExprVisitorWithTraversal.visitBetween","powerbi.data.DefaultSQExprVisitorWithTraversal.visitIn","powerbi.data.DefaultSQExprVisitorWithTraversal.visitAnd","powerbi.data.DefaultSQExprVisitorWithTraversal.visitOr","powerbi.data.DefaultSQExprVisitorWithTraversal.visitCompare","powerbi.data.DefaultSQExprVisitorWithTraversal.visitContains","powerbi.data.DefaultSQExprVisitorWithTraversal.visitExists","powerbi.data.DefaultSQExprVisitorWithTraversal.visitNot","powerbi.data.DefaultSQExprVisitorWithTraversal.visitStartsWith","powerbi.data.DefaultSQExprVisitorWithTraversal.visitConstant","powerbi.data.DefaultSQExprVisitorWithTraversal.visitDateSpan","powerbi.data.DefaultSQExprVisitorWithTraversal.visitDateAdd","powerbi.data.DefaultSQExprVisitorWithTraversal.visitNow","powerbi.data.DefaultSQExprVisitorWithTraversal.visitDefaultValue","powerbi.data.DefaultSQExprVisitorWithTraversal.visitAnyValue","powerbi.data.DefaultSQExprVisitorWithTraversal.visitArithmetic","powerbi.data.DefaultSQExprVisitorWithTraversal.visitFillRule","powerbi.data.DefaultSQExprVisitorWithTraversal.visitLinearGradient2","powerbi.data.DefaultSQExprVisitorWithTraversal.visitLinearGradient3","powerbi.data.DefaultSQExprVisitorWithTraversal.visitDefault","powerbi.data.DefaultSQExprVisitorWithTraversal.visitFillRuleStop","powerbi.createEnumType","powerbi.EnumType","powerbi.EnumType.constructor","powerbi.EnumType.members","powerbi.FillSolidColorTypeDescriptor","powerbi.FillSolidColorTypeDescriptor.nullable","powerbi.ImageDefinition","powerbi.StructuralTypeDescriptor","powerbi.StructuralTypeDescriptor.isValid","powerbi.ValueType","powerbi.ValueType.constructor","powerbi.ValueType.fromDescriptor","powerbi.ValueType.fromExtendedType","powerbi.ValueType.fromPrimitiveTypeAndCategory","powerbi.ValueType.fromEnum","powerbi.ValueType.isCompatibleFrom","powerbi.ValueType.primitiveType","powerbi.ValueType.extendedType","powerbi.ValueType.categoryString","powerbi.ValueType.text","powerbi.ValueType.numeric","powerbi.ValueType.integer","powerbi.ValueType.bool","powerbi.ValueType.dateTime","powerbi.ValueType.duration","powerbi.ValueType.binary","powerbi.ValueType.none","powerbi.ValueType.temporal","powerbi.ValueType.geography","powerbi.ValueType.misc","powerbi.ValueType.formatting","powerbi.ValueType.enum","powerbi.ValueType.scripting","powerbi.ScriptType","powerbi.ScriptType.constructor","powerbi.ScriptType.source","powerbi.TemporalType","powerbi.TemporalType.constructor","powerbi.TemporalType.year","powerbi.TemporalType.month","powerbi.GeographyType","powerbi.GeographyType.constructor","powerbi.GeographyType.address","powerbi.GeographyType.city","powerbi.GeographyType.continent","powerbi.GeographyType.country","powerbi.GeographyType.county","powerbi.GeographyType.region","powerbi.GeographyType.postalCode","powerbi.GeographyType.stateOrProvince","powerbi.GeographyType.place","powerbi.GeographyType.latitude","powerbi.GeographyType.longitude","powerbi.MiscellaneousType","powerbi.MiscellaneousType.constructor","powerbi.MiscellaneousType.image","powerbi.MiscellaneousType.imageUrl","powerbi.MiscellaneousType.webUrl","powerbi.FormattingType","powerbi.FormattingType.constructor","powerbi.FormattingType.color","powerbi.FormattingType.formatString","powerbi.FormattingType.alignment","powerbi.FormattingType.labelDisplayUnits","powerbi.FormattingType.fontSize","powerbi.FormattingType.labelDensity","powerbi.PrimitiveType","powerbi.ExtendedType","powerbi.getPrimitiveType","powerbi.isPrimitiveType","powerbi.getCategoryFromExtendedType","powerbi.toExtendedType","powerbi.matchesExtendedTypeWithAnyPrimitive","powerbi.data.DataShapeBindingLimitType","powerbi.data.SubtotalType","powerbi.data.DataShapeBindingDataReduction","powerbi.data.DataShapeBindingDataReduction.createFrom","powerbi.data.FederatedConceptualSchema","powerbi.data.FederatedConceptualSchema.constructor","powerbi.data.FederatedConceptualSchema.schema","powerbi.data.Selector","powerbi.data.Selector.filterFromSelector","powerbi.data.Selector.matchesData","powerbi.data.Selector.matchesKeys","powerbi.data.Selector.equals","powerbi.data.Selector.equalsDataArray","powerbi.data.Selector.equalsData","powerbi.data.Selector.getKey","powerbi.data.Selector.containsWildcard","powerbi.data.EntitySourceType","powerbi.data.getArithmeticOperatorName","powerbi.data.TimeUnit","powerbi.data.QueryAggregateFunction","powerbi.data.QueryComparisonKind","powerbi.data.SemanticType","powerbi.data.FilterKind","powerbi.data.QueryProjectionCollection","powerbi.data.QueryProjectionCollection.constructor","powerbi.data.QueryProjectionCollection.all","powerbi.data.QueryProjectionCollection.activeProjectionRefs","powerbi.data.QueryProjectionCollection.showAll","powerbi.data.QueryProjectionCollection.addActiveQueryReference","powerbi.data.QueryProjectionCollection.getLastActiveQueryReference","powerbi.data.QueryProjectionCollection.clone","powerbi.data.QueryProjectionsByRole","powerbi.data.QueryProjectionsByRole.clone","powerbi.data.QueryProjectionsByRole.getRole","powerbi.DisplayUnitSystemType","powerbi.data.DataRoleHelper","powerbi.data.DataRoleHelper.getMeasureIndexOfRole","powerbi.data.DataRoleHelper.getCategoryIndexOfRole","powerbi.data.DataRoleHelper.hasRole","powerbi.data.DataRoleHelper.hasRoleInDataView","powerbi.data.createIDataViewCategoricalReader","powerbi.data.DataViewCategoricalReader","powerbi.data.DataViewCategoricalReader.constructor","powerbi.data.DataViewCategoricalReader.hasCategories","powerbi.data.DataViewCategoricalReader.getCategoryCount","powerbi.data.DataViewCategoricalReader.getCategoryValues","powerbi.data.DataViewCategoricalReader.getCategoryValue","powerbi.data.DataViewCategoricalReader.getCategoryColumn","powerbi.data.DataViewCategoricalReader.getCategoryMetadataColumn","powerbi.data.DataViewCategoricalReader.getCategoryDisplayName","powerbi.data.DataViewCategoricalReader.hasCompositeCategories","powerbi.data.DataViewCategoricalReader.hasCategoryWithRole","powerbi.data.DataViewCategoricalReader.getCategoryObjects","powerbi.data.DataViewCategoricalReader.getCategoryFromRole","powerbi.data.DataViewCategoricalReader.hasValues","powerbi.data.DataViewCategoricalReader.getValues","powerbi.data.DataViewCategoricalReader.getValue","powerbi.data.DataViewCategoricalReader.getFirstNonNullValueForCategory","powerbi.data.DataViewCategoricalReader.getMeasureQueryName","powerbi.data.DataViewCategoricalReader.getValueColumn","powerbi.data.DataViewCategoricalReader.getValueMetadataColumn","powerbi.data.DataViewCategoricalReader.getValueDisplayName","powerbi.data.DataViewCategoricalReader.getMeasureIndex","powerbi.data.DataViewCategoricalReader.hasDynamicSeries","powerbi.data.DataViewCategoricalReader.getSeriesCount","powerbi.data.DataViewCategoricalReader.getSeriesObjects","powerbi.data.DataViewCategoricalReader.getSeriesColumn","powerbi.data.DataViewCategoricalReader.getSeriesColumns","powerbi.data.DataViewCategoricalReader.getSeriesMetadataColumn","powerbi.data.DataViewCategoricalReader.getSeriesColumnIdentifier","powerbi.data.DataViewCategoricalReader.getSeriesName","powerbi.data.DataViewCategoricalReader.getSeriesDisplayName","powerbi.data.DataViewConcatenateCategoricalColumns","powerbi.data.DataViewConcatenateCategoricalColumns.detectAndApply","powerbi.data.DataViewConcatenateCategoricalColumns.detectCategoricalRoleForHierarchicalGroup","powerbi.data.DataViewConcatenateCategoricalColumns.getAllRolesInCategories","powerbi.data.DataViewConcatenateCategoricalColumns.applyConcatenation","powerbi.data.DataViewConcatenateCategoricalColumns.concatenateValues","powerbi.data.DataViewConcatenateCategoricalColumns.sortColumnsByProjectionOrdering","powerbi.data.DataViewConcatenateCategoricalColumns.createConcatenatedColumnMetadata","powerbi.data.DataViewConcatenateCategoricalColumns.addToMetadata","powerbi.data.DataViewConcatenateCategoricalColumns.createConcatenatedCategoryColumn","powerbi.DataViewMapping","powerbi.DataViewMapping.visitMapping","powerbi.DataViewMapping.visitCategorical","powerbi.DataViewMapping.visitCategoricalCategories","powerbi.DataViewMapping.visitCategoricalValues","powerbi.DataViewMapping.visitTable","powerbi.DataViewMapping.visitMatrix","powerbi.DataViewMapping.visitMatrixItems","powerbi.DataViewMapping.visitTree","powerbi.DataViewMapping.visitTreeNodes","powerbi.DataViewMapping.visitTreeValues","powerbi.DataViewMapping.visitBind","powerbi.DataViewMapping.visitFor","powerbi.DataViewMapping.visitList","powerbi.DataViewMapping.visitGrouped","powerbi.DataViewMapping.visitReduction","powerbi.DataViewMapping.visitSingle","powerbi.data.DataViewNormalizeValues","powerbi.data.DataViewNormalizeValues.apply","powerbi.data.DataViewNormalizeValues.filterVariantMeasures","powerbi.data.DataViewNormalizeValues.generateMetadataColumnFilter","powerbi.data.DataViewNormalizeValues.generateValueFilter","powerbi.data.DataViewNormalizeValues.generateColumnValueFilter","powerbi.data.DataViewNormalizeValues.getColumnRequiredTypes","powerbi.data.DataViewNormalizeValues.filterVariantMeasuresCategorical","powerbi.data.DataViewNormalizeValues.filterVariantMeasuresTable","powerbi.data.DataViewNormalizeValues.filterVariantMeasuresTreeNode","powerbi.data.DataViewNormalizeValues.filterVariantMeasuresMatrix","powerbi.data.DataViewNormalizeValues.filterVariantMeasuresMatrixRecursive","powerbi.data.DataViewNormalizeValues.filterVariantMeasuresSingle","powerbi.data.DataViewNormalizeValues.normalizeVariant","powerbi.data.DataViewNormalizeValues.doesValueMatchTypes","powerbi.data.DataViewNormalizeValues.firstColumnByRoleName","powerbi.DataViewObjects","powerbi.DataViewObjects.getValue","powerbi.DataViewObjects.getObject","powerbi.DataViewObjects.getUserDefinedObjects","powerbi.DataViewObjects.getFillColor","powerbi.DataViewObjects.isUserDefined","powerbi.DataViewObject","powerbi.DataViewObject.getValue","powerbi.DataViewObject.getFillColorByPropertyName","powerbi.data.DataViewObjectDefinitions","powerbi.data.DataViewObjectDefinitions.ensure","powerbi.data.DataViewObjectDefinitions.deleteProperty","powerbi.data.DataViewObjectDefinitions.setValue","powerbi.data.DataViewObjectDefinitions.getValue","powerbi.data.DataViewObjectDefinitions.getPropertyContainer","powerbi.data.DataViewObjectDefinitions.getObjectDefinition","powerbi.data.DataViewObjectDefinitions.propertiesAreEqual","powerbi.data.DataViewObjectDefinitions.allPropertiesAreEqual","powerbi.data.DataViewObjectDefinitions.encodePropertyValue","powerbi.data.DataViewObjectDefinitions.clone","powerbi.data.DataViewObjectDefinitions.cloneProperties","powerbi.data.DataViewObjectDefinition","powerbi.data.DataViewObjectDefinition.deleteSingleProperty","powerbi.data.DataViewObjectDescriptors","powerbi.data.DataViewObjectDescriptors.findFormatString","powerbi.data.DataViewObjectDescriptors.findFilterOutput","powerbi.data.DataViewObjectDescriptors.findDefaultValue","powerbi.data.DataViewObjectDescriptors.findProperty","powerbi.data.DataViewObjectEvaluationUtils","powerbi.data.DataViewObjectEvaluationUtils.evaluateDataViewObjects","powerbi.data.DataViewObjectEvaluationUtils.groupObjectsBySelector","powerbi.data.DataViewObjectEvaluationUtils.ensureDefinitionListForSelector","powerbi.data.DataViewObjectEvaluationUtils.addImplicitObjects","powerbi.data.DataViewObjectEvaluationUtils.addDefaultFormatString","powerbi.data.DataViewObjectEvaluationUtils.addDefaultValue","powerbi.data.DataViewObjectEvaluationUtils.getColumnFormatForIndex","powerbi.data.DataViewObjectEvaluationUtils.applyFormatString","powerbi.data.DataViewObjectEvaluationUtils.applyDefaultValue","powerbi.data.DataViewObjectEvaluationUtils.applyMetadataProperty","powerbi.data.DataViewObjectEvaluationUtils.findWithMatchingSelector","powerbi.data.DataViewObjectEvaluationUtils.findExistingObject","powerbi.data.DataViewObjectEvaluator","powerbi.data.DataViewObjectEvaluator.run","powerbi.data.DataViewObjectEvaluator.evaluateProperty","powerbi.data.DataViewObjectEvaluator.evaluateFill","powerbi.data.DataViewObjectEvaluator.evaluateFillRule","powerbi.data.DataViewObjectEvaluator.evaluateColorStop","powerbi.data.DataViewObjectEvaluator.evaluateImage","powerbi.data.DataViewObjectEvaluator.evaluateParagraphs","powerbi.data.DataViewObjectEvaluator.evaluateParagraph","powerbi.data.DataViewObjectEvaluator.evaluateTextRun","powerbi.data.DataViewObjectEvaluator.evaluateArrayCopyOnChange","powerbi.data.DataViewObjectEvaluator.evaluateValue","powerbi.data.DataViewObjectEvaluator.ExpressionEvaluator","powerbi.data.DataViewObjectEvaluator.ExpressionEvaluator.constructor","powerbi.data.DataViewObjectEvaluator.ExpressionEvaluator.evaluate","powerbi.data.DataViewObjectEvaluator.ExpressionEvaluator.visitColumnRef","powerbi.data.DataViewObjectEvaluator.ExpressionEvaluator.visitConstant","powerbi.data.DataViewObjectEvaluator.ExpressionEvaluator.visitMeasureRef","powerbi.data.DataViewObjectEvaluator.ExpressionEvaluator.visitAggr","powerbi.data.DataViewPivotCategorical","powerbi.data.DataViewPivotCategorical.apply","powerbi.data.DataViewPivotMatrix","powerbi.data.DataViewPivotMatrix.apply","powerbi.data.DataViewPivotMatrix.forEachLeaf","powerbi.data.DataViewPivotMatrix.cloneTree","powerbi.data.DataViewPivotMatrix.cloneTreeExecuteOnLeaf","powerbi.data.DataViewSelfCrossJoin","powerbi.data.DataViewSelfCrossJoin.apply","powerbi.data.DataViewSelfCrossJoin.applyCategorical","powerbi.data.DataViewSelfCrossJoin.createGroupedValues","powerbi.data.createNullValues","powerbi.data.inheritArrayWithValue","powerbi.data.DataViewPivotCategoricalToPrimaryGroups","powerbi.data.DataViewPivotCategoricalToPrimaryGroups.pivotBinding","powerbi.data.DataViewPivotCategoricalToPrimaryGroups.isPivotableAxis","powerbi.data.DataViewPivotCategoricalToPrimaryGroups.canPivotCategorical","powerbi.data.DataViewPivotCategoricalToPrimaryGroups.unpivotResult","powerbi.data.DataViewPivotCategoricalToPrimaryGroups.getRolesInRoleMapping","powerbi.data.DataViewPivotCategoricalToPrimaryGroups.getRolesInRoleMappings","powerbi.data.DataViewPivotCategoricalToPrimaryGroups.inferUnpivotTransform","powerbi.data.DataViewPivotCategoricalToPrimaryGroups.unpivotMatrix","powerbi.data.DataViewPivotCategoricalToPrimaryGroups.categoricalFromUnpivotedMatrix","powerbi.data.DataViewTransform","powerbi.data.DataViewTransform.apply","powerbi.data.DataViewTransform.transformQueryToVisualDataView","powerbi.data.DataViewTransform.transformEmptyDataView","powerbi.data.DataViewTransform.transformDataView","powerbi.data.DataViewTransform.getTargetKinds","powerbi.data.DataViewTransform.transformSelects","powerbi.data.DataViewTransform.applyTransformsToColumns","powerbi.data.DataViewTransform.getFormatForColumn","powerbi.data.DataViewTransform.applyRewritesToCategorical","powerbi.data.DataViewTransform.applyRewritesToCategorical.override","powerbi.data.DataViewTransform.applyRewritesToTable","powerbi.data.DataViewTransform.createTableColumnPositionMapping","powerbi.data.DataViewTransform.applyRewritesToMatrix","powerbi.data.DataViewTransform.applyRewritesToMatrix.override","powerbi.data.DataViewTransform.applyRewritesToMatrix.overrideHierarchy","powerbi.data.DataViewTransform.reorderChildNodes","powerbi.data.DataViewTransform.reorderMatrixCompositeGroups","powerbi.data.DataViewTransform.reorderMatrixHierarchyCompositeGroups","powerbi.data.DataViewTransform.createMatrixHierarchyLevelSourcesPositionMapping","powerbi.data.DataViewTransform.reorderMatrixHierarchyLevelColumnSources","powerbi.data.DataViewTransform.reorderMatrixHierarchyLevelValues","powerbi.data.DataViewTransform.createMatrixValuesPositionMapping","powerbi.data.DataViewTransform.createOrderMapping","powerbi.data.DataViewTransform.createReversedMapping","powerbi.data.DataViewTransform.forEachNodeAtLevel","powerbi.data.DataViewTransform.findOverride","powerbi.data.DataViewTransform.ensureRewritten","powerbi.data.DataViewTransform.transformObjects","powerbi.data.DataViewTransform.evaluateUserDefinedObjects","powerbi.data.DataViewTransform.evaluateMetadataObjects","powerbi.data.DataViewTransform.createRuleEvaluationInstance","powerbi.data.DataViewTransform.createRuleEvaluationInstanceFillRule","powerbi.data.DataViewTransform.createColorAllocatorLinearGradient2","powerbi.data.DataViewTransform.createColorAllocatorLinearGradient3","powerbi.data.DataViewTransform.evaluateDataRepetition","powerbi.data.DataViewTransform.evaluateDataRepetitionCategoricalCategory","powerbi.data.DataViewTransform.evaluateDataRepetitionCategoricalValueGrouping","powerbi.data.DataViewTransform.evaluateDataRepetitionMatrix","powerbi.data.DataViewTransform.evaluateDataRepetitionMatrixHierarchy","powerbi.data.DataViewTransform.evaluateDataRepetitionMatrixNode","powerbi.data.DataViewTransform.inheritNodeAndChildren","powerbi.data.DataViewTransform.evaluateDataRepetitionTable","powerbi.data.DataViewTransform.evaluateDataRepetitionTableRows","powerbi.data.DataViewTransform.evaluateMetadataRepetition","powerbi.data.DataViewTransform.findSelectedCategoricalColumn","powerbi.data.DataViewTransform.findSelectorForRuleInput","powerbi.data.DataViewTransform.findRuleInputColumnNumberRange","powerbi.data.DataViewTransform.createValueColumns","powerbi.data.DataViewTransform.setGrouped","powerbi.data.DataViewTransform.groupValues","powerbi.data.DataViewTransform.pivotIfNecessary","powerbi.data.DataViewTransform.determineCategoricalTransformation","powerbi.data.DataViewTransform.shouldPivotMatrix","powerbi.data.DataViewTransform.hasRolesBind","powerbi.data.DataViewTransform.hasRolesFor","powerbi.data.DataViewTransform.hasRolesGrouped","powerbi.data.createDisplayNameGetter","powerbi.data.getDisplayName","powerbi.DateTimeUnit","powerbi.data.SQExprBuilder","powerbi.data.SQExprBuilder.fieldExpr","powerbi.data.SQExprBuilder.wrapColumnAggr","powerbi.data.SQExprBuilder.wrapHierarchyLevel","powerbi.data.SQExprBuilder.wrapHierarchy","powerbi.data.SQExprBuilder.wrapPropertyVariationSource","powerbi.data.SQExprBuilder.wrapColumn","powerbi.data.SQExprBuilder.wrapMeasure","powerbi.data.SQExprBuilder.wrapEntityAggr","powerbi.data.SQExprBuilder.wrapEntity","powerbi.data.SQExprConverter","powerbi.data.SQExprConverter.asFieldPattern","powerbi.data.FieldExprPatternBuilder","powerbi.data.FieldExprPatternBuilder.constructor","powerbi.data.FieldExprPatternBuilder.visitColumnRef","powerbi.data.FieldExprPatternBuilder.visitMeasureRef","powerbi.data.FieldExprPatternBuilder.visitAggr","powerbi.data.FieldExprPatternBuilder.visitHierarchy","powerbi.data.FieldExprPatternBuilder.visitHierarchyLevel","powerbi.data.SourceExprPatternBuilder","powerbi.data.SourceExprPatternBuilder.constructor","powerbi.data.SourceExprPatternBuilder.visitEntity","powerbi.data.SourceExprPatternBuilder.visitPropertyVariationSource","powerbi.data.HierarchyExprPatternBuiler","powerbi.data.HierarchyExprPatternBuiler.constructor","powerbi.data.HierarchyExprPatternBuiler.visitHierarchy","powerbi.data.FieldExprPattern","powerbi.data.FieldExprPattern.hasFieldExprName","powerbi.data.FieldExprPattern.getPropertyName","powerbi.data.FieldExprPattern.getHierarchyName","powerbi.data.FieldExprPattern.getColumnRef","powerbi.data.FieldExprPattern.getFieldExprName","powerbi.data.FieldExprPattern.toFieldExprEntityItemPattern","powerbi.DataViewAnalysis","powerbi.DataViewAnalysis.DataViewMappingMatchErrorCode","powerbi.DataViewAnalysis.validateAndReshape","powerbi.DataViewAnalysis.reshapeCategorical","powerbi.DataViewAnalysis.reshapeSingle","powerbi.DataViewAnalysis.reshapeTree","powerbi.DataViewAnalysis.reshapeTable","powerbi.DataViewAnalysis.countGroups","powerbi.DataViewAnalysis.countMeasures","powerbi.DataViewAnalysis.supports","powerbi.DataViewAnalysis.supportsCategorical","powerbi.DataViewAnalysis.supportsSingle","powerbi.DataViewAnalysis.supportsTree","powerbi.DataViewAnalysis.supportsTable","powerbi.DataViewAnalysis.supportsScriptResult","powerbi.DataViewAnalysis.validateRange","powerbi.DataViewAnalysis.validateKind","powerbi.DataViewAnalysis.chooseDataViewMappings","powerbi.DataViewAnalysis.checkForConditionErrors","powerbi.DataViewAnalysis.areAllPropertiesValid","powerbi.DataViewAnalysis.getPropertyCount","powerbi.DataViewAnalysis.hasSameCategoryIdentity","powerbi.DataViewAnalysis.getLengthOptional","powerbi.DataViewAnalysis.areMetadataColumnsEquivalent","powerbi.DataViewAnalysis.isMetadataEquivalent","powerbi.DataViewScopeIdentity","powerbi.DataViewScopeIdentity.equals","powerbi.DataViewScopeIdentity.filterFromIdentity","powerbi.DataViewScopeIdentity.filterFromExprs","powerbi.data.createDataViewScopeIdentity","powerbi.data.DataViewScopeIdentityImpl","powerbi.data.DataViewScopeIdentityImpl.constructor","powerbi.data.DataViewScopeIdentityImpl.expr","powerbi.data.DataViewScopeIdentityImpl.key","powerbi.data.DataViewScopeWildcard","powerbi.data.DataViewScopeWildcard.matches","powerbi.data.DataViewScopeWildcard.fromExprs","powerbi.data.DataViewScopeWildcard.DataViewScopeWildcardImpl","powerbi.data.DataViewScopeWildcard.DataViewScopeWildcardImpl.constructor","powerbi.data.DataViewScopeWildcard.DataViewScopeWildcardImpl.exprs","powerbi.data.DataViewScopeWildcard.DataViewScopeWildcardImpl.key","powerbi.data.DataViewRegression","powerbi.data.DataViewRegression.run","powerbi.data.DataViewRegression.linearRegressionTransform","powerbi.data.DataViewRegression.findRoleWithCartesianAxis","powerbi.data.DataViewRegression.getColumnForCategoricalRole","powerbi.data.DataViewRegression.getRoleFromColumn","powerbi.data.DataViewRegression.getDataType","powerbi.data.DataViewRegression.sortValues","powerbi.data.DataViewRegression.normalizeDateValues","powerbi.data.DataViewRegression.computeRegressionLine","powerbi.data.DataViewRegression.createRegressionDataView","powerbi.data.DataViewSelectTransform","powerbi.data.DataViewSelectTransform.projectionsFromSelects","powerbi.data.DataViewSelectTransform.createRoleKindFromMetadata","powerbi.data.createCategoricalEvalContext","powerbi.data.CategoricalEvalContext","powerbi.data.CategoricalEvalContext.constructor","powerbi.data.CategoricalEvalContext.getExprValue","powerbi.data.CategoricalEvalContext.getRoleValue","powerbi.data.CategoricalEvalContext.setCurrentRowIndex","powerbi.data.findRuleInputColumn","powerbi.data.findRuleInputInColumns","powerbi.data.createTableEvalContext","powerbi.data.TableEvalContext","powerbi.data.TableEvalContext.constructor","powerbi.data.TableEvalContext.getExprValue","powerbi.data.TableEvalContext.getRoleValue","powerbi.data.TableEvalContext.setCurrentRowIndex","powerbi.data.RuleEvaluation","powerbi.data.RuleEvaluation.constructor","powerbi.data.RuleEvaluation.evaluate","powerbi.data.ColorRuleEvaluation","powerbi.data.ColorRuleEvaluation.constructor","powerbi.data.ColorRuleEvaluation.evaluate","powerbi.data.utils","powerbi.data.utils.DataViewMatrixUtils","powerbi.data.utils.DataViewMatrixUtils.forEachLeafNode","powerbi.data.utils.DataViewMatrixUtils.forEachLeafNodeRecursive","powerbi.data.utils.DataViewMatrixUtils.inheritMatrixNodeHierarchy","powerbi.data.utils.DataViewMetadataColumnUtils","powerbi.data.utils.DataViewMetadataColumnUtils.isForRole","powerbi.data.utils.DataViewMetadataColumnUtils.joinMetadataColumnsAndProjectionOrder","powerbi.data.ConceptualSchema","powerbi.data.ConceptualSchema.constructor","powerbi.data.ConceptualSchema.findProperty","powerbi.data.ConceptualSchema.findHierarchy","powerbi.data.ConceptualSchema.findHierarchyByVariation","powerbi.data.ConceptualSchema.findPropertyWithKpi","powerbi.data.ConceptualDataCategory","powerbi.ScriptResultUtil","powerbi.ScriptResultUtil.findScriptResult","powerbi.ScriptResultUtil.extractScriptResult","powerbi.ScriptResultUtil.extractScriptResultFromVisualConfig","powerbi.ScriptResultUtil.getScriptInput","powerbi.ScriptResultUtil.ScriptInputColumnNameVisitor","powerbi.ScriptResultUtil.ScriptInputColumnNameVisitor.constructor","powerbi.ScriptResultUtil.ScriptInputColumnNameVisitor.visitEntity","powerbi.ScriptResultUtil.ScriptInputColumnNameVisitor.visitColumnRef","powerbi.ScriptResultUtil.ScriptInputColumnNameVisitor.visitMeasureRef","powerbi.ScriptResultUtil.ScriptInputColumnNameVisitor.visitAggr","powerbi.ScriptResultUtil.ScriptInputColumnNameVisitor.visitHierarchy","powerbi.ScriptResultUtil.ScriptInputColumnNameVisitor.visitHierarchyLevel","powerbi.ScriptResultUtil.ScriptInputColumnNameVisitor.visitArithmetic","powerbi.ScriptResultUtil.ScriptInputColumnNameVisitor.getNameForProperty","powerbi.ScriptResultUtil.ScriptInputColumnNameVisitor.getNameForAggregate","powerbi.ScriptResultUtil.ScriptInputColumnNameVisitor.getNameForHierarchy","powerbi.ScriptResultUtil.ScriptInputColumnNameVisitor.getNameForHierarchyLevel","powerbi.ScriptResultUtil.ScriptInputColumnNameVisitor.getVariationLevelName","powerbi.data.segmentation","powerbi.data.segmentation.DataViewMerger","powerbi.data.segmentation.DataViewMerger.mergeDataViews","powerbi.data.segmentation.DataViewMerger.mergeTables","powerbi.data.segmentation.DataViewMerger.mergeCategorical","powerbi.data.segmentation.DataViewMerger.merge","powerbi.data.segmentation.DataViewMerger.mergeTreeNodes","powerbi.data.segmentation.DataViewMerger.findFirstAppendIndex","powerbi.data.SQExprRewriter","powerbi.data.SQExprRewriter.constructor","powerbi.data.SQExprRewriter.visitColumnRef","powerbi.data.SQExprRewriter.visitMeasureRef","powerbi.data.SQExprRewriter.visitAggr","powerbi.data.SQExprRewriter.visitHierarchy","powerbi.data.SQExprRewriter.visitHierarchyLevel","powerbi.data.SQExprRewriter.visitPropertyVariationSource","powerbi.data.SQExprRewriter.visitEntity","powerbi.data.SQExprRewriter.visitAnd","powerbi.data.SQExprRewriter.visitBetween","powerbi.data.SQExprRewriter.visitIn","powerbi.data.SQExprRewriter.rewriteAll","powerbi.data.SQExprRewriter.visitOr","powerbi.data.SQExprRewriter.visitCompare","powerbi.data.SQExprRewriter.visitContains","powerbi.data.SQExprRewriter.visitExists","powerbi.data.SQExprRewriter.visitNot","powerbi.data.SQExprRewriter.visitStartsWith","powerbi.data.SQExprRewriter.visitConstant","powerbi.data.SQExprRewriter.visitDateSpan","powerbi.data.SQExprRewriter.visitDateAdd","powerbi.data.SQExprRewriter.visitNow","powerbi.data.SQExprRewriter.visitDefaultValue","powerbi.data.SQExprRewriter.visitAnyValue","powerbi.data.SQExprRewriter.visitArithmetic","powerbi.data.SQExprRewriter.visitFillRule","powerbi.data.SQExprRewriter.visitLinearGradient2","powerbi.data.SQExprRewriter.visitLinearGradient3","powerbi.data.SQExprRewriter.visitFillRuleStop","powerbi.data.EqualsToInRewriter","powerbi.data.EqualsToInRewriter.run","powerbi.data.EqualsToInRewriter.Rewriter","powerbi.data.EqualsToInRewriter.Rewriter.constructor","powerbi.data.EqualsToInRewriter.Rewriter.visitCompare","powerbi.data.EqualsToInRewriter.Rewriter.visitOr","powerbi.data.EqualsToInRewriter.Rewriter.visitAnd","powerbi.data.EqualsToInRewriter.Rewriter.visitUnsupported","powerbi.data.EqualsToInRewriter.Rewriter.isSupported","powerbi.data.EqualsToInRewriter.Rewriter.isComparand","powerbi.data.EqualsToInRewriter.InBuilder","powerbi.data.EqualsToInRewriter.InBuilder.constructor","powerbi.data.EqualsToInRewriter.InBuilder.add","powerbi.data.EqualsToInRewriter.InBuilder.cancel","powerbi.data.EqualsToInRewriter.InBuilder.complete","powerbi.data.SQExprConverter.asScopeIdsContainer","powerbi.data.SQExprConverter.getFirstComparandValue","powerbi.data.FilterScopeIdsCollectorVisitor","powerbi.data.FilterScopeIdsCollectorVisitor.constructor","powerbi.data.FilterScopeIdsCollectorVisitor.getResult","powerbi.data.FilterScopeIdsCollectorVisitor.getScopeIdentity","powerbi.data.FilterScopeIdsCollectorVisitor.visitOr","powerbi.data.FilterScopeIdsCollectorVisitor.visitNot","powerbi.data.FilterScopeIdsCollectorVisitor.visitConstant","powerbi.data.FilterScopeIdsCollectorVisitor.visitCompare","powerbi.data.FilterScopeIdsCollectorVisitor.visitIn","powerbi.data.FilterScopeIdsCollectorVisitor.visitColumnRef","powerbi.data.FilterScopeIdsCollectorVisitor.visitDefaultValue","powerbi.data.FilterScopeIdsCollectorVisitor.visitAnyValue","powerbi.data.FilterScopeIdsCollectorVisitor.visitDefault","powerbi.data.FilterScopeIdsCollectorVisitor.unsupportedSQExpr","powerbi.data.FindComparandVisitor","powerbi.data.FindComparandVisitor.constructor","powerbi.data.FindComparandVisitor.visitAnd","powerbi.data.FindComparandVisitor.visitCompare","powerbi.data.ScopeIdentityExtractor","powerbi.data.ScopeIdentityExtractor.getKeys","powerbi.data.ScopeIdentityExtractor.getInExpr","powerbi.data.ScopeIdentityExtractor.ScopeIdExtractorImpl","powerbi.data.ScopeIdentityExtractor.ScopeIdExtractorImpl.constructor","powerbi.data.ScopeIdentityExtractor.ScopeIdExtractorImpl.visitAnd","powerbi.data.ScopeIdentityExtractor.ScopeIdExtractorImpl.visitCompare","powerbi.data.ScopeIdentityExtractor.ScopeIdExtractorImpl.visitColumnRef","powerbi.data.ScopeIdentityExtractor.ScopeIdExtractorImpl.visitHierarchyLevel","powerbi.data.ScopeIdentityExtractor.ScopeIdExtractorImpl.visitConstant","powerbi.data.ScopeIdentityExtractor.ScopeIdExtractorImpl.visitArithmetic","powerbi.data.ScopeIdentityExtractor.ScopeIdExtractorImpl.visitDefault","powerbi.data.PrimitiveValueEncoding","powerbi.data.PrimitiveValueEncoding.decimal","powerbi.data.PrimitiveValueEncoding.double","powerbi.data.PrimitiveValueEncoding.integer","powerbi.data.PrimitiveValueEncoding.dateTime","powerbi.data.PrimitiveValueEncoding.text","powerbi.data.PrimitiveValueEncoding.nullEncoding","powerbi.data.PrimitiveValueEncoding.boolean","powerbi.data.SQHierarchyExprUtils","powerbi.data.SQHierarchyExprUtils.getConceptualHierarchyLevelFromExpr","powerbi.data.SQHierarchyExprUtils.getConceptualHierarchyLevel","powerbi.data.SQHierarchyExprUtils.getConceptualHierarchy","powerbi.data.SQHierarchyExprUtils.expandExpr","powerbi.data.SQHierarchyExprUtils.isHierarchyOrVariation","powerbi.data.SQHierarchyExprUtils.getSourceVariationExpr","powerbi.data.SQHierarchyExprUtils.getSourceHierarchy","powerbi.data.SQHierarchyExprUtils.getHierarchySourceAsVariationSource","powerbi.data.SQHierarchyExprUtils.areHierarchyLevelsOrdered","powerbi.data.SQHierarchyExprUtils.getInsertionIndex","powerbi.data.SQExprHierarchyToHierarchyLevelConverter","powerbi.data.SQExprHierarchyToHierarchyLevelConverter.convert","powerbi.data.SQExprHierarchyLevelConverter","powerbi.data.SQExprHierarchyLevelConverter.expand","powerbi.data.SQExprVariationConverter","powerbi.data.SQExprVariationConverter.expand","powerbi.data.SQExprGroupUtils","powerbi.data.SQExprGroupUtils.groupExprs","powerbi.data.SQExprGroupUtils.addChildToGroup","powerbi.data.SQExpr","powerbi.data.SQExpr.constructor","powerbi.data.SQExpr.equals","powerbi.data.SQExpr.validate","powerbi.data.SQExpr.accept","powerbi.data.SQExpr.kind","powerbi.data.SQExpr.isColumn","powerbi.data.SQExpr.isConstant","powerbi.data.SQExpr.isEntity","powerbi.data.SQExpr.isHierarchy","powerbi.data.SQExpr.isHierarchyLevel","powerbi.data.SQExpr.getMetadata","powerbi.data.SQExpr.getDefaultAggregate","powerbi.data.SQExpr.getKeyColumns","powerbi.data.SQExpr.hasGroupOnKeys","powerbi.data.SQExpr.getPropertyKeys","powerbi.data.SQExpr.getConceptualProperty","powerbi.data.SQExpr.getTargetEntityForVariation","powerbi.data.SQExpr.getHierarchyLevelConceptualProperty","powerbi.data.SQExpr.getMetadataForVariation","powerbi.data.SQExpr.getMetadataForHierarchyLevel","powerbi.data.SQExpr.getPropertyMetadata","powerbi.data.SQExpr.getMetadataForProperty","powerbi.data.SQExpr.getMetadataForEntity","powerbi.data.defaultAggregateForDataType","powerbi.data.defaultAggregateToQueryAggregateFunction","powerbi.data.SQEntityExpr","powerbi.data.SQEntityExpr.constructor","powerbi.data.SQEntityExpr.accept","powerbi.data.SQArithmeticExpr","powerbi.data.SQArithmeticExpr.constructor","powerbi.data.SQArithmeticExpr.accept","powerbi.data.SQPropRefExpr","powerbi.data.SQPropRefExpr.constructor","powerbi.data.SQColumnRefExpr","powerbi.data.SQColumnRefExpr.constructor","powerbi.data.SQColumnRefExpr.accept","powerbi.data.SQMeasureRefExpr","powerbi.data.SQMeasureRefExpr.constructor","powerbi.data.SQMeasureRefExpr.accept","powerbi.data.SQAggregationExpr","powerbi.data.SQAggregationExpr.constructor","powerbi.data.SQAggregationExpr.accept","powerbi.data.SQPropertyVariationSourceExpr","powerbi.data.SQPropertyVariationSourceExpr.constructor","powerbi.data.SQPropertyVariationSourceExpr.accept","powerbi.data.SQHierarchyExpr","powerbi.data.SQHierarchyExpr.constructor","powerbi.data.SQHierarchyExpr.accept","powerbi.data.SQHierarchyLevelExpr","powerbi.data.SQHierarchyLevelExpr.constructor","powerbi.data.SQHierarchyLevelExpr.accept","powerbi.data.SQAndExpr","powerbi.data.SQAndExpr.constructor","powerbi.data.SQAndExpr.accept","powerbi.data.SQBetweenExpr","powerbi.data.SQBetweenExpr.constructor","powerbi.data.SQBetweenExpr.accept","powerbi.data.SQInExpr","powerbi.data.SQInExpr.constructor","powerbi.data.SQInExpr.accept","powerbi.data.SQOrExpr","powerbi.data.SQOrExpr.constructor","powerbi.data.SQOrExpr.accept","powerbi.data.SQCompareExpr","powerbi.data.SQCompareExpr.constructor","powerbi.data.SQCompareExpr.accept","powerbi.data.SQContainsExpr","powerbi.data.SQContainsExpr.constructor","powerbi.data.SQContainsExpr.accept","powerbi.data.SQStartsWithExpr","powerbi.data.SQStartsWithExpr.constructor","powerbi.data.SQStartsWithExpr.accept","powerbi.data.SQExistsExpr","powerbi.data.SQExistsExpr.constructor","powerbi.data.SQExistsExpr.accept","powerbi.data.SQNotExpr","powerbi.data.SQNotExpr.constructor","powerbi.data.SQNotExpr.accept","powerbi.data.SQConstantExpr","powerbi.data.SQConstantExpr.constructor","powerbi.data.SQConstantExpr.accept","powerbi.data.SQConstantExpr.getMetadata","powerbi.data.SQDateSpanExpr","powerbi.data.SQDateSpanExpr.constructor","powerbi.data.SQDateSpanExpr.accept","powerbi.data.SQDateAddExpr","powerbi.data.SQDateAddExpr.constructor","powerbi.data.SQDateAddExpr.accept","powerbi.data.SQNowExpr","powerbi.data.SQNowExpr.constructor","powerbi.data.SQNowExpr.accept","powerbi.data.SQDefaultValueExpr","powerbi.data.SQDefaultValueExpr.constructor","powerbi.data.SQDefaultValueExpr.accept","powerbi.data.SQAnyValueExpr","powerbi.data.SQAnyValueExpr.constructor","powerbi.data.SQAnyValueExpr.accept","powerbi.data.SQFillRuleExpr","powerbi.data.SQFillRuleExpr.constructor","powerbi.data.SQFillRuleExpr.accept","powerbi.data.SQExprBuilder.entity","powerbi.data.SQExprBuilder.columnRef","powerbi.data.SQExprBuilder.measureRef","powerbi.data.SQExprBuilder.aggregate","powerbi.data.SQExprBuilder.hierarchy","powerbi.data.SQExprBuilder.propertyVariationSource","powerbi.data.SQExprBuilder.hierarchyLevel","powerbi.data.SQExprBuilder.and","powerbi.data.SQExprBuilder.between","powerbi.data.SQExprBuilder.inExpr","powerbi.data.SQExprBuilder.or","powerbi.data.SQExprBuilder.tryUseInExprs","powerbi.data.SQExprBuilder.compare","powerbi.data.SQExprBuilder.contains","powerbi.data.SQExprBuilder.exists","powerbi.data.SQExprBuilder.equal","powerbi.data.SQExprBuilder.not","powerbi.data.SQExprBuilder.startsWith","powerbi.data.SQExprBuilder.nullConstant","powerbi.data.SQExprBuilder.now","powerbi.data.SQExprBuilder.defaultValue","powerbi.data.SQExprBuilder.anyValue","powerbi.data.SQExprBuilder.boolean","powerbi.data.SQExprBuilder.dateAdd","powerbi.data.SQExprBuilder.dateTime","powerbi.data.SQExprBuilder.dateSpan","powerbi.data.SQExprBuilder.decimal","powerbi.data.SQExprBuilder.double","powerbi.data.SQExprBuilder.integer","powerbi.data.SQExprBuilder.text","powerbi.data.SQExprBuilder.typedConstant","powerbi.data.SQExprBuilder.arithmetic","powerbi.data.SQExprBuilder.setAggregate","powerbi.data.SQExprBuilder.removeAggregate","powerbi.data.SQExprBuilder.removeEntityVariables","powerbi.data.SQExprBuilder.createExprWithAggregate","powerbi.data.SQExprBuilder.fillRule","powerbi.data.SQExprInfo","powerbi.data.SQExprInfo.getAggregate","powerbi.data.SQExprEqualityVisitor","powerbi.data.SQExprEqualityVisitor.constructor","powerbi.data.SQExprEqualityVisitor.run","powerbi.data.SQExprEqualityVisitor.visitColumnRef","powerbi.data.SQExprEqualityVisitor.visitMeasureRef","powerbi.data.SQExprEqualityVisitor.visitAggr","powerbi.data.SQExprEqualityVisitor.visitHierarchy","powerbi.data.SQExprEqualityVisitor.visitHierarchyLevel","powerbi.data.SQExprEqualityVisitor.visitPropertyVariationSource","powerbi.data.SQExprEqualityVisitor.visitBetween","powerbi.data.SQExprEqualityVisitor.visitIn","powerbi.data.SQExprEqualityVisitor.visitEntity","powerbi.data.SQExprEqualityVisitor.visitAnd","powerbi.data.SQExprEqualityVisitor.visitOr","powerbi.data.SQExprEqualityVisitor.visitCompare","powerbi.data.SQExprEqualityVisitor.visitContains","powerbi.data.SQExprEqualityVisitor.visitDateSpan","powerbi.data.SQExprEqualityVisitor.visitDateAdd","powerbi.data.SQExprEqualityVisitor.visitExists","powerbi.data.SQExprEqualityVisitor.visitNot","powerbi.data.SQExprEqualityVisitor.visitNow","powerbi.data.SQExprEqualityVisitor.visitDefaultValue","powerbi.data.SQExprEqualityVisitor.visitAnyValue","powerbi.data.SQExprEqualityVisitor.visitStartsWith","powerbi.data.SQExprEqualityVisitor.visitConstant","powerbi.data.SQExprEqualityVisitor.visitFillRule","powerbi.data.SQExprEqualityVisitor.visitLinearGradient2","powerbi.data.SQExprEqualityVisitor.visitLinearGradient3","powerbi.data.SQExprEqualityVisitor.equalsFillRuleStop","powerbi.data.SQExprEqualityVisitor.visitArithmetic","powerbi.data.SQExprEqualityVisitor.optionalEqual","powerbi.data.SQExprEqualityVisitor.equals","powerbi.data.SQExprEqualityVisitor.equalsAll","powerbi.data.SQExprRootRewriter","powerbi.data.SQExprRootRewriter.constructor","powerbi.data.SQExprRootRewriter.visitDefault","powerbi.data.SQExprValidationVisitor","powerbi.data.SQExprValidationVisitor.constructor","powerbi.data.SQExprValidationVisitor.visitIn","powerbi.data.SQExprValidationVisitor.visitCompare","powerbi.data.SQExprValidationVisitor.visitColumnRef","powerbi.data.SQExprValidationVisitor.visitMeasureRef","powerbi.data.SQExprValidationVisitor.visitAggr","powerbi.data.SQExprValidationVisitor.visitHierarchy","powerbi.data.SQExprValidationVisitor.visitHierarchyLevel","powerbi.data.SQExprValidationVisitor.visitEntity","powerbi.data.SQExprValidationVisitor.visitContains","powerbi.data.SQExprValidationVisitor.visitStartsWith","powerbi.data.SQExprValidationVisitor.visitArithmetic","powerbi.data.SQExprValidationVisitor.validateOperandsAndTypeForStartOrContains","powerbi.data.SQExprValidationVisitor.validateArithmeticTypes","powerbi.data.SQExprValidationVisitor.validateCompatibleType","powerbi.data.SQExprValidationVisitor.validateEntity","powerbi.data.SQExprValidationVisitor.validateHierarchy","powerbi.data.SQExprValidationVisitor.validateHierarchyLevel","powerbi.data.SQExprValidationVisitor.register","powerbi.data.SQExprValidationVisitor.isQueryable","powerbi.data.SQExprAggregateInfoVisitor","powerbi.data.SQExprAggregateInfoVisitor.constructor","powerbi.data.SQExprAggregateInfoVisitor.visitAggr","powerbi.data.SQExprAggregateInfoVisitor.visitDefault","powerbi.data.SQExprAggregateInfoVisitor.getAggregate","powerbi.data.SQExprColumnRefInfoVisitor","powerbi.data.SQExprColumnRefInfoVisitor.constructor","powerbi.data.SQExprColumnRefInfoVisitor.visitColumnRef","powerbi.data.SQExprColumnRefInfoVisitor.visitHierarchyLevel","powerbi.data.SQExprColumnRefInfoVisitor.visitHierarchy","powerbi.data.SQExprColumnRefInfoVisitor.visitPropertyVariationSource","powerbi.data.SQExprColumnRefInfoVisitor.visitDefault","powerbi.data.SQExprColumnRefInfoVisitor.getColumnRefSQExpr","powerbi.data.SQExprChangeAggregateRewriter","powerbi.data.SQExprChangeAggregateRewriter.constructor","powerbi.data.SQExprChangeAggregateRewriter.visitAggr","powerbi.data.SQExprChangeAggregateRewriter.visitColumnRef","powerbi.data.SQExprChangeAggregateRewriter.rewrite","powerbi.data.SQExprRemoveAggregateRewriter","powerbi.data.SQExprRemoveAggregateRewriter.constructor","powerbi.data.SQExprRemoveAggregateRewriter.visitAggr","powerbi.data.SQExprRemoveAggregateRewriter.rewrite","powerbi.data.SQExprRemoveEntityVariablesRewriter","powerbi.data.SQExprRemoveEntityVariablesRewriter.constructor","powerbi.data.SQExprRemoveEntityVariablesRewriter.visitEntity","powerbi.data.SQExprRemoveEntityVariablesRewriter.rewrite","powerbi.data.SQExprUtils","powerbi.data.SQExprUtils.getSupportedAggregates","powerbi.data.SQExprUtils.supportsArithmetic","powerbi.data.SQExprUtils.isSupportedAggregate","powerbi.data.SQExprUtils.indexOfExpr","powerbi.data.SQExprUtils.sequenceEqual","powerbi.data.SQExprUtils.uniqueName","powerbi.data.SQExprUtils.defaultName","powerbi.data.SQExprUtils.isMeasure","powerbi.data.SQExprUtils.isAnyValue","powerbi.data.SQExprUtils.isDefaultValue","powerbi.data.SQExprUtils.discourageAggregation","powerbi.data.SQExprUtils.getAggregateBehavior","powerbi.data.SQExprUtils.getSchemaCapabilities","powerbi.data.SQExprUtils.getKpiMetadata","powerbi.data.SQExprUtils.getKpiStatusProperty","powerbi.data.SQExprUtils.getKpiTrendProperty","powerbi.data.SQExprUtils.getMetadataForUnderlyingType","powerbi.data.SQExprUtils.getDefaultValue","powerbi.data.SQExprUtils.getConceptualColumn","powerbi.data.SQExprUtils.getDefaultValues","powerbi.data.SQExprUtils.getDataViewScopeIdentityComparisonExpr","powerbi.data.SQExprUtils.getActiveTablesNames","powerbi.data.SQExprUtils.SQExprDefaultNameGenerator","powerbi.data.SQExprUtils.SQExprDefaultNameGenerator.constructor","powerbi.data.SQExprUtils.SQExprDefaultNameGenerator.visitEntity","powerbi.data.SQExprUtils.SQExprDefaultNameGenerator.visitColumnRef","powerbi.data.SQExprUtils.SQExprDefaultNameGenerator.visitMeasureRef","powerbi.data.SQExprUtils.SQExprDefaultNameGenerator.visitAggr","powerbi.data.SQExprUtils.SQExprDefaultNameGenerator.visitArithmetic","powerbi.data.SQExprUtils.SQExprDefaultNameGenerator.visitConstant","powerbi.data.SQExprUtils.SQExprDefaultNameGenerator.visitDefault","powerbi.data.SQExprUtils.IsMeasureVisitor","powerbi.data.SQExprUtils.IsMeasureVisitor.constructor","powerbi.data.SQExprUtils.IsMeasureVisitor.visitMeasureRef","powerbi.data.SQExprUtils.IsMeasureVisitor.visitAggr","powerbi.data.SQExprUtils.IsMeasureVisitor.visitArithmetic","powerbi.data.SQExprUtils.IsMeasureVisitor.visitDefault","powerbi.data.SQExprUtils.IsDefaultValueVisitor","powerbi.data.SQExprUtils.IsDefaultValueVisitor.constructor","powerbi.data.SQExprUtils.IsDefaultValueVisitor.visitCompare","powerbi.data.SQExprUtils.IsDefaultValueVisitor.visitAnd","powerbi.data.SQExprUtils.IsDefaultValueVisitor.visitDefaultValue","powerbi.data.SQExprUtils.IsDefaultValueVisitor.visitDefault","powerbi.data.SQExprUtils.IsAnyValueVisitor","powerbi.data.SQExprUtils.IsAnyValueVisitor.constructor","powerbi.data.SQExprUtils.IsAnyValueVisitor.visitCompare","powerbi.data.SQExprUtils.IsAnyValueVisitor.visitAnd","powerbi.data.SQExprUtils.IsAnyValueVisitor.visitAnyValue","powerbi.data.SQExprUtils.IsAnyValueVisitor.visitDefault","powerbi.data.SemanticQueryRewriter","powerbi.data.SemanticQueryRewriter.constructor","powerbi.data.SemanticQueryRewriter.rewriteFrom","powerbi.data.SemanticQueryRewriter.rewriteSelect","powerbi.data.SemanticQueryRewriter.rewriteGroupBy","powerbi.data.SemanticQueryRewriter.rewriteNamedSQExpressions","powerbi.data.SemanticQueryRewriter.rewriteOrderBy","powerbi.data.SemanticQueryRewriter.rewriteWhere","powerbi.data.SemanticQuery","powerbi.data.SemanticQuery.constructor","powerbi.data.SemanticQuery.create","powerbi.data.SemanticQuery.createWithTrimmedFrom","powerbi.data.SemanticQuery.from","powerbi.data.SemanticQuery.select","powerbi.data.SemanticQuery.getSelect","powerbi.data.SemanticQuery.createNamedExpressionArray","powerbi.data.SemanticQuery.setSelect","powerbi.data.SemanticQuery.rewriteExpressionsWithSourceRenames","powerbi.data.SemanticQuery.removeSelect","powerbi.data.SemanticQuery.removeOrderBy","powerbi.data.SemanticQuery.selectNameOf","powerbi.data.SemanticQuery.setSelectAt","powerbi.data.SemanticQuery.addSelect","powerbi.data.SemanticQuery.groupBy","powerbi.data.SemanticQuery.getGroupBy","powerbi.data.SemanticQuery.setGroupBy","powerbi.data.SemanticQuery.orderBy","powerbi.data.SemanticQuery.getOrderBy","powerbi.data.SemanticQuery.setOrderBy","powerbi.data.SemanticQuery.where","powerbi.data.SemanticQuery.getWhere","powerbi.data.SemanticQuery.setWhere","powerbi.data.SemanticQuery.addWhere","powerbi.data.SemanticQuery.rewrite","powerbi.data.SemanticFilter","powerbi.data.SemanticFilter.constructor","powerbi.data.SemanticFilter.fromSQExpr","powerbi.data.SemanticFilter.getDefaultValueFilter","powerbi.data.SemanticFilter.getAnyValueFilter","powerbi.data.SemanticFilter.getDataViewScopeIdentityComparisonFilters","powerbi.data.SemanticFilter.from","powerbi.data.SemanticFilter.conditions","powerbi.data.SemanticFilter.where","powerbi.data.SemanticFilter.rewrite","powerbi.data.SemanticFilter.validate","powerbi.data.SemanticFilter.merge","powerbi.data.SemanticFilter.isDefaultFilter","powerbi.data.SemanticFilter.isAnyFilter","powerbi.data.SemanticFilter.isSameFilter","powerbi.data.SemanticFilter.applyFilter","powerbi.data.SQFrom","powerbi.data.SQFrom.constructor","powerbi.data.SQFrom.keys","powerbi.data.SQFrom.entity","powerbi.data.SQFrom.ensureEntity","powerbi.data.SQFrom.remove","powerbi.data.SQFrom.candidateName","powerbi.data.SQFrom.clone","powerbi.data.SQExprRewriterWithSourceRenames","powerbi.data.SQExprRewriterWithSourceRenames.constructor","powerbi.data.SQExprRewriterWithSourceRenames.visitEntity","powerbi.data.SQExprRewriterWithSourceRenames.rewriteFilter","powerbi.data.SQExprRewriterWithSourceRenames.rewriteArray","powerbi.data.SQExprRewriterWithSourceRenames.rewrite","powerbi.data.QuerySourceRenameDetector","powerbi.data.QuerySourceRenameDetector.constructor","powerbi.data.QuerySourceRenameDetector.run","powerbi.data.QuerySourceRenameDetector.visitEntity","powerbi.data.UnreferencedKeyFinder","powerbi.data.UnreferencedKeyFinder.constructor","powerbi.data.UnreferencedKeyFinder.visitEntity","powerbi.data.UnreferencedKeyFinder.result","powerbi.data.createCategoricalDataViewBuilder","powerbi.data.CategoricalDataViewBuilder","powerbi.data.CategoricalDataViewBuilder.constructor","powerbi.data.CategoricalDataViewBuilder.withCategory","powerbi.data.CategoricalDataViewBuilder.withCategories","powerbi.data.CategoricalDataViewBuilder.withValues","powerbi.data.CategoricalDataViewBuilder.withGroupedValues","powerbi.data.CategoricalDataViewBuilder.fillData","powerbi.data.CategoricalDataViewBuilder.build","powerbi.data.getScopeIdentity","powerbi.data.pushIfNotExists","powerbi.data.applySeriesData","powerbi.data.createStaticEvalContext","powerbi.data.StaticEvalContext","powerbi.data.StaticEvalContext.constructor","powerbi.data.StaticEvalContext.getExprValue","powerbi.data.StaticEvalContext.getRoleValue","powerbi.data.getExprValueFromTable","powerbi.data.createMatrixEvalContext","powerbi.FormattingEncoder","powerbi.FormattingEncoder.preserveEscaped","powerbi.FormattingEncoder.restoreEscaped","powerbi.FormattingEncoder.preserveLiterals","powerbi.FormattingEncoder.restoreLiterals","powerbi.FormattingService","powerbi.FormattingService.constructor","powerbi.FormattingService.formatValue","powerbi.FormattingService.format","powerbi.FormattingService.isStandardNumberFormat","powerbi.FormattingService.formatNumberWithCustomOverride","powerbi.FormattingService.dateFormatString","powerbi.FormattingService.setCurrentCulture","powerbi.FormattingService.getCulture","powerbi.FormattingService.initialize","powerbi.FormattingService.getCurrentCulture","powerbi.FormattingService.getUrlParam","powerbi.DateTimeFormat","powerbi.DateTimeFormat.canFormat","powerbi.DateTimeFormat.format","powerbi.DateTimeFormat.formatDateStandard","powerbi.DateTimeFormat.formatDateCustom","powerbi.DateTimeFormat.processCustomDateTimeFormat","powerbi.DateTimeFormat.localize","powerbi.DateTimeFormat.ensurePatterns","powerbi.NumberFormat","powerbi.NumberFormat.getNonScientificFormatWithPrecision","powerbi.NumberFormat.getNumericFormat","powerbi.NumberFormat.getNumericFormatFromComponent","powerbi.NumberFormat.addDecimalsToFormat","powerbi.NumberFormat.addDecimalsToFormatComponent","powerbi.NumberFormat.hasFormatComponents","powerbi.NumberFormat.getComponents","powerbi.NumberFormat.canFormat","powerbi.NumberFormat.isStandardFormat","powerbi.NumberFormat.format","powerbi.NumberFormat.formatWithCustomOverride","powerbi.NumberFormat.formatNumberStandard","powerbi.NumberFormat.formatNumberCustom","powerbi.NumberFormat.toNonScientific","powerbi.NumberFormat.getCustomFormatMetadata","powerbi.NumberFormat.getCustomFormatPrecision","powerbi.NumberFormat.getCustomFormatScale","powerbi.NumberFormat.fuseNumberWithCustomFormat","powerbi.NumberFormat.fuseNumberWithCustomFormatLeft","powerbi.NumberFormat.fuseNumberWithCustomFormatRight","powerbi.NumberFormat.localize","powerbi.DateTimeScaleFormatInfo","powerbi.DateTimeScaleFormatInfo.constructor","powerbi.DateTimeScaleFormatInfo.getFormatString","powerbi.data.SQExprShortSerializer","powerbi.data.SQExprShortSerializer.serialize","powerbi.data.SQExprShortSerializer.serializeArray","powerbi.data.SQExprShortSerializer.SQExprSerializer","powerbi.data.SQExprShortSerializer.SQExprSerializer.constructor","powerbi.data.SQExprShortSerializer.SQExprSerializer.visitColumnRef","powerbi.data.SQExprShortSerializer.SQExprSerializer.visitMeasureRef","powerbi.data.SQExprShortSerializer.SQExprSerializer.visitAggr","powerbi.data.SQExprShortSerializer.SQExprSerializer.visitEntity","powerbi.data.SQExprShortSerializer.SQExprSerializer.visitAnd","powerbi.data.SQExprShortSerializer.SQExprSerializer.visitCompare","powerbi.data.SQExprShortSerializer.SQExprSerializer.visitConstant","powerbi.data.SQExprShortSerializer.SQExprSerializer.visitArithmetic","powerbi.data.SQExprShortSerializer.SQExprSerializer.visitDefault"],"mappings":"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CA;QAEDD,0FAA0FA;QAC5EA,wBAAcA,GAA5BA,UAA6BA,UAA+BA;YACxDE,UAAUA,GAAGA,UAAUA,IAAIA,EAAEA,CAACA;YAE9BA,6BAA6BA;YAC7BA,EAAEA,CAACA,CAACA,UAAUA,CAACA,IAAIA,CAACA;gBAACA,MAAMA,CAACA,SAASA,CAACA,gBAAgBA,CAACA,YAAYA,CAACA,IAAIA,CAACA,CAACA;YAC1EA,EAAEA,CAACA,CAACA,UAAUA,CAACA,OAAOA,CAACA;gBAACA,MAAMA,CAACA,SAASA,CAACA,gBAAgBA,CAACA,YAAYA,CAACA,OAAOA,CAACA,CAACA;YAChFA,EAAEA,CAACA,CAACA,UAAUA,CAACA,OAAOA,CAACA;gBAACA,MAAMA,CAACA,SAASA,CAACA,gBAAgBA,CAACA,YAAYA,CAACA,MAAMA,CAACA,CAACA;YAC/EA,EAAEA,CAACA,CAACA,UAAUA,CAACA,IAAIA,CAACA;gBAACA,MAAMA,CAACA,SAASA,CAACA,gBAAgBA,CAACA,YAAYA,CAACA,OAAOA,CAACA,CAACA;YAC7EA,EAAEA,CAACA,CAACA,UAAUA,CAACA,QAAQA,CAACA;gBAACA,MAAMA,CAACA,SAASA,CAACA,gBAAgBA,CAACA,YAAYA,CAACA,QAAQA,CAACA,CAACA;YAClFA,EAAEA,CAACA,CAACA,UAAUA,CAACA,QAAQA,CAACA;gBAACA,MAAMA,CAACA,SAASA,CAACA,gBAAgBA,CAACA,YAAYA,CAACA,QAAQA,CAACA,CAACA;YAClFA,EAAEA,CAACA,CAACA,UAAUA,CAACA,MAAMA,CAACA;gBAACA,MAAMA,CAACA,SAASA,CAACA,gBAAgBA,CAACA,YAAYA,CAACA,MAAMA,CAACA,CAACA;YAC9EA,EAAEA,CAACA,CAACA,UAAUA,CAACA,IAAIA,CAACA;gBAACA,MAAMA,CAACA,SAASA,CAACA,gBAAgBA,CAACA,YAAYA,CAACA,IAAIA,CAACA,CAACA;YAE1EA,iBAAiBA;YACjBA,EAAEA,CAACA,CAACA,UAAUA,CAACA,SAASA,CAACA,CAACA,CAACA;gBACvBA,EAAEA,CAACA,CAACA,UAAUA,CAACA,SAASA,CAACA,MAAMA,CAACA;oBAACA,MAAMA,CAACA,SAASA,CAACA,gBAAgBA,CAACA,YAAYA,CAACA,YAAYA,CAACA,CAACA;YAClGA,CAACA;YACDA,EAAEA,CAACA,CAACA,UAAUA,CAACA,WAAWA,CAACA;gBAACA,MAAMA,CAACA,SAASA,CAACA,QAAQA,CAACA,UAAUA,CAACA,WAAWA,CAACA,CAACA;YAC9EA,EAAEA,CAACA,CAACA,UAAUA,CAACA,QAAQA,CAACA,CAACA,CAACA;gBACtBA,EAAEA,CAACA,CAACA,UAAUA,CAACA,QAAQA,CAACA,IAAIA,CAACA;oBAACA,MAAMA,CAACA,SAASA,CAACA,gBAAgBA,CAACA,YAAYA,CAACA,YAAYA,CAACA,CAACA;gBAC3FA,EAAEA,CAACA,CAACA,UAAUA,CAACA,QAAQA,CAACA,KAAKA,CAACA;oBAACA,MAAMA,CAACA,SAASA,CAACA,gBAAgBA,CAACA,YAAYA,CAACA,aAAaA,CAACA,CAACA;YACjGA,CAACA;YACDA,EAAEA,CAACA,CAACA,UAAUA,CAACA,SAASA,CAACA,CAACA,CAACA;gBACvBA,EAAEA,CAACA,CAACA,UAAUA,CAACA,SAASA,CAACA,OAAOA,CAACA;oBAACA,MAAMA,CAACA,SAASA,CAACA,gBAAgBA,CAACA,YAAYA,CAACA,OAAOA,CAACA,CAACA;gBAC1FA,EAAEA,CAACA,CAACA,UAAUA,CAACA,SAASA,CAACA,IAAIA,CAACA;oBAACA,MAAMA,CAACA,SAASA,CAACA,gBAAgBA,CAACA,YAAYA,CAACA,IAAIA,CAACA,CAACA;gBACpFA,EAAEA,CAACA,CAACA,UAAUA,CAACA,SAASA,CAACA,SAASA,CAACA;oBAACA,MAAMA,CAACA,SAASA,CAACA,gBAAgBA,CAACA,YAAYA,CAACA,SAASA,CAACA,CAACA;gBAC9FA,EAAEA,CAACA,CAACA,UAAUA,CAACA,SAASA,CAACA,OAAOA,CAACA;oBAACA,MAAMA,CAACA,SAASA,CAACA,gBAAgBA,CAACA,YAAYA,CAACA,OAAOA,CAACA,CAACA;gBAC1FA,EAAEA,CAACA,CAACA,UAAUA,CAACA,SAASA,CAACA,MAAMA,CAACA;oBAACA,MAAMA,CAACA,SAASA,CAACA,gBAAgBA,CAACA,YAAYA,CAACA,MAAMA,CAACA,CAACA;gBACxFA,EAAEA,CAACA,CAACA,UAAUA,CAACA,SAASA,CAACA,MAAMA,CAACA;oBAACA,MAAMA,CAACA,SAASA,CAACA,gBAAgBA,CAACA,YAAYA,CAACA,MAAMA,CAACA,CAACA;gBACxFA,EAAEA,CAACA,CAACA,UAAUA,CAACA,SAASA,CAACA,UAAUA,CAACA;oBAACA,MAAMA,CAACA,SAASA,CAACA,gBAAgBA,CAACA,YAAYA,CAACA,eAAeA,CAACA,CAACA;gBACrGA,EAAEA,CAACA,CAACA,UAAUA,CAACA,SAASA,CAACA,eAAeA,CAACA;oBAACA,MAAMA,CAACA,SAASA,CAACA,gBAAgBA,CAACA,YAAYA,CAACA,eAAeA,CAACA,CAACA;gBAC1GA,EAAEA,CAACA,CAACA,UAAUA,CAACA,SAASA,CAACA,KAAKA,CAACA;oBAACA,MAAMA,CAACA,SAASA,CAACA,gBAAgBA,CAACA,YAAYA,CAACA,KAAKA,CAACA,CAACA;gBACtFA,EAAEA,CAACA,CAACA,UAAUA,CAACA,SAASA,CAACA,QAAQA,CAACA;oBAACA,MAAMA,CAACA,SAASA,CAACA,gBAAgBA,CAACA,YAAYA,CAACA,eAAeA,CAACA,CAACA;gBACnGA,EAAEA,CAACA,CAACA,UAAUA,CAACA,SAASA,CAACA,SAASA,CAACA;oBAACA,MAAMA,CAACA,SAASA,CAACA,gBAAgBA,CAACA,YAAYA,CAACA,gBAAgBA,CAACA,CAACA;YACzGA,CAACA;YACDA,EAAEA,CAACA,CAACA,UAAUA,CAACA,IAAIA,CAACA,CAACA,CAACA;gBAClBA,EAAEA,CAACA,CAACA,UAAUA,CAACA,IAAIA,CAACA,KAAKA,CAACA;oBAACA,MAAMA,CAACA,SAASA,CAACA,gBAAgBA,CAACA,YAAYA,CAACA,KAAKA,CAACA,CAACA;gBACjFA,EAAEA,CAACA,CAACA,UAAUA,CAACA,IAAIA,CAACA,QAAQA,CAACA;oBAACA,MAAMA,CAACA,SAASA,CAACA,gBAAgBA,CAACA,YAAYA,CAACA,QAAQA,CAACA,CAACA;gBACvFA,EAAEA,CAACA,CAACA,UAAUA,CAACA,IAAIA,CAACA,MAAMA,CAACA;oBAACA,MAAMA,CAACA,SAASA,CAACA,gBAAgBA,CAACA,YAAYA,CAACA,MAAMA,CAACA,CAACA;YACvFA,CAACA;YACDA,EAAEA,CAACA,CAACA,UAAUA,CAACA,UAAUA,CAACA,CAACA,CAACA;gBACxBA,EAAEA,CAACA,CAACA,UAAUA,CAACA,UAAUA,CAACA,KAAKA,CAACA;oBAACA,MAAMA,CAACA,SAASA,CAACA,gBAAgBA,CAACA,YAAYA,CAACA,KAAKA,CAACA,CAACA;gBACvFA,EAAEA,CAACA,CAACA,UAAUA,CAACA,UAAUA,CAACA,YAAYA,CAACA;oBAACA,MAAMA,CAACA,SAASA,CAACA,gBAAgBA,CAACA,YAAYA,CAACA,YAAYA,CAACA,CAACA;gBACrGA,EAAEA,CAACA,CAACA,UAAUA,CAACA,UAAUA,CAACA,SAASA,CAACA;oBAACA,MAAMA,CAACA,SAASA,CAACA,gBAAgBA,CAACA,YAAYA,CAACA,SAASA,CAACA,CAACA;gBAC/FA,EAAEA,CAACA,CAACA,UAAUA,CAACA,UAAUA,CAACA,iBAAiBA,CAACA;oBAACA,MAAMA,CAACA,SAASA,CAACA,gBAAgBA,CAACA,YAAYA,CAACA,iBAAiBA,CAACA,CAACA;gBAC/GA,EAAEA,CAACA,CAACA,UAAUA,CAACA,UAAUA,CAACA,QAAQA,CAACA;oBAACA,MAAMA,CAACA,SAASA,CAACA,gBAAgBA,CAACA,YAAYA,CAACA,QAAQA,CAACA,CAACA;gBAC7FA,EAAEA,CAACA,CAACA,UAAUA,CAACA,UAAUA,CAACA,YAAYA,CAACA;oBAACA,MAAMA,CAACA,SAASA,CAACA,gBAAgBA,CAACA,YAAYA,CAACA,YAAYA,CAACA,CAACA;YACzGA,CAACA;YACDA,EAAEA,CAACA,CAACA,UAAUA,CAACA,YA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A,CAACA,kBAAaA,CAACA,OAAOA,CAAUA,KAAKA,CAACA,CAACA;gBACjDA,CAACA;gBACDA,IAAIA,CAACA,EAAEA,CAACA,CAACA,mBAAmBA,CAACA,IAAIA,IAAIA,CAACA,mBAAmBA,CAACA,SAASA,IAAIA,mBAAmBA,CAACA,SAASA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA;oBAC3GA,MAAMA,CAACA,kBAAaA,CAACA,IAAIA,CAASA,KAAKA,CAACA,CAACA;gBAC7CA,CAACA;gBACDA,IAAIA,CAACA,EAAEA,CAACA,CAACA,mBAAmBA,CAACA,OAAOA,CAACA,CAACA,CAACA;oBACnCA,EAAEA,CAACA,CAACA,CAACA,CAACA,SAASA,CAACA,KAAKA,CAACA,CAACA;wBACnBA,MAAMA,CAACA,kBAAaA,CAACA,MAAMA,CAACA,CAACA,KAAKA,CAACA,CAACA;gBAC5CA,CAACA;gBACDA,IAAIA,CAACA,EAAEA,CAACA,CAA4BA,mBAAoBA,CAACA,IAAIA,CAACA,CAACA,CAACA;oBAC5DA,EAAEA,CAACA,CAACA,KAAKA,CAACA,CAACA,CAACA;wBACRA,MAAMA,CAACA;4BACHA,KAAKA,EAAEA,EAAEA,KAAKA,EAAEA,kBAAaA,CAACA,IAAIA,CAASA,KAAKA,CAACA,EAAEA;yBACtDA,CAACA;oBACNA,CAACA;gBACLA,CAACA;gBACDA,IAAIA,CAACA,EAAEA,CAACA,CAACA,mBAAmBA,CAACA,UAAUA,CAACA,CAACA,CAACA;oBACtCA,EAAEA,CAACA,CAACA,mBAAmBA,CAACA,UAAUA,CAACA,iBAAiBA,CAACA,CAACA,CAACA;wBACnDA,MAAMA,CAACA,kBAAaA,CAACA,MAAMA,CAACA,CAACA,KAAKA,CAACA,CAACA;oBACxCA,CAACA;oBACDA,IAAIA,CAACA,CAACA;wBACFA,MAAMA,CAACA,kBAAaA,CAACA,IAAIA,CAASA,KAAKA,CAACA,CAACA;oBAC7CA,CAACA;gBACLA,CAACA;gBACDA,IAAIA,CAACA,EAAEA,CAACA,CAACA,mBAAmBA,CAACA,WAAWA,CAACA,CAA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CAACA,OAAOA,CAACA,SAASA,CAACA,SAASA,CAACA,CAACA,CAACA,EAAEA,OAAOA,CAACA,OAAOA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA,CAACA;gBAE3FA,OAAOA,CAACA,SAASA,GAAGA,SAASA,CAACA;gBAE9BA,iCAAiCA;gBACjCA,OAAOA,CAACA,aAAaA,GAAGA;oBACpBA,OAAOA,EAAEA,6BAA6BA,CAACA,UAAUA,CAACA,YAAYA,CAACA,WAAWA,CAACA,sBAAsBA,CAACA;oBAClGA,UAAUA,EAAEA,YAAYA,CAACA,WAAWA,CAACA,UAAUA,IAAIA,iBAAiBA;iBACvEA,CAACA;YACNA,CAACA;YA3BeD,oDAAYA,eA2B3BA,CAAAA;YAEDA,0EAA0EA;YAC1EA,yBAAyBA,IAAuCA;gBAC5DE,MAAMA,CAACA,IAAIA;uBACJA,IAAIA,CAACA,SAASA;uBACdA,IAAIA,CAACA,SAASA,CAACA,MAAMA,KAAKA,CAACA;uBAC3BA,CAACA,CAACA,CAACA,OAAOA,CAACA,IAAIA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA,WAAWA,CAACA;uBACzCA,CAACA,IAAIA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA,QAAQA;uBAC3BA,CAACA,CAACA,OAAOA,CAACA,IAAIA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA,qBAAqBA,CAACA,CAACA;YAC9DA,CAACA;YAEDF,6BAA6BA,OAAyBA,EAAEA,OAAgCA;gBACpFG,EAAEA,CAACA,CAACA,CAACA,eAAeA,CAACA,OAAOA,CAACA,OAAOA,CAACA,CAACA;oBAClCA,MAAMA,CAACA,KAAKA,CAACA;gBACjBA,EAAEA,CAACA,CAACA,CAACA,eAAeA,CAACA,OAAOA,CAACA,SAASA,CAACA,IAAIA,OAAOA,CAACA,SAASA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA,WAAWA,CAACA,MAAMA,KAAKA,CAACA,CAACA;oBAC/FA,MAAMA,CAACA,KAAKA,CAACA;gBAEjBA,kDAAkDA;gBAClDA,EAAEA,CAACA,CAACA,OAAOA,CAACA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A,CAACA,KAAKA,CAACA,MAAMA,EAAEA,cAAcA,CAACA,CAACA;oBACjEA,EAAEA,CAACA,CAACA,eAAeA,CAACA,CAACA,CAACA;wBAClBA,IAAIA,SAASA,GAAGA,OAAOA,CAACA,KAAKA,CAACA,CAACA;wBAC/BA,SAASA,CAACA,MAAMA,GAAGA,eAAeA,CAACA;wBACnCA,MAAMA,CAACA,SAASA,CAACA;oBACrBA,CAACA;gBACLA,CAACA;gBAEDD,IAAIA,UAAUA,GAAGA,iBAASA,CAACA,aAAaA,CAACA,SAASA,CAACA,UAAUA,EAAEA,QAAQA,CAACA,CAACA;gBACzEA,EAAEA,CAACA,CAACA,UAAUA,CAACA;oBACXA,WAAWA,CAACA,UAAUA,GAAGA,UAAUA,CAACA;gBAExCA,IAAIA,MAAMA,GAAGA,iBAASA,CAACA,aAAaA,CAACA,SAASA,CAACA,MAAMA,EAAEA,QAAQA,CAACA,CAACA;gBAEjEA,EAAEA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA;oBACTA,EAAEA,CAACA,CAACA,gBAAgBA,CAACA,CAACA,CAACA;wBACnBA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,MAAMA,CAACA,MAAMA,GAAGA,CAACA,EAAEA,CAACA,IAAIA,CAACA,EAAEA,CAACA,EAAEA,EAAEA,CAACA;4BAC1CA,EAAEA,CAACA,CAACA,CAACA,gBAAgBA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,MAAMA,CAACA,KAAKA,CAACA,CAACA;gCAC1CA,MAAMA,CAACA,MAAMA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;wBAC5BA,CAACA;oBACLA,CAACA;oBAEDA,EAAEA,CAACA,CAACA,MAAMA,CAACA,MAAMA,CAACA,CAACA,CAACA;wBAChBA,EAAEA,CAACA,CAACA,gBAAgBA,IAAIA,CAACA,gBAAgBA,CAACA,MAAMA,CAACA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA;4BAC7DA,MAAMA,CAACA,MAAMA,GAAGA,SAASA,CAACA;wBAC9BA,CAACA;wBACDA,IAAIA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ACA;oBACjBA,KAAKA,eAAeA,CAACA;oBACrBA,KAAKA,gBAAgBA;wBACjBA,OAAOA,GAAGA,KAAKA,CAACA;wBAChBA,EAAEA,CAACA,CAACA,UAAUA,KAAKA,EAAEA,CAACA,CAACA,CAACA;4BACpBA,MAAMA,GAAGA,UAAUA,GAAGA,MAAMA,CAACA;4BAC7BA,UAAUA,GAAGA,EAAEA,CAACA;wBACpBA,CAACA;wBACDA,EAAEA,CAACA,CAACA,CAACA,mBAAmBA,CAACA,CAACA,CAACA;4BACvBA,EAAEA,CAACA,CAACA,EAAEA,GAAGA,CAACA,CAACA,IAAIA,UAAUA,KAAKA,eAAeA,CAACA,CAACA,CAACA;gCAC5CA,EAAEA,CAACA,CAACA,YAAYA,CAACA,CAACA,CAACA;oCACfA,yHAAyHA;oCACzHA,EAAEA,CAACA,CAACA,eAAeA,KAAKA,SAASA,CAACA,CAACA,CAACA;wCAChCA,MAAMA,GAAGA,cAAcA,GAAGA,MAAMA,CAACA;wCACjCA,UAAUA,EAAEA,CAACA;wCACbA,EAAEA,CAACA,CAACA,UAAUA,GAAGA,UAAUA,CAACA,MAAMA,CAACA,CAACA,CAACA;4CACjCA,SAASA,GAAGA,UAAUA,CAACA,UAAUA,CAACA,CAACA;wCACvCA,CAACA;wCACDA,eAAeA,GAAGA,CAACA,CAACA;oCACxBA,CAACA;oCAACA,IAAIA,CAACA,CAACA;wCACJA,eAAeA,EAAEA,CAACA;oCACtBA,CAACA;gCACLA,CAACA;4BACLA,CAACA;4BACDA,EAAEA,CAACA,CAACA,EAAEA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA;gCACVA,EAAEA,CAACA,CAACA,MAAMA,IAAIA,UAAUA,KAAKA,gBAAgBA,CAACA,CAACA,CAACA;gCAEhDA,CAACA;gCAACA,IAAIA,CAACA,CAACA;oCACJA,MAAMA,GAAGA,KAAKA,CAACA,MAAMA,CAACA,EAAEA,CAACA,GAAGA,MAAMA,CAACA;gCACvCA,CAACA;gCACDA,EAAEA,EAAEA,CAACA;4BACTA,CAACA;4BAACA,IAAIA,CAACA,EAAEA,CAACA,CAACA,UAA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","file":"VisualsData.js","sourcesContent":["/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\n///<reference path=\"../../Typedefs/jquery/jquery.d.ts\"/>\r\n///<reference path=\"../../Typedefs/globalize/globalize.d.ts\"/>\r\n///<reference path=\"../../Typedefs/lodash/lodash.d.ts\"/>\r\n","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n\r\n    /** Allows generic traversal and type discovery for a SQExpr tree. */\r\n    export interface ISQExprVisitorWithArg<T, TArg> {\r\n        visitEntity(expr: SQEntityExpr, arg: TArg): T;\r\n        visitColumnRef(expr: SQColumnRefExpr, arg: TArg): T;\r\n        visitMeasureRef(expr: SQMeasureRefExpr, arg: TArg): T;\r\n        visitAggr(expr: SQAggregationExpr, arg: TArg): T;\r\n        visitHierarchy(expr: SQHierarchyExpr, arg: TArg): T;\r\n        visitHierarchyLevel(expr: SQHierarchyLevelExpr, arg: TArg): T;\r\n        visitPropertyVariationSource(expr: SQPropertyVariationSourceExpr, arg: TArg): T;\r\n        visitAnd(expr: SQAndExpr, arg: TArg): T;\r\n        visitBetween(expr: SQBetweenExpr, arg: TArg): T;\r\n        visitIn(expr: SQInExpr, arg: TArg): T;\r\n        visitOr(expr: SQOrExpr, arg: TArg): T;\r\n        visitCompare(expr: SQCompareExpr, arg: TArg): T;\r\n        visitContains(expr: SQContainsExpr, arg: TArg): T;\r\n        visitExists(expr: SQExistsExpr, arg: TArg): T;\r\n        visitNot(expr: SQNotExpr, arg: TArg): T;\r\n        visitStartsWith(expr: SQStartsWithExpr, arg: TArg): T;\r\n        visitConstant(expr: SQConstantExpr, arg: TArg): T;\r\n        visitDateSpan(expr: SQDateSpanExpr, arg: TArg): T;\r\n        visitDateAdd(expr: SQDateAddExpr, arg: TArg): T;\r\n        visitNow(expr: SQNowExpr, arg: TArg): T;\r\n        visitDefaultValue(expr: SQDefaultValueExpr, arg: TArg): T;\r\n        visitAnyValue(expr: SQAnyValueExpr, arg: TArg): T;\r\n        visitArithmetic(expr: SQArithmeticExpr, arg: TArg): T;\r\n        visitFillRule(expr: SQFillRuleExpr, arg: TArg): T;\r\n    }\r\n\r\n    export interface ISQExprVisitor<T> extends ISQExprVisitorWithArg<T, void> {\r\n    }\r\n\r\n    /** Default IQueryExprVisitorWithArg implementation that others may derive from. */\r\n    export class DefaultSQExprVisitorWithArg<T, TArg> implements ISQExprVisitorWithArg<T, TArg> {\r\n        public visitEntity(expr: SQEntityExpr, arg: TArg): T {\r\n            return this.visitDefault(expr, arg);\r\n        }\r\n\r\n        public visitColumnRef(expr: SQColumnRefExpr, arg: TArg): T {\r\n            return this.visitDefault(expr, arg);\r\n        }\r\n\r\n        public visitMeasureRef(expr: SQMeasureRefExpr, arg: TArg): T {\r\n            return this.visitDefault(expr, arg);\r\n        }\r\n\r\n        public visitAggr(expr: SQAggregationExpr, arg: TArg): T {\r\n            return this.visitDefault(expr, arg);\r\n        }\r\n\r\n        public visitHierarchy(expr: SQHierarchyExpr, arg: TArg): T {\r\n            return this.visitDefault(expr, arg);\r\n        }\r\n\r\n        public visitHierarchyLevel(expr: SQHierarchyLevelExpr, arg: TArg): T {\r\n            return this.visitDefault(expr, arg);\r\n        }\r\n\r\n        public visitPropertyVariationSource(expr: SQPropertyVariationSourceExpr, arg: TArg): T {\r\n            return this.visitDefault(expr, arg);\r\n        }\r\n\r\n        public visitBetween(expr: SQBetweenExpr, arg: TArg): T {\r\n            return this.visitDefault(expr, arg);\r\n        }\r\n\r\n        public visitIn(expr: SQInExpr, arg: TArg): T {\r\n            return this.visitDefault(expr, arg);\r\n        }\r\n\r\n        public visitAnd(expr: SQAndExpr, arg: TArg): T {\r\n            return this.visitDefault(expr, arg);\r\n        }\r\n\r\n        public visitOr(expr: SQOrExpr, arg: TArg): T {\r\n            return this.visitDefault(expr, arg);\r\n        }\r\n\r\n        public visitCompare(expr: SQCompareExpr, arg: TArg): T {\r\n            return this.visitDefault(expr, arg);\r\n        }\r\n\r\n        public visitContains(expr: SQContainsExpr, arg: TArg): T {\r\n            return this.visitDefault(expr, arg);\r\n        }\r\n\r\n        public visitExists(expr: SQExistsExpr, arg: TArg): T {\r\n            return this.visitDefault(expr, arg);\r\n        }\r\n\r\n        public visitNot(expr: SQNotExpr, arg: TArg): T {\r\n            return this.visitDefault(expr, arg);\r\n        }\r\n\r\n        public visitStartsWith(expr: SQStartsWithExpr, arg: TArg): T {\r\n            return this.visitDefault(expr, arg);\r\n        }\r\n\r\n        public visitConstant(expr: SQConstantExpr, arg: TArg): T {\r\n            return this.visitDefault(expr, arg);\r\n        }\r\n\r\n        public visitDateSpan(expr: SQDateSpanExpr, arg: TArg): T {\r\n            return this.visitDefault(expr, arg);\r\n        }\r\n\r\n        public visitDateAdd(expr: SQDateAddExpr, arg: TArg): T {\r\n            return this.visitDefault(expr, arg);\r\n        }\r\n\r\n        public visitNow(expr: SQNowExpr, arg: TArg): T {\r\n            return this.visitDefault(expr, arg);\r\n        }\r\n\r\n        public visitDefaultValue(expr: SQDefaultValueExpr, arg: TArg): T {\r\n            return this.visitDefault(expr, arg);\r\n        }\r\n\r\n        public visitAnyValue(expr: SQAnyValueExpr, arg: TArg): T {\r\n            return this.visitDefault(expr, arg);\r\n        }\r\n\r\n        public visitArithmetic(expr: SQArithmeticExpr, arg: TArg): T {\r\n            return this.visitDefault(expr, arg);\r\n        }\r\n\r\n        public visitFillRule(expr: SQFillRuleExpr, arg: TArg): T {\r\n            return this.visitDefault(expr, arg);\r\n        }\r\n\r\n        public visitDefault(expr: SQExpr, arg: TArg): T {\r\n            return;\r\n        }\r\n    }\r\n\r\n    /** Default ISQExprVisitor implementation that others may derive from. */\r\n    export class DefaultSQExprVisitor<T> extends DefaultSQExprVisitorWithArg<T, void> implements ISQExprVisitor<T> {\r\n    }\r\n\r\n    /** Default ISQExprVisitor implementation that implements default traversal and that others may derive from. */\r\n    export class DefaultSQExprVisitorWithTraversal implements ISQExprVisitor<void>, IFillRuleDefinitionVisitor<void, void> {\r\n        public visitEntity(expr: SQEntityExpr): void {\r\n            this.visitDefault(expr);\r\n        }\r\n\r\n        public visitColumnRef(expr: SQColumnRefExpr): void {\r\n            expr.source.accept(this);\r\n        }\r\n\r\n        public visitMeasureRef(expr: SQMeasureRefExpr): void {\r\n            expr.source.accept(this);\r\n        }\r\n\r\n        public visitAggr(expr: SQAggregationExpr): void {\r\n            expr.arg.accept(this);\r\n        } \r\n\r\n        public visitHierarchy(expr: SQHierarchyExpr): void {\r\n            expr.arg.accept(this);\r\n        }\r\n\r\n        public visitHierarchyLevel(expr: SQHierarchyLevelExpr): void {\r\n            expr.arg.accept(this);\r\n        }\r\n\r\n        public visitPropertyVariationSource(expr: SQPropertyVariationSourceExpr): void {\r\n            expr.arg.accept(this);\r\n        }\r\n\r\n        public visitBetween(expr: SQBetweenExpr): void {\r\n            expr.arg.accept(this);\r\n            expr.lower.accept(this);\r\n            expr.upper.accept(this);\r\n        }\r\n\r\n        public visitIn(expr: SQInExpr): void {\r\n            let args = expr.args;\r\n            for (let i = 0, len = args.length; i < len; i++)\r\n                args[i].accept(this);\r\n\r\n            let values = expr.values;\r\n            for (let i = 0, len = values.length; i < len; i++) {\r\n                let valueTuple = values[i];\r\n                for (let j = 0, jlen = valueTuple.length; j < jlen; j++)\r\n                    valueTuple[j].accept(this);\r\n            }\r\n        }\r\n\r\n        public visitAnd(expr: SQAndExpr): void {\r\n            expr.left.accept(this);\r\n            expr.right.accept(this);\r\n        }\r\n\r\n        public visitOr(expr: SQOrExpr): void {\r\n            expr.left.accept(this);\r\n            expr.right.accept(this);\r\n        }\r\n\r\n        public visitCompare(expr: SQCompareExpr): void {\r\n            expr.left.accept(this);\r\n            expr.right.accept(this);\r\n        }\r\n\r\n        public visitContains(expr: SQContainsExpr): void {\r\n            expr.left.accept(this);\r\n            expr.right.accept(this);\r\n        }\r\n\r\n        public visitExists(expr: SQExistsExpr): void {\r\n            expr.arg.accept(this);\r\n        }\r\n\r\n        public visitNot(expr: SQNotExpr): void {\r\n            expr.arg.accept(this);\r\n        }\r\n\r\n        public visitStartsWith(expr: SQStartsWithExpr): void {\r\n            expr.left.accept(this);\r\n            expr.right.accept(this);\r\n        }\r\n\r\n        public visitConstant(expr: SQConstantExpr): void {\r\n            this.visitDefault(expr);\r\n        }\r\n\r\n        public visitDateSpan(expr: SQDateSpanExpr): void {\r\n            expr.arg.accept(this);\r\n        }\r\n\r\n        public visitDateAdd(expr: SQDateAddExpr): void {\r\n            expr.arg.accept(this);\r\n        }\r\n\r\n        public visitNow(expr: SQNowExpr): void {\r\n            this.visitDefault(expr);\r\n        }\r\n\r\n        public visitDefaultValue(expr: SQDefaultValueExpr): void {\r\n            this.visitDefault(expr);\r\n        }\r\n\r\n        public visitAnyValue(expr: SQAnyValueExpr): void {\r\n            this.visitDefault(expr);\r\n        }\r\n\r\n        public visitArithmetic(expr: SQArithmeticExpr): void {\r\n            expr.left.accept(this);\r\n            expr.right.accept(this);\r\n        }\r\n\r\n        public visitFillRule(expr: SQFillRuleExpr): void {\r\n            expr.input.accept(this);\r\n\r\n            let rule = expr.rule,\r\n                gradient2 = rule.linearGradient2,\r\n                gradient3 = rule.linearGradient3;\r\n\r\n            if (gradient2) {\r\n                this.visitLinearGradient2(gradient2);\r\n            }\r\n\r\n            if (gradient3) {\r\n                this.visitLinearGradient3(gradient3);\r\n            }\r\n        }\r\n\r\n        public visitLinearGradient2(gradient2: LinearGradient2Definition): void {\r\n            debug.assertValue(gradient2, 'gradient2');\r\n\r\n            this.visitFillRuleStop(gradient2.min);\r\n            this.visitFillRuleStop(gradient2.max);\r\n        }\r\n\r\n        public visitLinearGradient3(gradient3: LinearGradient3Definition): void {\r\n            debug.assertValue(gradient3, 'gradient3');\r\n\r\n            this.visitFillRuleStop(gradient3.min);\r\n            this.visitFillRuleStop(gradient3.mid);\r\n            this.visitFillRuleStop(gradient3.max);\r\n        }\r\n\r\n        public visitDefault(expr: SQExpr): void {\r\n            return;\r\n        }\r\n\r\n        private visitFillRuleStop(stop: RuleColorStopDefinition): void {\r\n            debug.assertValue(stop, 'stop');\r\n\r\n            stop.color.accept(this);\r\n\r\n            let value = stop.value;\r\n            if (value)\r\n                value.accept(this);\r\n        }\r\n    }\r\n} ","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi {\r\n    /** Defines a custom enumeration data type, and its values. */\r\n    export interface IEnumType {\r\n        /** Gets the members of the enumeration, limited to the validMembers, if appropriate. */\r\n        members(validMembers?: EnumMemberValue[]): IEnumMember[];\r\n    }\r\n\r\n    export function createEnumType(members: IEnumMember[]): IEnumType {\r\n        return new EnumType(members);\r\n    }\r\n\r\n    class EnumType implements IEnumType {\r\n        private allMembers: IEnumMember[];\r\n\r\n        constructor(allMembers: IEnumMember[]) {\r\n            debug.assertValue(allMembers, 'allMembers');\r\n\r\n            this.allMembers = allMembers;\r\n        }\r\n\r\n        public members(validMembers?: EnumMemberValue[]): IEnumMember[] {\r\n            let allMembers = this.allMembers;\r\n            if (!validMembers)\r\n                return allMembers;\r\n\r\n            let membersToReturn: IEnumMember[] = [];\r\n            for (let member of allMembers) {\r\n                if (_.contains(validMembers, member.value))\r\n                    membersToReturn.push(member);\r\n            }\r\n            return membersToReturn;\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi {\r\n    import SQExpr = powerbi.data.SQExpr;\r\n\r\n    export interface FillDefinition {\r\n        solid?: {\r\n            color?: SQExpr;\r\n        };\r\n        gradient?: {\r\n            startColor?: SQExpr;\r\n            endColor?: SQExpr;\r\n        };\r\n        pattern?: {\r\n            patternKind?: SQExpr;\r\n            color?: SQExpr;\r\n        };\r\n    }\r\n\r\n    export module FillSolidColorTypeDescriptor {\r\n        /** Gets a value indicating whether the descriptor is nullable or not. */\r\n        export function nullable(descriptor: FillSolidColorTypeDescriptor): boolean {\r\n            debug.assertValue(descriptor, 'descriptor');\r\n\r\n            if (descriptor === true)\r\n                return false;\r\n\r\n            let advancedDescriptor = <FillSolidColorAdvancedTypeDescriptor>descriptor;\r\n            return !!advancedDescriptor.nullable;\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi {\r\n    import SQExpr = powerbi.data.SQExpr;\r\n\r\n    export interface FillRuleTypeDescriptor {\r\n    }\r\n\r\n    export interface FillRuleDefinition extends FillRuleGeneric<SQExpr, SQExpr> {\r\n    }\r\n\r\n    export interface FillRule extends FillRuleGeneric<string, number> {\r\n    }\r\n\r\n    export type LinearGradient2 = LinearGradient2Generic<string, number>;\r\n    export type LinearGradient3 = LinearGradient3Generic<string, number>;\r\n\r\n    export type LinearGradient2Definition = LinearGradient2Generic<SQExpr, SQExpr>;\r\n    export type LinearGradient3Definition = LinearGradient3Generic<SQExpr, SQExpr>;\r\n\r\n    export type RuleColorStopDefinition = RuleColorStopGeneric<SQExpr, SQExpr>;\r\n    export type RuleColorStop = RuleColorStopGeneric<string, number>;\r\n\r\n    export interface IFillRuleDefinitionVisitor<T2, T3> {\r\n        visitLinearGradient2(linearGradient2: LinearGradient2Definition, arg?: any): T2;\r\n        visitLinearGradient3(linearGradient3: LinearGradient3Definition, arg?: any): T3;\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi {\r\n    import SQExpr = powerbi.data.SQExpr;\r\n\r\n    export interface ImageTypeDescriptor {\r\n    }\r\n\r\n    export type ImageDefinition = ImageDefinitionGeneric<SQExpr>;\r\n\r\n    export module ImageDefinition {\r\n        export const urlType: ValueTypeDescriptor = { misc: { imageUrl: true } };\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi {\r\n    import SQExpr = powerbi.data.SQExpr;\r\n\r\n    export interface ParagraphsTypeDescriptor {\r\n    }\r\n\r\n    export type ParagraphsDefinition = ParagraphDefinition[];\r\n    export type ParagraphDefinition = ParagraphDefinitionGeneric<SQExpr>;\r\n    export type TextRunDefinition = TextRunDefinitionGeneric<SQExpr>;\r\n\r\n    export interface ParagraphDefinitionGeneric<TExpr> {\r\n        horizontalTextAlignment?: string;\r\n        textRuns: TextRunDefinitionGeneric<TExpr>[];\r\n    }\r\n\r\n    export interface TextRunDefinitionGeneric<TExpr> {\r\n        textStyle?: TextRunStyle;\r\n        url?: string;\r\n        value: string | TExpr;\r\n    }\r\n\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi {\r\n    import SemanticFilter = powerbi.data.SemanticFilter;\r\n\r\n    export type StructuralObjectDefinition =\r\n        FillDefinition |\r\n        FillRuleDefinition |\r\n        SemanticFilter |\r\n        DefaultValueDefinition |\r\n        ImageDefinition |\r\n        ParagraphsDefinition;\r\n\r\n    export module StructuralTypeDescriptor {\r\n        export function isValid(type: StructuralTypeDescriptor): boolean {\r\n            debug.assertValue(type, 'type');\r\n\r\n            if (type.fill ||\r\n                type.fillRule ||\r\n                type.filter ||\r\n                type.expression ||\r\n                type.image ||\r\n                type.paragraphs) {\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi {\r\n    import EnumExtensions = jsCommon.EnumExtensions;\r\n\r\n    export interface ValueTypeDescriptor {\r\n        extendedType?: ExtendedType;\r\n    }\r\n    \r\n    /** Describes a data value type, including a primitive type and extended type if any (derived from data category). */\r\n    export class ValueType implements ValueTypeDescriptor {\r\n        private static typeCache: { [id: string]: ValueType } = {};\r\n\r\n        private underlyingType: ExtendedType;\r\n        private category: string;\r\n\r\n        private temporalType: TemporalType;\r\n        private geographyType: GeographyType;\r\n        private miscType: MiscellaneousType;\r\n        private formattingType: FormattingType;\r\n        private enumType: IEnumType;\r\n        private scriptingType: ScriptType;\r\n\r\n        /** Do not call the ValueType constructor directly. Use the ValueType.fromXXX methods. */\r\n        constructor(type: ExtendedType, category?: string, enumType?: IEnumType) {\r\n            debug.assert((!!type && ExtendedType[type] != null) || type === ExtendedType.Null, 'type');\r\n            debug.assert(!!category || category === null, 'category');\r\n            debug.assert(type !== ExtendedType.Enumeration || !!enumType, 'enumType');\r\n\r\n            this.underlyingType = type;\r\n            this.category = category;\r\n\r\n            if (EnumExtensions.hasFlag(type, ExtendedType.Temporal)) {\r\n                this.temporalType = new TemporalType(type);\r\n            }\r\n            if (EnumExtensions.hasFlag(type, ExtendedType.Geography)) {\r\n                this.geographyType = new GeographyType(type);\r\n            }\r\n            if (EnumExtensions.hasFlag(type, ExtendedType.Miscellaneous)) {\r\n                this.miscType = new MiscellaneousType(type);\r\n            }\r\n            if (EnumExtensions.hasFlag(type, ExtendedType.Formatting)) {\r\n                this.formattingType = new FormattingType(type);\r\n            }\r\n            if (EnumExtensions.hasFlag(type, ExtendedType.Enumeration)) {\r\n                this.enumType = enumType;\r\n            }\r\n            if (EnumExtensions.hasFlag(type, ExtendedType.Scripting)) {\r\n                this.scriptingType = new ScriptType(type);\r\n            }\r\n        }\r\n\r\n        /** Creates or retrieves a ValueType object based on the specified ValueTypeDescriptor. */\r\n        public static fromDescriptor(descriptor: ValueTypeDescriptor): ValueType {\r\n            descriptor = descriptor || {};\r\n\r\n            // Simplified primitive types\r\n            if (descriptor.text) return ValueType.fromExtendedType(ExtendedType.Text);\r\n            if (descriptor.integer) return ValueType.fromExtendedType(ExtendedType.Integer);\r\n            if (descriptor.numeric) return ValueType.fromExtendedType(ExtendedType.Double);\r\n            if (descriptor.bool) return ValueType.fromExtendedType(ExtendedType.Boolean);\r\n            if (descriptor.dateTime) return ValueType.fromExtendedType(ExtendedType.DateTime);\r\n            if (descriptor.duration) return ValueType.fromExtendedType(ExtendedType.Duration);\r\n            if (descriptor.binary) return ValueType.fromExtendedType(ExtendedType.Binary);\r\n            if (descriptor.none) return ValueType.fromExtendedType(ExtendedType.None);\r\n\r\n            // Extended types\r\n            if (descriptor.scripting) {\r\n                if (descriptor.scripting.source) return ValueType.fromExtendedType(ExtendedType.ScriptSource);\r\n            }\r\n            if (descriptor.enumeration) return ValueType.fromEnum(descriptor.enumeration);\r\n            if (descriptor.temporal) {\r\n                if (descriptor.temporal.year) return ValueType.fromExtendedType(ExtendedType.Year_Integer);\r\n                if (descriptor.temporal.month) return ValueType.fromExtendedType(ExtendedType.Month_Integer);\r\n            }\r\n            if (descriptor.geography) {\r\n                if (descriptor.geography.address) return ValueType.fromExtendedType(ExtendedType.Address);\r\n                if (descriptor.geography.city) return ValueType.fromExtendedType(ExtendedType.City);\r\n                if (descriptor.geography.continent) return ValueType.fromExtendedType(ExtendedType.Continent);\r\n                if (descriptor.geography.country) return ValueType.fromExtendedType(ExtendedType.Country);\r\n                if (descriptor.geography.county) return ValueType.fromExtendedType(ExtendedType.County);\r\n                if (descriptor.geography.region) return ValueType.fromExtendedType(ExtendedType.Region);\r\n                if (descriptor.geography.postalCode) return ValueType.fromExtendedType(ExtendedType.PostalCode_Text);\r\n                if (descriptor.geography.stateOrProvince) return ValueType.fromExtendedType(ExtendedType.StateOrProvince);\r\n                if (descriptor.geography.place) return ValueType.fromExtendedType(ExtendedType.Place);\r\n                if (descriptor.geography.latitude) return ValueType.fromExtendedType(ExtendedType.Latitude_Double);\r\n                if (descriptor.geography.longitude) return ValueType.fromExtendedType(ExtendedType.Longitude_Double);\r\n            }\r\n            if (descriptor.misc) {\r\n                if (descriptor.misc.image) return ValueType.fromExtendedType(ExtendedType.Image);\r\n                if (descriptor.misc.imageUrl) return ValueType.fromExtendedType(ExtendedType.ImageUrl);\r\n                if (descriptor.misc.webUrl) return ValueType.fromExtendedType(ExtendedType.WebUrl);\r\n            }\r\n            if (descriptor.formatting) {\r\n                if (descriptor.formatting.color) return ValueType.fromExtendedType(ExtendedType.Color);\r\n                if (descriptor.formatting.formatString) return ValueType.fromExtendedType(ExtendedType.FormatString);\r\n                if (descriptor.formatting.alignment) return ValueType.fromExtendedType(ExtendedType.Alignment);\r\n                if (descriptor.formatting.labelDisplayUnits) return ValueType.fromExtendedType(ExtendedType.LabelDisplayUnits);\r\n                if (descriptor.formatting.fontSize) return ValueType.fromExtendedType(ExtendedType.FontSize);\r\n                if (descriptor.formatting.labelDensity) return ValueType.fromExtendedType(ExtendedType.LabelDensity);\r\n            }\r\n            if (descriptor.extendedType) {\r\n                return ValueType.fromExtendedType(descriptor.extendedType);\r\n            }\r\n\r\n            return ValueType.fromExtendedType(ExtendedType.Null);\r\n        }\r\n\r\n        /** Advanced: Generally use fromDescriptor instead. Creates or retrieves a ValueType object for the specified ExtendedType. */\r\n        public static fromExtendedType(extendedType: ExtendedType): ValueType {\r\n            extendedType = extendedType || ExtendedType.Null;\r\n\r\n            let primitiveType = getPrimitiveType(extendedType),\r\n                category = getCategoryFromExtendedType(extendedType);\r\n            debug.assert(\r\n                primitiveType !== PrimitiveType.Null || extendedType === ExtendedType.Null,\r\n                'Cannot create ValueType for abstract extended type. Consider using fromDescriptor instead.');\r\n            return ValueType.fromPrimitiveTypeAndCategory(primitiveType, category);\r\n        }\r\n\r\n        /** Creates or retrieves a ValueType object for the specified PrimitiveType and data category. */\r\n        public static fromPrimitiveTypeAndCategory(primitiveType: PrimitiveType, category?: string): ValueType {\r\n            primitiveType = primitiveType || PrimitiveType.Null;\r\n            category = category || null;\r\n\r\n            let id = primitiveType.toString();\r\n            if (category)\r\n                id += '|' + category;\r\n\r\n            return ValueType.typeCache[id] || (ValueType.typeCache[id] = new ValueType(toExtendedType(primitiveType, category), category));\r\n        }\r\n\r\n        /** Creates a ValueType to describe the given IEnumType. */\r\n        public static fromEnum(enumType: IEnumType): ValueType {\r\n            debug.assertValue(enumType, 'enumType');\r\n\r\n            return new ValueType(ExtendedType.Enumeration, null, enumType);\r\n        }\r\n\r\n        /** Determines if the instance ValueType is convertable from the 'other' ValueType. */\r\n        public isCompatibleFrom(other: ValueType): boolean {\r\n            debug.assertValue(other, 'other');\r\n\r\n            let otherPrimitiveType = other.primitiveType;\r\n            if (this === other ||\r\n                this.primitiveType === otherPrimitiveType ||\r\n                otherPrimitiveType === PrimitiveType.Null)\r\n                return true;\r\n            return false;\r\n        }\r\n\r\n        /** Gets the exact primitive type of this ValueType. */\r\n        public get primitiveType(): PrimitiveType {\r\n            return getPrimitiveType(this.underlyingType);\r\n        }\r\n\r\n        /** Gets the exact extended type of this ValueType. */\r\n        public get extendedType(): ExtendedType {\r\n            return this.underlyingType;\r\n        }\r\n\r\n        /** Gets the data category string (if any) for this ValueType. */\r\n        public get categoryString(): string {\r\n            return this.category;\r\n        }\r\n\r\n        // Simplified primitive types\r\n\r\n        /** Indicates whether the type represents text values. */\r\n        public get text(): boolean {\r\n            return this.primitiveType === PrimitiveType.Text;\r\n        }\r\n\r\n        /** Indicates whether the type represents any numeric value. */\r\n        public get numeric(): boolean {\r\n            return EnumExtensions.hasFlag(this.underlyingType, ExtendedType.Numeric);\r\n        }\r\n\r\n        /** Indicates whether the type represents integer numeric values. */\r\n        public get integer(): boolean {\r\n            return this.primitiveType === PrimitiveType.Integer;\r\n        }\r\n\r\n        /** Indicates whether the type represents Boolean values. */\r\n        public get bool(): boolean {\r\n            return this.primitiveType === PrimitiveType.Boolean;\r\n        }\r\n\r\n        /** Indicates whether the type represents any date/time values. */\r\n        public get dateTime(): boolean {\r\n            return this.primitiveType === PrimitiveType.DateTime ||\r\n                this.primitiveType === PrimitiveType.Date ||\r\n                this.primitiveType === PrimitiveType.Time;\r\n        }\r\n\r\n        /** Indicates whether the type represents duration values. */\r\n        public get duration(): boolean {\r\n            return this.primitiveType === PrimitiveType.Duration;\r\n        }\r\n\r\n        /** Indicates whether the type represents binary values. */\r\n        public get binary(): boolean {\r\n            return this.primitiveType === PrimitiveType.Binary;\r\n        }\r\n\r\n        /** Indicates whether the type represents none values. */\r\n        public get none(): boolean {\r\n            return this.primitiveType === PrimitiveType.None;\r\n        }\r\n\r\n        // Extended types\r\n\r\n        /** Returns an object describing temporal values represented by the type, if it represents a temporal type. */\r\n        public get temporal(): TemporalType {\r\n            return this.temporalType;\r\n        }\r\n\r\n        /** Returns an object describing geographic values represented by the type, if it represents a geographic type. */\r\n        public get geography(): GeographyType {\r\n            return this.geographyType;\r\n        }\r\n\r\n        /** Returns an object describing the specific values represented by the type, if it represents a miscellaneous extended type. */\r\n        public get misc(): MiscellaneousType {\r\n            return this.miscType;\r\n        }\r\n\r\n        /** Returns an object describing the formatting values represented by the type, if it represents a formatting type. */\r\n        public get formatting(): FormattingType {\r\n            return this.formattingType;\r\n        }\r\n\r\n        /** Returns an object describing the enum values represented by the type, if it represents an enumeration type. */\r\n        public get enum(): IEnumType {\r\n            return this.enumType;\r\n        }\r\n\r\n        public get scripting(): ScriptType {\r\n            return this.scriptingType;\r\n        }\r\n    }\r\n\r\n    export class ScriptType implements ScriptTypeDescriptor {\r\n        private underlyingType: ExtendedType;\r\n\r\n        constructor(type: ExtendedType) {\r\n            debug.assert(!!type && EnumExtensions.hasFlag(type, ExtendedType.Scripting), 'type');\r\n            this.underlyingType = type;\r\n        }\r\n\r\n        public get source(): boolean {\r\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.ScriptSource);\r\n        }\r\n    }\r\n\r\n    export class TemporalType implements TemporalTypeDescriptor {\r\n        private underlyingType: ExtendedType;\r\n\r\n        constructor(type: ExtendedType) {\r\n            debug.assert(!!type && EnumExtensions.hasFlag(type, ExtendedType.Temporal), 'type');\r\n            this.underlyingType = type;\r\n        }\r\n\r\n        public get year(): boolean {\r\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Year);\r\n        }\r\n        public get month(): boolean {\r\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Month);\r\n        }\r\n    }\r\n\r\n    export class GeographyType implements GeographyTypeDescriptor {\r\n        private underlyingType: ExtendedType;\r\n\r\n        constructor(type: ExtendedType) {\r\n            debug.assert(!!type && EnumExtensions.hasFlag(type, ExtendedType.Geography), 'type');\r\n            this.underlyingType = type;\r\n        }\r\n\r\n        public get address(): boolean {\r\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Address);\r\n        }\r\n        public get city(): boolean {\r\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.City);\r\n        }\r\n        public get continent(): boolean {\r\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Continent);\r\n        }\r\n        public get country(): boolean {\r\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Country);\r\n        }\r\n        public get county(): boolean {\r\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.County);\r\n        }\r\n        public get region(): boolean {\r\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Region);\r\n        }\r\n        public get postalCode(): boolean {\r\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.PostalCode);\r\n        }\r\n        public get stateOrProvince(): boolean {\r\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.StateOrProvince);\r\n        }\r\n        public get place(): boolean {\r\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Place);\r\n        }\r\n        public get latitude(): boolean {\r\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Latitude);\r\n        }\r\n        public get longitude(): boolean {\r\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Longitude);\r\n        }\r\n    }\r\n\r\n    export class MiscellaneousType implements MiscellaneousTypeDescriptor {\r\n        private underlyingType: ExtendedType;\r\n\r\n        constructor(type: ExtendedType) {\r\n            debug.assert(!!type && EnumExtensions.hasFlag(type, ExtendedType.Miscellaneous), 'type');\r\n            this.underlyingType = type;\r\n        }\r\n\r\n        public get image(): boolean {\r\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Image);\r\n        }\r\n        public get imageUrl(): boolean {\r\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.ImageUrl);\r\n        }\r\n        public get webUrl(): boolean {\r\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.WebUrl);\r\n        }\r\n    }\r\n\r\n    export class FormattingType implements FormattingTypeDescriptor {\r\n        private underlyingType: ExtendedType;\r\n\r\n        constructor(type: ExtendedType) {\r\n            debug.assert(!!type && EnumExtensions.hasFlag(type, ExtendedType.Formatting), 'type');\r\n            this.underlyingType = type;\r\n        }\r\n\r\n        public get color(): boolean {\r\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Color);\r\n        }\r\n\r\n        public get formatString(): boolean {\r\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.FormatString);\r\n        }\r\n\r\n        public get alignment(): boolean {\r\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Alignment);\r\n        }\r\n\r\n        public get labelDisplayUnits(): boolean {\r\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.LabelDisplayUnits);\r\n        }\r\n\r\n        public get fontSize(): boolean {\r\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.FontSize);\r\n        }\r\n\r\n        public get labelDensity(): boolean {\r\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.LabelDensity);\r\n        }\r\n    }\r\n\r\n    /** Defines primitive value types. Must be consistent with types defined by server conceptual schema. */\r\n    export enum PrimitiveType {\r\n        Null = 0,\r\n        Text = 1,\r\n        Decimal = 2,\r\n        Double = 3,\r\n        Integer = 4,\r\n        Boolean = 5,\r\n        Date = 6,\r\n        DateTime = 7,\r\n        DateTimeZone = 8,\r\n        Time = 9,\r\n        Duration = 10,\r\n        Binary = 11,\r\n        None = 12,\r\n    }\r\n\r\n    /** Defines extended value types, which include primitive types and known data categories constrained to expected primitive types. */\r\n    export enum ExtendedType {\r\n        // Flags (1 << 8-15 range [0xFF00])\r\n        // Important: Enum members must be declared before they are used in TypeScript.\r\n        Numeric = 1 << 8,\r\n        Temporal = 1 << 9,\r\n        Geography = 1 << 10,\r\n        Miscellaneous = 1 << 11,\r\n        Formatting = 1 << 12,\r\n        Scripting = 1 << 13,        \r\n\r\n        // Primitive types (0-255 range [0xFF] | flags)\r\n        // The member names and base values must match those in PrimitiveType.\r\n        Null = 0,\r\n        Text = 1,\r\n        Decimal = Numeric | 2,\r\n        Double = Numeric | 3,\r\n        Integer = Numeric | 4,\r\n        Boolean = 5,\r\n        Date = Temporal | 6,\r\n        DateTime = Temporal | 7,\r\n        DateTimeZone = Temporal | 8,\r\n        Time = Temporal | 9,\r\n        Duration = 10,\r\n        Binary = 11,\r\n        None = 12,\r\n\r\n        // Extended types (0-32767 << 16 range [0xFFFF0000] | corresponding primitive type | flags)\r\n        // Temporal\r\n        Year = Temporal | (1 << 16),\r\n        Year_Text = Year | Text,\r\n        Year_Integer = Year | Integer,\r\n        Year_Date = Year | Date,\r\n        Year_DateTime = Year | DateTime,\r\n        Month = Temporal | (2 << 16),\r\n        Month_Text = Month | Text,\r\n        Month_Integer = Month | Integer,\r\n        Month_Date = Month | Date,\r\n        Month_DateTime = Month | DateTime,\r\n        // Geography\r\n        Address = Text | Geography | (100 << 16),\r\n        City = Text | Geography | (101 << 16),\r\n        Continent = Text | Geography | (102 << 16),\r\n        Country = Text | Geography | (103 << 16),\r\n        County = Text | Geography | (104 << 16),\r\n        Region = Text | Geography | (105 << 16),\r\n        PostalCode = Geography | (106 << 16),\r\n        PostalCode_Text = PostalCode | Text,\r\n        PostalCode_Integer = PostalCode | Integer,\r\n        StateOrProvince = Text | Geography | (107 << 16),\r\n        Place = Text | Geography | (108 << 16),\r\n        Latitude = Geography | (109 << 16),\r\n        Latitude_Decimal = Latitude | Decimal,\r\n        Latitude_Double = Latitude | Double,\r\n        Longitude = Geography | (110 << 16),\r\n        Longitude_Decimal = Longitude | Decimal,\r\n        Longitude_Double = Longitude | Double,\r\n        // Miscellaneous\r\n        Image = Binary | Miscellaneous | (200 << 16),\r\n        ImageUrl = Text | Miscellaneous | (201 << 16),\r\n        WebUrl = Text | Miscellaneous | (202 << 16),\r\n        // Formatting\r\n        Color = Text | Formatting | (300 << 16),\r\n        FormatString = Text | Formatting | (301 << 16),\r\n        Alignment = Text | Formatting | (306 << 16),\r\n        LabelDisplayUnits = Text | Formatting | (307 << 16),\r\n        FontSize = Double | Formatting | (308 << 16),\r\n        LabelDensity = Double | Formatting | (309 << 16),\r\n        // Enumeration\r\n        Enumeration = Text | 400 << 16,\r\n        // Scripting\r\n        ScriptSource = Text | Scripting | (500 << 16),        \r\n        // NOTE: To avoid confusion, underscores should be used only to delimit primitive type variants of an extended type\r\n        // (e.g. Year_Integer or Latitude_Double above)\r\n    }\r\n\r\n    const PrimitiveTypeMask = 0xFF;\r\n    const PrimitiveTypeWithFlagsMask = 0xFFFF;\r\n    const PrimitiveTypeFlagsExcludedMask = 0xFFFF0000;\r\n\r\n    function getPrimitiveType(extendedType: ExtendedType): PrimitiveType {\r\n        return extendedType & PrimitiveTypeMask;\r\n    }\r\n\r\n    function isPrimitiveType(extendedType: ExtendedType): boolean {\r\n        return (extendedType & PrimitiveTypeWithFlagsMask) === extendedType;\r\n    }\r\n\r\n    function getCategoryFromExtendedType(extendedType: ExtendedType): string {\r\n        if (isPrimitiveType(extendedType))\r\n            return null;\r\n\r\n        let category = ExtendedType[extendedType];\r\n        if (category) {\r\n            // Check for ExtendedType declaration without a primitive type.\r\n            // If exists, use it as category (e.g. Longitude rather than Longitude_Double)\r\n            // Otherwise use the ExtendedType declaration with a primitive type (e.g. Address)\r\n            let delimIdx = category.lastIndexOf('_');\r\n            if (delimIdx > 0) {\r\n                let baseCategory = category.slice(0, delimIdx);\r\n                if (ExtendedType[baseCategory]) {\r\n                    debug.assert(\r\n                        (ExtendedType[baseCategory] & PrimitiveTypeFlagsExcludedMask) === (extendedType & PrimitiveTypeFlagsExcludedMask),\r\n                        'Unexpected value for ExtendedType base member of ' + extendedType);\r\n                    category = baseCategory;\r\n                }\r\n            }\r\n        }\r\n        return category || null;\r\n    }\r\n\r\n    function toExtendedType(primitiveType: PrimitiveType, category?: string): ExtendedType {\r\n        let primitiveString = PrimitiveType[primitiveType];\r\n        let t = ExtendedType[primitiveString];\r\n        if (t == null) {\r\n            debug.assertFail('Unexpected primitiveType ' + primitiveType);\r\n            t = ExtendedType.Null;\r\n        }\r\n\r\n        if (primitiveType && category) {\r\n            let categoryType: ExtendedType = ExtendedType[category];\r\n            if (categoryType) {\r\n                let categoryPrimitiveType = getPrimitiveType(categoryType);\r\n                if (categoryPrimitiveType === PrimitiveType.Null) {\r\n                    // Category supports multiple primitive types, check if requested primitive type is supported\r\n                    // (note: important to use t here rather than primitiveType as it may include primitive type flags)\r\n                    categoryType = t | categoryType;\r\n                    if (ExtendedType[categoryType]) {\r\n                        debug.assert(\r\n                            ExtendedType[categoryType] === (category + '_' + primitiveString),\r\n                            'Unexpected name for ExtendedType member ' + categoryType);\r\n                        t = categoryType;\r\n                    }\r\n                }\r\n                else if (categoryPrimitiveType === primitiveType) {\r\n                    // Primitive type matches the single supported type for the category\r\n                    t = categoryType;\r\n                }\r\n            }\r\n        }\r\n\r\n        return t;\r\n    }\r\n\r\n    function matchesExtendedTypeWithAnyPrimitive(a: ExtendedType, b: ExtendedType): boolean {\r\n        return (a & PrimitiveTypeFlagsExcludedMask) === (b & PrimitiveTypeFlagsExcludedMask);\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    /**\r\n     * Represents the versions of the data shape binding structure.\r\n     * NOTE Keep this file in sync with the Sql\\InfoNav\\src\\Data\\Contracts\\DsqGeneration\\DataShapeBindingVersions.cs\r\n     * file in the TFS Dev branch.\r\n     */\r\n    export const enum DataShapeBindingVersions {\r\n        /** The initial version of data shape binding */\r\n        Version0 = 0,\r\n        /** Explicit subtotal support for axis groupings. */\r\n        Version1 = 1,\r\n    }\r\n\r\n    export interface DataShapeBindingLimitTarget {\r\n        Primary?: number;\r\n    }\r\n\r\n    export enum DataShapeBindingLimitType {\r\n        Top = 0,\r\n        First = 1,\r\n        Last = 2,\r\n        Sample = 3,\r\n        Bottom = 4,\r\n    }\r\n\r\n    export interface DataShapeBindingLimit {\r\n        Count?: number;\r\n        Target: DataShapeBindingLimitTarget;\r\n        Type: DataShapeBindingLimitType;\r\n    }\r\n\r\n    export interface DataShapeBinding {\r\n        Version?: number;\r\n        Primary: DataShapeBindingAxis;\r\n        Secondary?: DataShapeBindingAxis;\r\n        Projections?: number[];\r\n        Limits?: DataShapeBindingLimit[];\r\n        Highlights?: FilterDefinition[];\r\n        DataReduction?: DataShapeBindingDataReduction;\r\n        IncludeEmptyGroups?: boolean;\r\n    }\r\n\r\n    export interface DataShapeBindingDataReduction {\r\n        Primary?: DataShapeBindingDataReductionAlgorithm;\r\n        Secondary?: DataShapeBindingDataReductionAlgorithm;\r\n        DataVolume?: number;\r\n    }\r\n\r\n    export interface DataShapeBindingDataReductionAlgorithm {\r\n        Top?: DataShapeBindingDataReductionTopLimit;\r\n        Sample?: DataShapeBindingDataReductionSampleLimit;\r\n        Bottom?: DataShapeBindingDataReductionBottomLimit;\r\n        Window?: DataShapeBindingDataReductionDataWindow;\r\n    }\r\n\r\n    export interface DataShapeBindingDataReductionTopLimit {\r\n        Count?: number;\r\n    }\r\n\r\n    export interface DataShapeBindingDataReductionSampleLimit {\r\n        Count?: number;\r\n    }\r\n\r\n    export interface DataShapeBindingDataReductionBottomLimit {\r\n        Count?: number;\r\n    }\r\n\r\n    export interface DataShapeBindingDataReductionDataWindow {\r\n        Count?: number;\r\n        RestartTokens?: RestartToken;\r\n    }\r\n\r\n    export interface DataShapeBindingAxis {\r\n        Groupings: DataShapeBindingAxisGrouping[];\r\n    }\r\n\r\n    export enum SubtotalType {\r\n        None = 0,\r\n        Before = 1,\r\n        After = 2\r\n    }\r\n\r\n    export interface DataShapeBindingAxisGrouping {\r\n        Projections: number[];\r\n        GroupBy?: number[];\r\n        SuppressedProjections?: number[];\r\n        Subtotal?: SubtotalType;\r\n        ShowItemsWithNoData?: number[];\r\n    }    \r\n} \r\n","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved.\r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *\r\n *  The above copyright notice and this permission notice shall be included in\r\n *  all copies or substantial portions of the Software.\r\n *\r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    export module DataShapeBindingDataReduction {\r\n\r\n        export function createFrom(reduction: ReductionAlgorithm): DataShapeBindingDataReductionAlgorithm {\r\n            if (!reduction)\r\n                return;\r\n\r\n            var result: DataShapeBindingDataReductionAlgorithm;\r\n            if (reduction.top) {\r\n                result = {\r\n                    Top: {}\r\n                };\r\n\r\n                if (reduction.top.count)\r\n                    result.Top.Count = reduction.top.count;\r\n            }\r\n\r\n            if (reduction.bottom) {\r\n                result = {\r\n                    Bottom: {}\r\n                };\r\n\r\n                if (reduction.bottom.count)\r\n                    result.Bottom.Count = reduction.bottom.count;\r\n            }\r\n\r\n            if (reduction.sample) {\r\n                result = {\r\n                    Sample: {}\r\n                };\r\n\r\n                if (reduction.sample.count)\r\n                    result.Sample.Count = reduction.sample.count;\r\n            }\r\n\r\n            if (reduction.window) {\r\n                result = {\r\n                    Window: {}\r\n                };\r\n\r\n                if (reduction.window.count)\r\n                    result.Window.Count = reduction.window.count;\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    export interface FederatedConceptualSchemaInitOptions {\r\n        schemas: { [name: string]: ConceptualSchema };\r\n        links?: ConceptualSchemaLink[];\r\n    }\r\n\r\n    /** Represents a federated conceptual schema. */\r\n    export class FederatedConceptualSchema {\r\n        private schemas: { [name: string]: ConceptualSchema };\r\n        private links: ConceptualSchemaLink[];\r\n\r\n        constructor(options: FederatedConceptualSchemaInitOptions) {\r\n            debug.assertValue(options, 'options');\r\n\r\n            this.schemas = options.schemas; \r\n            if (options.links)\r\n                this.links = options.links;\r\n        }\r\n\r\n        public schema(name: string): ConceptualSchema {\r\n            return this.schemas[name];\r\n        }\r\n    }\r\n\r\n    /** Describes a semantic relationship between ConceptualSchemas. */\r\n    export interface ConceptualSchemaLink {\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n\r\n    export module Selector {\r\n        export function filterFromSelector(selectors: Selector[], isNot?: boolean): SemanticFilter {\r\n            if (_.isEmpty(selectors))\r\n                return;\r\n\r\n            let exprs: SQExpr[] = [];\r\n            for (let i = 0, ilen = selectors.length; i < ilen; i++) {\r\n                let identity = selectors[i];\r\n                let data = identity.data;\r\n                let exprToAdd: SQExpr = undefined;\r\n                if (data && data.length) {\r\n                    for (let j = 0, jlen = data.length; j < jlen; j++) {\r\n                        exprToAdd = SQExprBuilder.and(exprToAdd, <SQExpr>(<DataViewScopeIdentity>identity.data[j]).expr);\r\n                    }\r\n                }\r\n\r\n                if (exprToAdd)\r\n                    exprs.push(exprToAdd);\r\n            }\r\n\r\n            if (!_.isEmpty(exprs))\r\n                return DataViewScopeIdentity.filterFromExprs(exprs, isNot);\r\n        }\r\n\r\n        export function matchesData(selector: Selector, identities: DataViewScopeIdentity[]): boolean {\r\n            debug.assertValue(selector, 'selector');\r\n            debug.assertValue(selector.data, 'selector.data');\r\n            debug.assertValue(identities, 'identities');\r\n\r\n            let selectorData = selector.data;\r\n            if (selectorData.length !== identities.length)\r\n                return false;\r\n\r\n            for (let i = 0, len = selectorData.length; i < len; i++) {\r\n                let dataItem = selector.data[i];\r\n                let selectorDataItem = <DataViewScopeIdentity>dataItem;\r\n                if (selectorDataItem.expr) {\r\n                    if (!DataViewScopeIdentity.equals(selectorDataItem, identities[i]))\r\n                        return false;\r\n                }\r\n                else {\r\n                    if (!DataViewScopeWildcard.matches(<DataViewScopeWildcard>dataItem, identities[i]))\r\n                        return false;\r\n                }\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        export function matchesKeys(selector: Selector, keysList: SQExpr[][]): boolean {\r\n            debug.assertValue(selector, 'selector');\r\n            debug.assertValue(selector.data, 'selector.data');\r\n            debug.assertValue(keysList, 'keysList');\r\n\r\n            let selectorData = selector.data,\r\n                selectorDataLength = selectorData.length;\r\n            if (selectorDataLength !== keysList.length)\r\n                return false;\r\n\r\n            for (let i = 0; i < selectorDataLength; i++) {\r\n                let selectorDataItem = selector.data[i],\r\n                    selectorDataExprs: SQExpr[];\r\n\r\n                if ((<DataViewScopeIdentity>selectorDataItem).expr) {\r\n                    selectorDataExprs = ScopeIdentityExtractor.getKeys(<SQExpr>(<DataViewScopeIdentity>selectorDataItem).expr);\r\n                }\r\n                else {\r\n                    selectorDataExprs = <SQExpr[]>(<DataViewScopeWildcard>selectorDataItem).exprs;\r\n                }\r\n\r\n                if (!selectorDataExprs)\r\n                    continue;\r\n                if (!SQExprUtils.sequenceEqual(keysList[i], selectorDataExprs))\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        /** Determines whether two selectors are equal. */\r\n        export function equals(x: Selector, y: Selector): boolean {\r\n            // Normalize falsy to null\r\n            x = x || null;\r\n            y = y || null;\r\n\r\n            if (x === y)\r\n                return true;\r\n\r\n            if (!x !== !y)\r\n                return false;\r\n\r\n            debug.assertValue(x, 'x');\r\n            debug.assertValue(y, 'y');\r\n\r\n            if (x.id !== y.id)\r\n                return false;\r\n            if (x.metadata !== y.metadata)\r\n                return false;\r\n            if (!equalsDataArray(x.data, y.data))\r\n                return false;\r\n\r\n            return true;\r\n        }\r\n\r\n        function equalsDataArray(x: DataRepetitionSelector[], y: DataRepetitionSelector[]): boolean {\r\n            // Normalize falsy to null\r\n            x = x || null;\r\n            y = y || null;\r\n\r\n            if (x === y)\r\n                return true;\r\n\r\n            if (!x !== !y)\r\n                return false;\r\n\r\n            if (x.length !== y.length)\r\n                return false;\r\n\r\n            for (let i = 0, len = x.length; i < len; i++) {\r\n                if (!equalsData(x[i], y[i]))\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        function equalsData(x: DataRepetitionSelector, y: DataRepetitionSelector): boolean {\r\n            if (!(<DataViewScopeIdentity>x).expr && (<DataViewScopeIdentity>y).expr) {\r\n                // TODO: We need to also check wildcard selectors too (once that's supported/figured out).\r\n                return false;\r\n            }\r\n\r\n            return DataViewScopeIdentity.equals(<DataViewScopeIdentity>x, <DataViewScopeIdentity>y);\r\n        }\r\n\r\n        export function getKey(selector: Selector): string {\r\n            let toStringify: any = {};\r\n            if (selector.data) {\r\n                let data = [];\r\n                for (let i = 0, ilen = selector.data.length; i < ilen; i++) {\r\n                    data.push(selector.data[i].key);\r\n                }\r\n                toStringify.data = data;\r\n            }\r\n            if (selector.metadata)\r\n                toStringify.metadata = selector.metadata;\r\n            if (selector.id)\r\n                toStringify.id = selector.id;\r\n            return JSON.stringify(toStringify);\r\n        }\r\n\r\n        export function containsWildcard(selector: Selector): boolean {\r\n            debug.assertValue(selector, 'selector');\r\n\r\n            let dataItems = selector.data;\r\n            if (!dataItems)\r\n                return false;\r\n\r\n            for (let i = 0, len = dataItems.length; i < len; i++) {\r\n                let wildcard = <DataViewScopeWildcard>dataItems[i];\r\n                if (wildcard.exprs)\r\n                    return true;\r\n            }\r\n\r\n            return false;\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n\r\n    export interface QueryDefinition {\r\n        Version?: number;\r\n        From: EntitySource[];\r\n        Where?: QueryFilter[];\r\n        OrderBy?: QuerySortClause[];\r\n        Select: QueryExpressionContainer[];\r\n        GroupBy?: QueryExpressionContainer[];\r\n    }\r\n\r\n    export interface FilterDefinition {\r\n        Version?: number;\r\n        From: EntitySource[];\r\n        Where: QueryFilter[];\r\n    }    \r\n\r\n    export enum EntitySourceType {\r\n        Table = 0,\r\n        Pod = 1,\r\n    }\r\n\r\n    export interface EntitySource {\r\n        Name: string;\r\n        EntitySet?: string; // TODO: Remove this when Q&A Silverlight is removed and make Entity required\r\n        Entity?: string;\r\n        Schema?: string;\r\n        Type?: EntitySourceType;\r\n    }\r\n\r\n    export interface QueryFilter {\r\n        Target?: QueryExpressionContainer[];\r\n        Condition: QueryExpressionContainer;\r\n    }\r\n\r\n    export interface QuerySortClause {\r\n        Expression: QueryExpressionContainer;\r\n        Direction: SortDirection;\r\n    }\r\n\r\n    export interface QueryExpressionContainer {\r\n        Name?: string;\r\n\r\n        SourceRef?: QuerySourceRefExpression;\r\n        Column?: QueryColumnExpression;\r\n        Measure?: QueryMeasureExpression;\r\n        Aggregation?: QueryAggregationExpression;\r\n        Hierarchy?: QueryHierarchyExpression;\r\n        HierarchyLevel?: QueryHierarchyLevelExpression;\r\n        PropertyVariationSource?: QueryPropertyVariationSourceExpression;\r\n\r\n        // Logical\r\n        And?: QueryBinaryExpression;\r\n        Between?: QueryBetweenExpression;\r\n        In?: QueryInExpression;\r\n        Or?: QueryBinaryExpression;\r\n        Comparison?: QueryComparisonExpression;\r\n        Not?: QueryNotExpression;\r\n        Contains?: QueryContainsExpression;\r\n        StartsWith?: QueryStartsWithExpression;\r\n        Exists?: QueryExistsExpression;\r\n\r\n        // Constants\r\n        Boolean?: QueryBooleanExpression;\r\n        DateTime?: QueryDateTimeExpression;\r\n        DateTimeSecond?: QueryDateTimeSecondExpression;\r\n        Date?: QueryDateTimeExpression;\r\n        Decimal?: QueryDecimalExpression;\r\n        Integer?: QueryIntegerExpression;\r\n        Null?: QueryNullExpression;\r\n        Number?: QueryNumberExpression;\r\n        String?: QueryStringExpression;\r\n        Literal?: QueryLiteralExpression;\r\n\r\n        DateSpan?: QueryDateSpanExpression;\r\n        DateAdd?: QueryDateAddExpression;\r\n        Now?: QueryNowExpression;\r\n\r\n        // Default Values\r\n        DefaultValue?: QueryDefaultValueExpression;\r\n        AnyValue?: QueryAnyValueExpression;\r\n\r\n        Arithmetic?: QueryArithmeticExpression;\r\n\r\n        // Client-only expressions\r\n        FillRule?: QueryFillRuleExpression;\r\n    }\r\n\r\n    export interface QueryPropertyExpression {\r\n        Expression: QueryExpressionContainer;\r\n        Property: string;\r\n    }\r\n\r\n    export interface QueryColumnExpression extends QueryPropertyExpression {\r\n    }\r\n\r\n    export interface QueryMeasureExpression extends QueryPropertyExpression {\r\n    }\r\n\r\n    export interface QuerySourceRefExpression {\r\n        Source: string;\r\n    }\r\n\r\n    export interface QueryAggregationExpression {\r\n        Function: QueryAggregateFunction;\r\n        Expression: QueryExpressionContainer;\r\n    }\r\n\r\n    export interface QueryHierarchyExpression {\r\n        Expression: QueryExpressionContainer;\r\n        Hierarchy: string;\r\n    }\r\n\r\n    export interface QueryHierarchyLevelExpression {\r\n        Expression: QueryExpressionContainer;\r\n        Level: string;\r\n    }\r\n\r\n    export interface QueryPropertyVariationSourceExpression {\r\n        Expression: QueryExpressionContainer;\r\n        Name: string;\r\n        Property: string;\r\n    }\r\n\r\n    export interface QueryBinaryExpression {\r\n        Left: QueryExpressionContainer;\r\n        Right: QueryExpressionContainer;\r\n    }\r\n\r\n    export interface QueryBetweenExpression {\r\n        Expression: QueryExpressionContainer;\r\n        LowerBound: QueryExpressionContainer;\r\n        UpperBound: QueryExpressionContainer;\r\n    }\r\n\r\n    export interface QueryInExpression {\r\n        Expressions: QueryExpressionContainer[];\r\n        Values: QueryExpressionContainer[][];\r\n    }\r\n\r\n    export interface QueryComparisonExpression extends QueryBinaryExpression {\r\n        ComparisonKind: QueryComparisonKind;\r\n    }\r\n\r\n    export interface QueryContainsExpression extends QueryBinaryExpression { }\r\n\r\n    export interface QueryNotExpression {\r\n        Expression: QueryExpressionContainer;\r\n    }\r\n\r\n    export interface QueryStartsWithExpression extends QueryBinaryExpression { }\r\n\r\n    export interface QueryExistsExpression {\r\n        Expression: QueryExpressionContainer;\r\n    }\r\n\r\n    export interface QueryConstantExpression<T> {\r\n        Value: T;\r\n    }\r\n\r\n    export interface QueryLiteralExpression {\r\n        Value: string;\r\n    }\r\n\r\n    export interface QueryBooleanExpression extends QueryConstantExpression<boolean> { }\r\n    export interface QueryDateTimeExpression extends QueryConstantExpression<string> { }\r\n    export interface QueryDateTimeSecondExpression extends QueryConstantExpression<string> { }\r\n    export interface QueryDecimalExpression extends QueryConstantExpression<number> { }\r\n    export interface QueryIntegerExpression extends QueryConstantExpression<number> { }\r\n    export interface QueryNumberExpression extends QueryConstantExpression<string> { }\r\n    export interface QueryNullExpression { }\r\n    export interface QueryStringExpression extends QueryConstantExpression<string> { }\r\n\r\n    export interface QueryDateSpanExpression {\r\n        TimeUnit: TimeUnit;\r\n        Expression: QueryExpressionContainer;\r\n    }\r\n\r\n    export interface QueryDateAddExpression {\r\n        Amount: number;\r\n        TimeUnit: TimeUnit;\r\n        Expression: QueryExpressionContainer;\r\n    }\r\n\r\n    export interface QueryNowExpression { }\r\n\r\n    export interface QueryDefaultValueExpression { }\r\n\r\n    export interface QueryAnyValueExpression { }\r\n\r\n    export interface QueryArithmeticExpression {\r\n        Left: QueryExpressionContainer;\r\n        Right: QueryExpressionContainer;\r\n        Operator: ArithmeticOperatorKind;\r\n    }\r\n\r\n    export const enum ArithmeticOperatorKind {\r\n        Add = 0,\r\n        Subtract = 1,\r\n        Multiply = 2,\r\n        Divide = 3,\r\n    }\r\n\r\n    export function getArithmeticOperatorName(arithmeticOperatorKind: ArithmeticOperatorKind): string {\r\n        switch (arithmeticOperatorKind) {\r\n            case ArithmeticOperatorKind.Add:\r\n                return \"Add\";\r\n            case ArithmeticOperatorKind.Subtract:\r\n                return \"Subtract\";\r\n            case ArithmeticOperatorKind.Multiply:\r\n                return \"Multiply\";\r\n            case ArithmeticOperatorKind.Divide:\r\n                return \"Divide\";\r\n        }\r\n        throw new Error('Unexpected ArithmeticOperatorKind: ' + arithmeticOperatorKind);\r\n    }\r\n\r\n    export interface QueryFillRuleExpression {\r\n        Input: QueryExpressionContainer;\r\n        FillRule: FillRuleGeneric<QueryExpressionContainer, QueryExpressionContainer>;\r\n    }\r\n\r\n    export enum TimeUnit {\r\n        Day = 0,\r\n        Week = 1,\r\n        Month = 2,\r\n        Year = 3,\r\n        Decade = 4,\r\n        Second = 5,\r\n        Minute = 6,\r\n        Hour = 7,\r\n    }\r\n\r\n    export enum QueryAggregateFunction {\r\n        Sum = 0,\r\n        Avg = 1,\r\n        Count = 2,\r\n        Min = 3,\r\n        Max = 4,\r\n        CountNonNull = 5,\r\n        Median = 6,\r\n        StandardDeviation = 7,\r\n        Variance = 8,\r\n    }\r\n\r\n    export enum QueryComparisonKind {\r\n        Equal = 0,\r\n        GreaterThan = 1,\r\n        GreaterThanOrEqual = 2,\r\n        LessThan = 3,\r\n        LessThanOrEqual = 4,\r\n    }\r\n\r\n    /** Defines semantic data types. */\r\n    export enum SemanticType {\r\n        None = 0x0,\r\n        Number = 0x1,\r\n        Integer = Number + 0x2,\r\n        DateTime = 0x4,\r\n        Time = 0x08,\r\n        Date = DateTime + 0x10,\r\n        Month = Integer + 0x20,\r\n        Year = Integer + 0x40,\r\n        YearAndMonth = 0x80,\r\n        MonthAndDay = 0x100,\r\n        Decade = Integer + 0x200,\r\n        YearAndWeek = 0x400,\r\n        String = 0x800,\r\n        Boolean = 0x1000,\r\n        Table = 0x2000,\r\n        Range = 0x4000,\r\n    }\r\n\r\n    export interface QueryMetadata {\r\n        Select?: SelectMetadata[];\r\n        Filters?: FilterMetadata[];\r\n    }\r\n\r\n    // TODO: Stop using SemanticType and ConceptualDataCategory here (may need server contract changes)\r\n    export interface SelectMetadata {\r\n        Restatement: string;\r\n        \r\n        /* SemanticType or PrimitiveType. */\r\n        Type?: number; \r\n\r\n        Format?: string;\r\n        DataCategory?: ConceptualDataCategory;\r\n\r\n        /** The select projection name. */\r\n        Name?: string;\r\n\r\n        /* If defined, this indicates the KPI class*/\r\n        kpiStatusGraphic?: string; // old version of kpi data\r\n\r\n        /* If defined, this indicates the KPI metadata*/\r\n        kpi?: DataViewKpiColumnMetadata;\r\n    }\r\n\r\n    export interface FilterMetadata {\r\n        Restatement: string;\r\n        Kind?: FilterKind;\r\n    }\r\n\r\n    export enum FilterKind {\r\n        Default,\r\n        Period,\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved.\r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *\r\n *  The above copyright notice and this permission notice shall be included in\r\n *  all copies or substantial portions of the Software.\r\n *\r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n\r\n    /** Represents a projection from a query result. */\r\n    export interface QueryProjection {\r\n        /** Name of item in the semantic query Select clause. */\r\n        queryRef: string;\r\n\r\n        /** Optional format string. */\r\n        format?: string; // TODO: Deprecate this, and populate format string through objects instead.\r\n    }\r\n\r\n    /** A set of QueryProjections, grouped by visualization property, and ordered within that property. */\r\n    export interface QueryProjectionsByRole {\r\n        [roleName: string]: QueryProjectionCollection;\r\n    }\r\n\r\n    export class QueryProjectionCollection {\r\n        private items: QueryProjection[];\r\n\r\n        /* The activeProjectionReference is an array that contains all the items that we are grouping on in case of a drillable\r\n           role. For example, if you have a drill role with [Country, State, City] and the user drilled to state, the active items\r\n           will include [Country and State]. This means that the query will group on both country and state and the state \"last item\"\r\n           is the item that the user drilled to.\r\n        */\r\n        private _activeProjectionRefs: string[];\r\n        private _showAll: boolean;\r\n\r\n        public constructor(items: QueryProjection[], activeProjectionRefs?: string[], showAll?: boolean) {\r\n            debug.assertValue(items, 'items');\r\n\r\n            this.items = items;\r\n            this._activeProjectionRefs = activeProjectionRefs;\r\n            this._showAll = showAll;\r\n        }\r\n\r\n        /** Returns all projections in a mutable array. */\r\n        public all(): QueryProjection[] {\r\n            return this.items;\r\n        }\r\n\r\n        public get activeProjectionRefs(): string[] {\r\n            return this._activeProjectionRefs;\r\n        }\r\n\r\n        public set activeProjectionRefs(queryReferences: string[]) {\r\n            if (!_.isEmpty(queryReferences)) {\r\n                let queryRefs = this.items.map(val => val.queryRef);\r\n\r\n                for (let queryReference of queryReferences) {\r\n                    if (!_.contains(queryRefs, queryReference))\r\n                        return;\r\n                }\r\n\r\n                this._activeProjectionRefs = queryReferences;\r\n            }\r\n        }\r\n\r\n        public get showAll(): boolean {\r\n            return this._showAll;\r\n        }\r\n\r\n        public set showAll(value: boolean) {\r\n            this._showAll = value;\r\n        }\r\n\r\n        public addActiveQueryReference(queryRef: string): void {\r\n            if (!this._activeProjectionRefs)\r\n                this._activeProjectionRefs = [queryRef];\r\n            else\r\n                this._activeProjectionRefs.push(queryRef);\r\n        }\r\n\r\n        public getLastActiveQueryReference(): string {\r\n            if (!_.isEmpty(this._activeProjectionRefs)) {\r\n                return this._activeProjectionRefs[this._activeProjectionRefs.length - 1];\r\n            }\r\n        }\r\n\r\n        public clone(): QueryProjectionCollection {\r\n            return new QueryProjectionCollection(_.clone(this.items), _.clone(this._activeProjectionRefs), this._showAll);\r\n        }\r\n    }\r\n\r\n    export module QueryProjectionsByRole {\r\n        /** Clones the QueryProjectionsByRole. */\r\n        export function clone(roles: QueryProjectionsByRole): QueryProjectionsByRole {\r\n            if (!roles)\r\n                return roles;\r\n\r\n            let clonedRoles: QueryProjectionsByRole = {};\r\n\r\n            for (let roleName in roles)\r\n                clonedRoles[roleName] = roles[roleName].clone();\r\n\r\n            return clonedRoles;\r\n        }\r\n\r\n        /** Returns the QueryProjectionCollection for that role.  Even returns empty collections so that 'drillable' and 'activeProjection' fields are preserved. */\r\n        export function getRole(roles: QueryProjectionsByRole, name: string): QueryProjectionCollection {\r\n            debug.assertAnyValue(roles, 'roles');\r\n            debug.assertValue(name, 'name');\r\n\r\n            if (!roles)\r\n                return;\r\n\r\n            return roles[name];\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi {\r\n\r\n    export interface VisualElement {\r\n        DataRoles?: DataRole[];\r\n        Settings?: VisualElementSettings;\r\n    }\r\n\r\n    /** Defines common settings for a visual element. */\r\n    export interface VisualElementSettings {\r\n        DisplayUnitSystemType?: DisplayUnitSystemType;\r\n    }\r\n\r\n    export interface DataRole {\r\n        Name: string;\r\n        Projection: number;\r\n        isActive?: boolean;\r\n    }\r\n\r\n    /** The system used to determine display units used during formatting */\r\n    export enum DisplayUnitSystemType {\r\n        /** Default display unit system, which saves space by using units such as K, M, bn with PowerView rules for when to pick a unit. Suitable for chart axes. */\r\n        Default,\r\n\r\n        /** A verbose display unit system that will only respect the formatting defined in the model. Suitable for explore mode single-value cards. */\r\n        Verbose,\r\n\r\n        /**\r\n         * A display unit system that uses units such as K, M, bn if we have at least one of those units (e.g. 0.9M is not valid as it's less than 1 million).\r\n         * Suitable for dashboard tile cards\r\n         */\r\n        WholeUnits,\r\n\r\n        /**A display unit system that also contains Auto and None units for data labels*/\r\n        DataLabels,\r\n    }\r\n}\r\n\r\nmodule powerbi.data.contracts {\r\n\r\n    export interface DataViewSource {\r\n        data: any;\r\n        type?: string;\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi {\r\n\r\n    export interface IColorAllocator {\r\n        /** Computes the color corresponding to the provided value. */\r\n        color(value: number): string;\r\n    }\r\n\r\n    export interface IColorAllocatorFactory {\r\n        /** Creates a gradient that that transitions between two colors. */\r\n        linearGradient2(options: LinearGradient2): IColorAllocator;\r\n\r\n        /** Creates a gradient that that transitions between three colors. */\r\n        linearGradient3(options: LinearGradient3, splitScales: boolean): IColorAllocator;\r\n    }\r\n} ","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    export interface CompiledDataViewRoleBindMappingWithReduction extends CompiledDataViewRoleBindMapping, HasReductionAlgorithm {\r\n    }\r\n\r\n    export interface CompiledDataViewRoleForMappingWithReduction extends CompiledDataViewRoleForMapping, HasReductionAlgorithm {\r\n    }\r\n} ","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    export module DataRoleHelper {\r\n        export function getMeasureIndexOfRole(grouped: DataViewValueColumnGroup[], roleName: string): number {\r\n            if (!_.isEmpty(grouped)) {\r\n                let firstGroup = grouped[0];\r\n                if (firstGroup.values && firstGroup.values.length > 0) {\r\n                    for (let i = 0, len = firstGroup.values.length; i < len; ++i) {\r\n                        let value = firstGroup.values[i];\r\n                        if (value && value.source) {\r\n                            if (hasRole(value.source, roleName))\r\n                                return i;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return -1;\r\n        }\r\n\r\n        export function getCategoryIndexOfRole(categories: DataViewCategoryColumn[], roleName: string): number {\r\n            if (!_.isEmpty(categories)) {\r\n                for (let i = 0, ilen = categories.length; i < ilen; i++) {\r\n                    if (hasRole(categories[i].source, roleName))\r\n                        return i;\r\n                }\r\n            }\r\n            return -1;\r\n        }\r\n\r\n        export function hasRole(column: DataViewMetadataColumn, name: string): boolean {\r\n            let roles = column.roles;\r\n            return roles && roles[name];\r\n        }\r\n\r\n        export function hasRoleInDataView(dataView: DataView, name: string): boolean {\r\n            return dataView != null\r\n                && dataView.metadata != null\r\n                && dataView.metadata.columns\r\n                && _.any(dataView.metadata.columns, c => c.roles && c.roles[name] !== undefined);\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    import DataRoleHelper = powerbi.data.DataRoleHelper;\r\n\r\n    export function createIDataViewCategoricalReader(dataView): IDataViewCategoricalReader {\r\n        return new DataViewCategoricalReader(dataView);\r\n    }\r\n\r\n    export interface IDataViewCategoricalReader {\r\n        // Category functions\r\n        hasCategories(): boolean;\r\n        getCategoryCount(): number;\r\n        getCategoryValues(roleName: string): any;\r\n        getCategoryValue(categoryIndex: number, roleName: string): any;\r\n        getCategoryColumn(roleName: string): DataViewCategoryColumn;\r\n        getCategoryMetadataColumn(roleName: string): DataViewMetadataColumn;\r\n        getCategoryDisplayName(roleName: string): string;\r\n        hasCompositeCategories(): boolean;\r\n        hasCategoryWithRole(roleName: string): boolean;\r\n        getCategoryObjects(categoryIndex: number, roleName: string): DataViewObjects;\r\n        // Value functions\r\n        hasValues(roleName: string): boolean;\r\n        getValues(roleName: string, seriesIndex?: number): any[];\r\n        getValue(roleName: string, categoryIndex: number, seriesIndex?: number): any;\r\n        /**\r\n         * Obtains the first non-null value for the given role name and category index.\r\n         * It should mainly be used for values that are expected to be the same across\r\n         * series, but avoids false nulls when the data is sparse.\r\n         */\r\n        getFirstNonNullValueForCategory(roleName: string, categoryIndex: number): any;\r\n        getMeasureQueryName(roleName: string): string;\r\n        getValueColumn(roleName: string, seriesIndex?: number): DataViewValueColumn;\r\n        getValueMetadataColumn(roleName: string, seriesIndex?: number): DataViewMetadataColumn;\r\n        getValueDisplayName(roleName: string, seriesIndex?: number): string;\r\n        // Series Methods\r\n        hasDynamicSeries(): boolean;\r\n        getSeriesCount(): number;\r\n        getSeriesObjects(seriesIndex: number): DataViewObjects;\r\n        getSeriesColumn(seriesIndex: number): DataViewValueColumn;\r\n        getSeriesColumns(): DataViewValueColumns;\r\n        getSeriesMetadataColumn(): DataViewMetadataColumn;\r\n        getSeriesColumnIdentifier(): powerbi.data.ISQExpr[];\r\n        getSeriesName(seriesIndex: number): PrimitiveValue;\r\n        getSeriesDisplayName(): string;\r\n    }\r\n\r\n    class DataViewCategoricalReader implements IDataViewCategoricalReader {\r\n        private dataView: DataView;\r\n        private categories: DataViewCategoryColumn[];\r\n        private grouped: DataViewValueColumnGroup[];\r\n        private dataHasDynamicSeries: boolean;\r\n        \r\n        // Validation variables\r\n        private hasValidCategories: boolean;\r\n        private hasAnyValidValues: boolean;\r\n        private hasCategoryObjects: boolean;\r\n\r\n        constructor(dataView: DataView) {\r\n            debug.assertValue(dataView, 'dataView');\r\n            this.dataView = dataView;\r\n            // Validate categories\r\n            let categorical: DataViewCategorical;\r\n            if (dataView)\r\n                categorical = dataView.categorical;\r\n            let categories: DataViewCategoryColumn[];\r\n            if (categorical)\r\n                categories = this.categories = categorical.categories;\r\n            this.hasValidCategories = !_.isEmpty(categories);\r\n            if (this.hasValidCategories) {\r\n                this.hasCategoryObjects = !!(categories[0].objects);\r\n            }\r\n\r\n            // Validate values\r\n            let values: DataViewValueColumns;\r\n            if (categorical)\r\n                values = categorical.values;\r\n            let hasAnyValidValues = this.hasAnyValidValues = !_.isEmpty(values);\r\n            if (hasAnyValidValues)\r\n                this.grouped = dataView.categorical.values.grouped();\r\n\r\n            if (this.hasAnyValidValues)\r\n                this.dataHasDynamicSeries = !!this.dataView.categorical.values.source;\r\n        }\r\n\r\n        // Category methods\r\n        \r\n        public hasCategories(): boolean {\r\n            return this.hasValidCategories;\r\n        }\r\n\r\n        public getCategoryCount(): number {\r\n            if (this.hasValidCategories)\r\n                return this.categories[0].values.length;\r\n            else\r\n                return 0;\r\n        }\r\n\r\n        public getCategoryValues(roleName: string): any {\r\n            if (this.hasValidCategories) {\r\n                let categories = this.getCategoryFromRole(roleName);\r\n                return categories ? categories.values : undefined;\r\n            }\r\n        }\r\n\r\n        public getCategoryValue(categoryIndex: number, roleName: string): any {\r\n            if (this.hasValidCategories) {\r\n                let categories = this.getCategoryFromRole(roleName);\r\n                return categories ? categories.values[categoryIndex] : undefined;\r\n            }\r\n        }\r\n\r\n        public getCategoryColumn(roleName: string): DataViewCategoryColumn {\r\n            if (this.hasValidCategories)\r\n                return this.getCategoryFromRole(roleName);\r\n        }\r\n\r\n        public getCategoryMetadataColumn(roleName: string): DataViewMetadataColumn {\r\n            if (this.hasValidCategories) {\r\n                let categories = this.getCategoryFromRole(roleName);\r\n                return categories ? categories.source : undefined;\r\n            }\r\n        }\r\n\r\n        public getCategoryDisplayName(roleName: string): string {\r\n            if (this.hasValidCategories) {\r\n                let targetColumn = this.getCategoryColumn(roleName);\r\n                if (targetColumn && targetColumn.source) {\r\n                    return targetColumn.source.displayName;\r\n                }\r\n            }\r\n        }\r\n\r\n        public hasCompositeCategories(): boolean {\r\n            if (this.hasValidCategories)\r\n                return this.categories.length > 1;\r\n        }\r\n\r\n        public hasCategoryWithRole(roleName: string): boolean {\r\n            return DataRoleHelper.getCategoryIndexOfRole(this.categories, roleName) !== -1;\r\n        }\r\n\r\n        public getCategoryObjects(categoryIndex: number, roleName: string): DataViewObjects {\r\n            if (this.hasValidCategories && this.hasCategoryObjects)\r\n                return this.getCategoryFromRole(roleName).objects[categoryIndex];\r\n        }\r\n\r\n        private getCategoryFromRole(roleName: string): DataViewCategoryColumn {\r\n            let categories = this.categories;\r\n            return categories[DataRoleHelper.getCategoryIndexOfRole(categories, roleName)];\r\n        }\r\n\r\n        // Value and measure methods\r\n\r\n        public hasValues(roleName: string): boolean {\r\n            return this.getMeasureIndex(roleName) !== -1;\r\n        }\r\n\r\n        public getValues(roleName: string, seriesIndex: number = 0): any[] {\r\n            let measureIndex = this.getMeasureIndex(roleName);\r\n            if (this.hasAnyValidValues && measureIndex !== -1)\r\n                return this.grouped[seriesIndex].values[measureIndex].values;\r\n        }\r\n\r\n        public getValue(roleName: string, categoryIndex: number, seriesIndex?: number): any {\r\n            if (this.hasAnyValidValues) {\r\n                let values = this.getValues(roleName, seriesIndex);\r\n                return values ? values[categoryIndex] : undefined;\r\n            }\r\n        }\r\n\r\n        public getFirstNonNullValueForCategory(roleName: string, categoryIndex: number): any {\r\n            if (this.hasAnyValidValues) {\r\n                if (!this.dataHasDynamicSeries) {\r\n                    debug.assert(this.grouped.length === 1, \"getFirstNonNullValueForCategory shouldn't be called if you have a static series\");\r\n                    return this.getValue(roleName, categoryIndex);\r\n                }\r\n                for (let seriesIndex = 0, seriesCount = this.grouped.length; seriesIndex < seriesCount; seriesIndex++) {\r\n                    let values = this.getValues(roleName, seriesIndex);\r\n                    let value = !_.isEmpty(values) ? values[categoryIndex] : undefined;\r\n                    if (value != null) {\r\n                        return value;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        public getMeasureQueryName(roleName: string): string {\r\n            let measureIndex = this.getMeasureIndex(roleName);\r\n            if (this.hasAnyValidValues && measureIndex !== -1)\r\n                return this.grouped[0].values[measureIndex].source.queryName;\r\n        }\r\n\r\n        public getValueColumn(roleName: string, seriesIndex: number = 0): DataViewValueColumn {\r\n            let measureIndex = this.getMeasureIndex(roleName);\r\n            if (this.hasAnyValidValues && measureIndex !== -1)\r\n                return this.grouped[seriesIndex].values[measureIndex];\r\n        }\r\n\r\n        public getValueMetadataColumn(roleName: string, seriesIndex: number = 0): DataViewMetadataColumn {\r\n            let measureIndex = this.getMeasureIndex(roleName);\r\n            if (this.hasAnyValidValues && measureIndex !== -1)\r\n                return this.grouped[seriesIndex].values[measureIndex].source;\r\n        }\r\n\r\n        public getValueDisplayName(roleName: string, seriesIndex?: number): string {\r\n            if (this.hasAnyValidValues) {\r\n                let targetColumn = this.getValueColumn(roleName, seriesIndex);\r\n                if (targetColumn && targetColumn.source) {\r\n                    return targetColumn.source.displayName;\r\n                }\r\n            }\r\n        }\r\n\r\n        private getMeasureIndex(roleName: string): number {\r\n            return DataRoleHelper.getMeasureIndexOfRole(this.grouped, roleName);\r\n        }\r\n\r\n        // Series methods\r\n\r\n        public hasDynamicSeries(): boolean {\r\n            return this.dataHasDynamicSeries;\r\n        }\r\n\r\n        public getSeriesCount(): number {\r\n            if (this.hasAnyValidValues)\r\n                return this.grouped.length;\r\n        }\r\n\r\n        public getSeriesObjects(seriesIndex: number): DataViewObjects {\r\n            if (this.hasAnyValidValues)\r\n                return this.grouped[seriesIndex].objects;\r\n        }\r\n\r\n        public getSeriesColumn(seriesIndex: number): DataViewValueColumn {\r\n            if (this.hasAnyValidValues)\r\n                return this.dataView.categorical.values[seriesIndex];\r\n        }\r\n\r\n        public getSeriesColumns(): DataViewValueColumns {\r\n            if (this.hasAnyValidValues)\r\n                return this.dataView.categorical.values;\r\n        }\r\n\r\n        public getSeriesMetadataColumn(): DataViewMetadataColumn {\r\n            if (this.hasAnyValidValues)\r\n                return this.dataView.categorical.values.source;\r\n        }\r\n\r\n        public getSeriesColumnIdentifier(): powerbi.data.ISQExpr[] {\r\n            if (this.hasAnyValidValues)\r\n                return this.dataView.categorical.values.identityFields;\r\n        }\r\n\r\n        public getSeriesName(seriesIndex: number): PrimitiveValue {\r\n            if (this.hasAnyValidValues)\r\n                return this.grouped[seriesIndex].name;\r\n        }\r\n\r\n        public getSeriesDisplayName(): string {\r\n            if (this.hasAnyValidValues && this.dataHasDynamicSeries)\r\n                return this.dataView.categorical.values.source.displayName;\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    import inheritSingle = Prototype.inheritSingle;\r\n    import RoleKindByQueryRef = DataViewAnalysis.RoleKindByQueryRef;\r\n\r\n    export module DataViewConcatenateCategoricalColumns {\r\n\r\n        /* Represents a collection of DataViewCategoryColumn that are tied to the same role. */\r\n        interface CategoryColumnsByRole {\r\n            /* The name of the role shared by all the objects in the categories property. */\r\n            roleName: string;\r\n\r\n            /**\r\n             * The list of columns that are tied to roleName, in the same order as they appear\r\n             * in the categories property of their owner DataViewCategorical object.\r\n             */\r\n            categories: DataViewCategoryColumn[];\r\n        }\r\n\r\n        export function detectAndApply(dataView: DataView, roleMappings: DataViewMapping[], projectionOrdering: DataViewProjectionOrdering, selects: DataViewSelectTransform[], projectionActiveItems: DataViewProjectionActiveItems): DataView {\r\n            debug.assertValue(dataView, 'dataView');\r\n            debug.assertAnyValue(roleMappings, 'roleMappings');\r\n            debug.assertAnyValue(projectionOrdering, 'projectionOrdering');\r\n\r\n            let result = dataView;\r\n            let dataViewCategorical: DataViewCategorical = dataView.categorical;\r\n\r\n            if (dataViewCategorical) {\r\n                let concatenationSource: CategoryColumnsByRole = detectCategoricalRoleForHierarchicalGroup(dataViewCategorical, dataView.metadata, roleMappings, selects, projectionActiveItems);\r\n\r\n                if (concatenationSource) {\r\n                    let columnsSortedByProjectionOrdering = sortColumnsByProjectionOrdering(projectionOrdering, concatenationSource.roleName, concatenationSource.categories);\r\n                    if (columnsSortedByProjectionOrdering.length >= 2) {\r\n                        result = applyConcatenation(dataView, concatenationSource.roleName, columnsSortedByProjectionOrdering);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        /**\r\n         * Returns the role and its assocated category columns (from dataViewCategorical.categories)\r\n         * that should be concatenated for the case of hierarchical group.\r\n         *\r\n         * Note: In the future if we support sibling hierarchical groups in categorical,\r\n         * change the return type to CategoryColumnsByRole[] and update detection logic.\r\n         */\r\n        function detectCategoricalRoleForHierarchicalGroup(dataViewCategorical: DataViewCategorical, metadata: DataViewMetadata, dataViewMappings: DataViewMapping[], selects: DataViewSelectTransform[], projectionActiveItems: DataViewProjectionActiveItems): CategoryColumnsByRole {\r\n            debug.assertValue(dataViewCategorical, 'dataViewCategorical');\r\n            debug.assertAnyValue(dataViewMappings, 'dataViewMappings');\r\n\r\n            let result: CategoryColumnsByRole;\r\n\r\n            // For now, just handle the case where roleMappings.length === 1.\r\n            // In the future, if there is more than 1, we might want to proceed if, \r\n            // for example, all role mappings map category to the same role name and they all have { max: 1 } conditions.\r\n            let roleKinds: RoleKindByQueryRef = DataViewSelectTransform.createRoleKindFromMetadata(selects, metadata);\r\n            let projections = DataViewSelectTransform.projectionsFromSelects(selects, projectionActiveItems);\r\n            let roleMappings = DataViewAnalysis.chooseDataViewMappings(projections, dataViewMappings, roleKinds).supportedMappings;\r\n\r\n            let roleMappingForCategorical: DataViewMapping = (roleMappings && roleMappings.length === 1 && !!roleMappings[0].categorical) ? roleMappings[0] : undefined;\r\n            if (roleMappingForCategorical) {\r\n                let roleNamesForCategory: string[] = getAllRolesInCategories(roleMappingForCategorical.categorical);\r\n\r\n                // With \"list\" in role mapping, is it possible to have multiple role names for category.\r\n                // For now, proceed to concatenate category columns only when categories are bound to 1 Role.\r\n                // We can change this if we want to support independent (sibling) group hierarchies in categorical.\r\n                if (roleNamesForCategory && roleNamesForCategory.length === 1) {\r\n                    let targetRoleName = roleNamesForCategory[0];\r\n\r\n                    let isVisualExpectingMaxOneCategoryColumn: boolean =\r\n                        !_.isEmpty(roleMappingForCategorical.conditions) &&\r\n                        _.every(roleMappingForCategorical.conditions, condition => condition[targetRoleName] && condition[targetRoleName].max === 1);\r\n\r\n                    if (isVisualExpectingMaxOneCategoryColumn) {\r\n                        let categoriesForTargetRole: DataViewCategoryColumn[] = _.filter(\r\n                            dataViewCategorical.categories,\r\n                            (categoryColumn: DataViewCategoryColumn) => categoryColumn.source.roles && !!categoryColumn.source.roles[targetRoleName]);\r\n\r\n                        // At least for now, we expect all category columns for the same role to have the same number of value entries.\r\n                        // If that's not the case, we won't run the concatenate logic for that role at all...\r\n                        let areValuesCountsEqual: boolean = _.every(\r\n                            categoriesForTargetRole,\r\n                            (categoryColumn: DataViewCategoryColumn) => categoryColumn.values.length === categoriesForTargetRole[0].values.length);\r\n\r\n                        // Also, there is no need to concatenate columns unless there is actually more than one column\r\n                        if (areValuesCountsEqual &&\r\n                            categoriesForTargetRole.length >= 2) {\r\n                            result = {\r\n                                roleName: targetRoleName,\r\n                                categories: categoriesForTargetRole\r\n                            };\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }\r\n        \r\n        /**\r\n         * Returns the array of role names that are mapped to categorical categories.\r\n         * Returns an empty array if none exists.\r\n         */\r\n        function getAllRolesInCategories(categoricalRoleMapping: DataViewCategoricalMapping): string[] {\r\n            debug.assertValue(categoricalRoleMapping, 'categoricalRoleMapping');\r\n\r\n            let roleNames: string[] = [];\r\n            DataViewMapping.visitCategoricalCategories(\r\n                categoricalRoleMapping.categories,\r\n                {\r\n                    visitRole: (roleName: string) => {\r\n                        roleNames.push(roleName);\r\n                    }\r\n                });\r\n\r\n            return roleNames;\r\n        }\r\n\r\n        function applyConcatenation(dataView: DataView, roleName: string, columnsSortedByProjectionOrdering: DataViewCategoryColumn[]): DataView {\r\n            debug.assertValue(dataView, 'dataView');\r\n            debug.assertValue(roleName, 'roleName');\r\n            debug.assert(columnsSortedByProjectionOrdering && columnsSortedByProjectionOrdering.length >= 2, 'columnsSortedByProjectionOrdering && columnsSortedByProjectionOrdering.length >= 2');\r\n\r\n            let concatenatedValues: string[] = concatenateValues(columnsSortedByProjectionOrdering);\r\n\r\n            let concatenatedColumnMetadata: DataViewMetadataColumn = createConcatenatedColumnMetadata(roleName, columnsSortedByProjectionOrdering);\r\n            let transformedDataView = inheritSingle(dataView);\r\n            addToMetadata(transformedDataView, concatenatedColumnMetadata);\r\n\r\n            let concatenatedCategoryColumn: DataViewCategoryColumn = createConcatenatedCategoryColumn(\r\n                columnsSortedByProjectionOrdering,\r\n                concatenatedColumnMetadata,\r\n                concatenatedValues);\r\n\r\n            let dataViewCategorical: DataViewCategorical = dataView.categorical;\r\n\r\n            let transformedCategoricalCategories: DataViewCategoryColumn[] = _.difference(dataViewCategorical.categories, columnsSortedByProjectionOrdering);\r\n            transformedCategoricalCategories.push(concatenatedCategoryColumn);\r\n\r\n            let transformedCategorical: DataViewCategorical = inheritSingle(dataViewCategorical);\r\n            transformedCategorical.categories = transformedCategoricalCategories;\r\n            transformedDataView.categorical = transformedCategorical;\r\n\r\n            return transformedDataView;\r\n        }\r\n\r\n        function concatenateValues(columnsSortedByProjectionOrdering: DataViewCategoryColumn[]): string[] {\r\n            debug.assertValue(columnsSortedByProjectionOrdering, 'columnsSortedByProjectionOrdering');\r\n\r\n            let concatenatedValues: string[] = [];\r\n\r\n            // concatenate the values in dataViewCategorical.categories[0..length-1].values[j], and store it in combinedValues[j]\r\n            for (let categoryColumn of columnsSortedByProjectionOrdering) {\r\n                for (let i = 0, len = categoryColumn.values.length; i < len; i++) {\r\n                    // TODO VSTS 6842107: need to clean up this value concatenation logic\r\n                    // This code does not have access to valueFormatter module.  So first, move valueFormatter.getFormatString(...)\r\n                    // and/or valueFormatter.formatValueColumn(...) to somewhere near DataViewObjects.ts, and then use it from here.\r\n                    let valueToAppend = categoryColumn.values && categoryColumn.values[i];\r\n                    concatenatedValues[i] = (concatenatedValues[i] === undefined) ? (valueToAppend + '') : (valueToAppend + ' ' + concatenatedValues[i]);\r\n                }\r\n            }\r\n\r\n            return concatenatedValues;\r\n        }\r\n\r\n        /**\r\n        * Returns a new array of elements from columns as they are ordered for the specified roleName in the specified projectionOrdering.\r\n        */\r\n        function sortColumnsByProjectionOrdering(projectionOrdering: DataViewProjectionOrdering, roleName: string, columns: DataViewCategoryColumn[]): DataViewCategoryColumn[] {\r\n            debug.assertAnyValue(projectionOrdering, 'projectionOrdering');\r\n            debug.assertValue(roleName, 'roleName');\r\n            debug.assertValue(columns, 'columns');\r\n\r\n            let columnsInProjectionOrdering: DataViewCategoryColumn[];\r\n\r\n            if (projectionOrdering) {\r\n                // the numeric values in projectionOrdering correspond to the index property of DataViewMetadataColumn\r\n                let columnsByIndex: { [index: number]: DataViewCategoricalColumn } = {};\r\n                for (let column of columns) {\r\n                    if (column.source.roles[roleName]) {\r\n                        debug.assert(!columnsByIndex[column.source.index], 'The specified columns should not contain multiple columns with same index: ' + column.source.index);\r\n                        columnsByIndex[column.source.index] = column;\r\n                    }\r\n                }\r\n\r\n                let columnIndicesInProjectionOrdering: number[] = projectionOrdering[roleName];\r\n\r\n                columnsInProjectionOrdering = _.chain(columnIndicesInProjectionOrdering)\r\n                    .map(columnIndex => columnsByIndex[columnIndex])\r\n                    .filter((column: DataViewCategoricalColumn) => !!column)\r\n                    .value();\r\n            }\r\n            else {\r\n                // If projectionOrder is unspecified, just return the columns for the specified role in their current order\r\n                columnsInProjectionOrdering = _.filter(columns, column => column.source.roles[roleName]);\r\n            }\r\n\r\n            return columnsInProjectionOrdering;\r\n        }\r\n\r\n        /**\r\n         * Creates the column metadata that will back the column with the concatenated values. \r\n         */\r\n        function createConcatenatedColumnMetadata(roleName: string, columnsSortedByProjectionOrdering: DataViewCategoryColumn[]): DataViewMetadataColumn {\r\n            debug.assertValue(roleName, 'roleName');\r\n            debug.assertNonEmpty(columnsSortedByProjectionOrdering, 'columnsSortedByProjectionOrdering');\r\n\r\n            let concatenatedDisplayName: string;\r\n\r\n            let columnForCurrentDrillLevel = _.last(columnsSortedByProjectionOrdering);\r\n\r\n            // By the end of the for-loop, consistentIsMeasure will be:\r\n            // - true if _.every(categoryColumn, c => c.source.isMeasure === true), or else\r\n            // - false if _.every(categoryColumn, c => c.source.isMeasure === false), or else\r\n            // - undefined.\r\n            let consistentIsMeasure: boolean = columnForCurrentDrillLevel.source.isMeasure;\r\n\r\n            for (let categoryColumn of columnsSortedByProjectionOrdering) {\r\n                let columnSource: DataViewMetadataColumn = categoryColumn.source;\r\n\r\n                concatenatedDisplayName = (concatenatedDisplayName == null) ? columnSource.displayName : (columnSource.displayName + ' ' + concatenatedDisplayName);\r\n\r\n                if (consistentIsMeasure !== columnSource.isMeasure) {\r\n                    consistentIsMeasure = undefined;\r\n                }\r\n            }\r\n\r\n            let newRoles: { [name: string]: boolean } = {};\r\n            newRoles[roleName] = true;\r\n\r\n            let newColumnMetadata: DataViewMetadataColumn = {\r\n                displayName: concatenatedDisplayName,\r\n                roles: newRoles,\r\n                type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Text)\r\n            };\r\n\r\n            if (consistentIsMeasure !== undefined) {\r\n                newColumnMetadata.isMeasure = consistentIsMeasure;\r\n            }\r\n\r\n            // TODO VSTS 6842046: Investigate whether we should change that property to mandatory or change the Chart visual code.\r\n            // If queryName is not set at all, the column chart visual will only render column for the first group instance.\r\n            // If queryName is set to any string other than columnForCurrentDrillLevel.source.queryName, then drilldown by group instance is broken (VSTS 6847879).\r\n            newColumnMetadata.queryName = columnForCurrentDrillLevel.source.queryName;\r\n\r\n            return newColumnMetadata;\r\n        }\r\n\r\n        function addToMetadata(transformedDataView: DataView, newColumn: DataViewMetadataColumn): void {\r\n            debug.assertValue(transformedDataView, 'transformedDataView');\r\n            debug.assertValue(newColumn, 'newColumn');\r\n\r\n            let transformedColumns = inheritSingle(transformedDataView.metadata.columns);\r\n            transformedColumns.push(newColumn);\r\n\r\n            let transformedMetadata = inheritSingle(transformedDataView.metadata);\r\n            transformedMetadata.columns = transformedColumns;\r\n\r\n            transformedDataView.metadata = transformedMetadata;\r\n        }\r\n\r\n        function createConcatenatedCategoryColumn(\r\n            sourceColumnsSortedByProjectionOrdering: DataViewCategoryColumn[],\r\n            columnMetadata: DataViewMetadataColumn,\r\n            concatenatedValues: string[]): DataViewCategoryColumn {\r\n            debug.assert(sourceColumnsSortedByProjectionOrdering && sourceColumnsSortedByProjectionOrdering.length >= 2, 'sourceColumnsSortedByProjectionOrdering && sourceColumnsSortedByProjectionOrdering.length >= 2');\r\n\r\n            let newCategoryColumn: DataViewCategoryColumn = {\r\n                source: columnMetadata,\r\n                values: concatenatedValues\r\n            };\r\n\r\n            // We expect every DataViewCategoryColumn in concatenationSourceColumns to have the same set of identities, always.\r\n            // So, we'll just take the identities and identityFields from the first column\r\n            let firstColumn = sourceColumnsSortedByProjectionOrdering[0];\r\n\r\n            if (firstColumn.identity) {\r\n                newCategoryColumn.identity = firstColumn.identity;\r\n            }\r\n\r\n            if (firstColumn.identityFields) {\r\n                newCategoryColumn.identityFields = firstColumn.identityFields;\r\n            }\r\n\r\n            // I doubt that any firstColumn.objects property would still make sense in the new column,\r\n            // so I won't copy that over for now.\r\n\r\n            return newCategoryColumn;\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi {\r\n    export const enum RoleItemContext {\r\n        CategoricalValue,\r\n        CategoricalValueGroup,\r\n    }\r\n\r\n    export interface IDataViewMappingVisitor {\r\n        visitRole(role: string, context?: RoleItemContext): void;\r\n        visitReduction?(reductionAlgorithm?: ReductionAlgorithm): void;\r\n    }\r\n\r\n    export module DataViewMapping {\r\n        export function visitMapping(mapping: DataViewMapping, visitor: IDataViewMappingVisitor): void {\r\n            debug.assertValue(mapping, 'mapping');\r\n            debug.assertValue(visitor, 'visitor');\r\n\r\n            let categorical = mapping.categorical;\r\n            if (categorical)\r\n                visitCategorical(categorical, visitor);\r\n\r\n            let table = mapping.table;\r\n            if (table)\r\n                visitTable(table, visitor);\r\n\r\n            let matrix = mapping.matrix;\r\n            if (matrix)\r\n                visitMatrix(matrix, visitor);\r\n\r\n            let tree = mapping.tree;\r\n            if (tree)\r\n                visitTree(tree, visitor);\r\n            \r\n            let single = mapping.single;\r\n            if (single)\r\n                visitSingle(single, visitor);\r\n        }\r\n\r\n        export function visitCategorical(mapping: DataViewCategoricalMapping, visitor: IDataViewMappingVisitor): void {\r\n            debug.assertValue(mapping, 'mapping');\r\n            debug.assertValue(visitor, 'visitor');\r\n\r\n            visitCategoricalCategories(mapping.categories, visitor);\r\n\r\n            let values = mapping.values;\r\n            visitCategoricalValues(values, visitor);\r\n            visitGrouped(<DataViewGroupedRoleMapping>values, visitor);\r\n        }\r\n\r\n        export function visitCategoricalCategories(mapping: DataViewRoleMappingWithReduction | DataViewListRoleMappingWithReduction, visitor: IDataViewMappingVisitor): void {\r\n            debug.assertAnyValue(mapping, 'mapping');\r\n            debug.assertValue(visitor, 'visitor');\r\n\r\n            if (mapping) {\r\n                visitBind(<DataViewRoleBindMapping>mapping, visitor);\r\n                visitFor(<DataViewRoleForMapping>mapping, visitor);\r\n                visitList(<DataViewListRoleMapping>mapping, visitor);\r\n\r\n                visitReduction(mapping, visitor);\r\n            }\r\n        }\r\n\r\n        export function visitCategoricalValues(mapping: DataViewRoleMapping | DataViewGroupedRoleMapping | DataViewListRoleMapping, visitor: IDataViewMappingVisitor): void {\r\n            debug.assertAnyValue(mapping, 'mapping');\r\n            debug.assertValue(visitor, 'visitor');\r\n\r\n            if (mapping) {\r\n                visitBind(<DataViewRoleBindMapping>mapping, visitor, RoleItemContext.CategoricalValue);\r\n                visitFor(<DataViewRoleForMapping>mapping, visitor, RoleItemContext.CategoricalValue);\r\n                visitList(<DataViewListRoleMapping>mapping, visitor, RoleItemContext.CategoricalValue);\r\n\r\n                let group = (<DataViewGroupedRoleMapping>mapping).group;\r\n                if (group) {\r\n                    for (let item of group.select) {\r\n                        visitBind(<DataViewRoleBindMapping>item, visitor, RoleItemContext.CategoricalValueGroup);\r\n                        visitFor(<DataViewRoleForMapping>item, visitor, RoleItemContext.CategoricalValueGroup);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        export function visitTable(mapping: DataViewTableMapping, visitor: IDataViewMappingVisitor): void {\r\n            debug.assertValue(mapping, 'mapping');\r\n            debug.assertValue(visitor, 'visitor');\r\n\r\n            let rows = mapping.rows;\r\n            visitBind(<DataViewRoleBindMapping>rows, visitor);\r\n            visitFor(<DataViewRoleForMapping>rows, visitor);\r\n            visitList(<DataViewListRoleMapping>rows, visitor);\r\n\r\n            visitReduction(rows, visitor);\r\n        }\r\n\r\n        function visitMatrix(mapping: DataViewMatrixMapping, visitor: IDataViewMappingVisitor): void {\r\n            debug.assertValue(mapping, 'mapping');\r\n            debug.assertValue(visitor, 'visitor');\r\n\r\n            visitMatrixItems(mapping.rows, visitor);\r\n            visitMatrixItems(mapping.columns, visitor);\r\n            visitMatrixItems(mapping.values, visitor);\r\n        }\r\n\r\n        /**\r\n         * For visiting DataViewMatrixMapping.rows, DataViewMatrixMapping.columns, or DataViewMatrixMapping.values.\r\n         *\r\n         * @param mapping Can be one of DataViewMatrixMapping.rows, DataViewMatrixMapping.columns, or DataViewMatrixMapping.values.\r\n         * @param visitor The visitor.\r\n         */\r\n        export function visitMatrixItems(mapping: DataViewRoleForMappingWithReduction | DataViewListRoleMappingWithReduction, visitor: IDataViewMappingVisitor): void {\r\n            debug.assertAnyValue(mapping, 'mapping');\r\n            debug.assertValue(visitor, 'visitor');\r\n\r\n            if (mapping) {\r\n                visitFor(<DataViewRoleForMapping>mapping, visitor);\r\n                visitList(<DataViewListRoleMapping>mapping, visitor);\r\n\r\n                visitReduction(mapping, visitor);\r\n            }\r\n        }\r\n\r\n        function visitTree(mapping: DataViewTreeMapping, visitor: IDataViewMappingVisitor): void {\r\n            debug.assertValue(mapping, 'mapping');\r\n            debug.assertValue(visitor, 'visitor');\r\n\r\n            visitTreeNodes(mapping.nodes, visitor);\r\n            visitTreeValues(mapping.values, visitor);\r\n        }\r\n\r\n        export function visitTreeNodes(mapping: DataViewRoleForMappingWithReduction, visitor: IDataViewMappingVisitor): void {\r\n            debug.assertAnyValue(mapping, 'mapping');\r\n            debug.assertValue(visitor, 'visitor');\r\n\r\n            if (mapping) {\r\n                visitFor(mapping, visitor);\r\n\r\n                visitReduction(mapping, visitor);\r\n            }\r\n        }\r\n\r\n        export function visitTreeValues(mapping: DataViewRoleForMapping, visitor: IDataViewMappingVisitor): void {\r\n            debug.assertAnyValue(mapping, 'mapping');\r\n            debug.assertValue(visitor, 'visitor');\r\n\r\n            if (mapping) {\r\n                visitFor(mapping, visitor);\r\n            }\r\n        }\r\n\r\n        function visitBind(mapping: DataViewRoleBindMapping, visitor: IDataViewMappingVisitor, context?: RoleItemContext): void {\r\n            debug.assertValue(mapping, 'mapping');\r\n            debug.assertValue(visitor, 'visitor');\r\n\r\n            let bind = mapping.bind;\r\n            if (bind) {\r\n                if (context != null)\r\n                    visitor.visitRole(bind.to, context);\r\n                else\r\n                    visitor.visitRole(bind.to);\r\n            }\r\n        }\r\n\r\n        function visitFor(mapping: DataViewRoleForMapping, visitor: IDataViewMappingVisitor, context?: RoleItemContext): void {\r\n            debug.assertValue(mapping, 'mapping');\r\n            debug.assertValue(visitor, 'visitor');\r\n\r\n            let forValue = mapping.for;\r\n            if (forValue) {\r\n                if (context != null)\r\n                    visitor.visitRole(forValue.in, context);\r\n                else\r\n                    visitor.visitRole(forValue.in);\r\n            }\r\n        }\r\n\r\n        function visitList(mapping: DataViewListRoleMapping, visitor: IDataViewMappingVisitor, context?: RoleItemContext): void {\r\n            debug.assertValue(mapping, 'mapping');\r\n            debug.assertValue(visitor, 'visitor');\r\n\r\n            let select = mapping.select;\r\n            if (select) {\r\n                for (let item of select) {\r\n                    visitBind(<DataViewRoleBindMapping>item, visitor, context);\r\n                    visitFor(<DataViewRoleForMapping>item, visitor, context);\r\n                }\r\n            }\r\n        }\r\n\r\n        export function visitGrouped(mapping: DataViewGroupedRoleMapping, visitor: IDataViewMappingVisitor): void {\r\n            debug.assertAnyValue(mapping, 'mapping');\r\n            debug.assertValue(visitor, 'visitor');\r\n\r\n            if (!mapping)\r\n                return;\r\n\r\n            let group = mapping.group;\r\n            if (group) {\r\n                visitor.visitRole(group.by);\r\n\r\n                visitReduction(group, visitor);\r\n            }\r\n        }\r\n\r\n        function visitReduction(mapping: HasReductionAlgorithm, visitor: IDataViewMappingVisitor): void {\r\n            debug.assertValue(mapping, 'mapping');\r\n            debug.assertValue(visitor, 'visitor');\r\n\r\n            if (visitor.visitReduction) {\r\n                let reductionAlgorithm = mapping.dataReductionAlgorithm;\r\n                if (reductionAlgorithm) {\r\n                    visitor.visitReduction(reductionAlgorithm);\r\n                }\r\n            }\r\n        }\r\n\r\n        function visitSingle(mapping: DataViewSingleMapping, visitor: IDataViewMappingVisitor): void {\r\n            debug.assertValue(mapping, 'mapping');\r\n            debug.assertValue(visitor, 'visitor');\r\n\r\n            visitor.visitRole(mapping.role);\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved.\r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *\r\n *  The above copyright notice and this permission notice shall be included in\r\n *  all copies or substantial portions of the Software.\r\n *\r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    import inheritSingle = Prototype.inheritSingle;\r\n\r\n    export interface DataViewNormalizeValuesApplyOptions {\r\n        dataview: DataView;\r\n        dataViewMappings: DataViewMapping[];\r\n        dataRoles: VisualDataRole[];\r\n    }\r\n\r\n    /**\r\n     * Interface of a function for deciding whether a column is tied to any role that has required type(s).\r\n     *\r\n     * @param columnIndex the position of the column in the select statement, i.e. the same semantic as the index property on the DataViewMetadataColumn interface.\r\n     * @returns true iff the column in the specified columnIndex is tied to any role that has required type(s), i.e. if the value in that column potentially needs to get normalized.\r\n     */\r\n    export interface IMetadataColumnFilter {\r\n        (columnIndex: number): boolean;\r\n    }\r\n\r\n    /**\r\n     * Returns true iff the specified value is of matching type as required by the role assigned to the column associated with this filter object.\r\n     */\r\n    export interface IColumnValueFilter {\r\n        (value: any): boolean;\r\n    }\r\n\r\n    /**\r\n     * Interface of a function for deciding whether a value needs to be normalized due to not having a matching type as required by a role tied to the column associated with the specified columnIndex.\r\n     *\r\n     * @param columnIndex the position of the column in the select statement, i.e. the same semantic as the index property on the DataViewMetadataColumn interface.\r\n     * @returns false iff the specified value needs to be normalized due to not having a matching type as required by a role tied to the column associated with the specified columnIndex.\r\n     */\r\n    export interface IValueFilter {\r\n        (columnIndex: number, value: any): boolean;\r\n    }\r\n\r\n    export module DataViewNormalizeValues {\r\n        export function apply(options: DataViewNormalizeValuesApplyOptions): void {\r\n            debug.assertValue(options, 'options');\r\n\r\n            let rolesToNormalize = _.filter(options.dataRoles, role => !_.isEmpty(role.requiredTypes));\r\n\r\n            filterVariantMeasures(options.dataview, options.dataViewMappings, rolesToNormalize);\r\n        }\r\n\r\n        export function filterVariantMeasures(dataview: DataView, dataViewMappings: DataViewMapping[], rolesToNormalize: VisualDataRole[]): void {\r\n            debug.assertValue(dataview, 'dataview');\r\n\r\n            // Don't perform this unless we actually have dataViewMappings and variant measures to suppress\r\n            // When we switch to lazy per-visual DataView creation, we'll be able to remove this check.\r\n            if (_.isEmpty(dataViewMappings) || _.isEmpty(rolesToNormalize))\r\n                return;\r\n\r\n            let columnFilter = generateMetadataColumnFilter(dataview.metadata.columns, rolesToNormalize);\r\n            let valueFilter = generateValueFilter(dataview.metadata.columns, rolesToNormalize);\r\n\r\n            let usedMappings = {};\r\n            for (let dataViewMapping of dataViewMappings) {\r\n                // Get dataview specified in mappings which are also in dataview\r\n                for (let dataViewMappingProp in dataViewMapping) {\r\n                    if (dataview[dataViewMappingProp] != null)\r\n                        usedMappings[dataViewMappingProp] = true;\r\n                }\r\n            }\r\n\r\n            if (usedMappings['categorical'])\r\n                filterVariantMeasuresCategorical(dataview.categorical, columnFilter, valueFilter);\r\n            if (usedMappings['table'])\r\n                filterVariantMeasuresTable(dataview.table, columnFilter, valueFilter);\r\n            if (usedMappings['tree'])\r\n                filterVariantMeasuresTreeNode(dataview.tree.root, columnFilter, valueFilter);\r\n            if (usedMappings['matrix'])\r\n                filterVariantMeasuresMatrix(dataview.matrix, columnFilter, valueFilter);\r\n            if (usedMappings['single'])\r\n                filterVariantMeasuresSingle(dataview, dataViewMappings, rolesToNormalize, valueFilter);\r\n        }\r\n\r\n        export function generateMetadataColumnFilter(columns: DataViewMetadataColumn[], rolesToNormalize: VisualDataRole[]): IMetadataColumnFilter {\r\n            if (!columns || !rolesToNormalize)\r\n                return () => false;\r\n\r\n            let columnsToNormalize = {};\r\n            for (let column of columns) {\r\n                let roles = column.roles;\r\n                if (!roles)\r\n                    continue;\r\n                for (let role of rolesToNormalize) {\r\n                    if (!roles[role.name])\r\n                        continue;\r\n                    columnsToNormalize[column.index] = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            return (columnIndex: number) => {\r\n                if (isNaN(columnIndex))\r\n                    return false;\r\n\r\n                return !!columnsToNormalize[columnIndex];\r\n            };\r\n        }\r\n\r\n        export function generateValueFilter(columns: DataViewMetadataColumn[], rolesToNormalize: VisualDataRole[]): IValueFilter {\r\n            if (!columns || !rolesToNormalize)\r\n                return () => true;\r\n\r\n            let columnValueFilters: IColumnValueFilter[] = [];\r\n\r\n            // Build columnValueFilters based on role requiredTypes\r\n            for (let column of columns) {\r\n                let columnValueFilter = generateColumnValueFilter(column, rolesToNormalize);\r\n\r\n                if (columnValueFilter)\r\n                    columnValueFilters[column.index] = columnValueFilter;\r\n            }\r\n\r\n            return <IValueFilter>(columnIndex: number, value: any) => {\r\n                if (columnValueFilters[columnIndex])\r\n                    return columnValueFilters[columnIndex](value);\r\n\r\n                return true;\r\n            };\r\n        }\r\n\r\n        function generateColumnValueFilter(column: DataViewMetadataColumn, rolesToNormalize: VisualDataRole[]): IColumnValueFilter {\r\n            let requiredTypes = getColumnRequiredTypes(column, rolesToNormalize);\r\n\r\n            if (_.isEmpty(requiredTypes))\r\n                return;\r\n\r\n            return (value: any): boolean => {\r\n                return doesValueMatchTypes(value, requiredTypes);\r\n            };\r\n        }\r\n\r\n        export function getColumnRequiredTypes(column: DataViewMetadataColumn, rolesToNormalize: VisualDataRole[]): ValueType[] {\r\n            let requiredTypes = [];\r\n            let columnRoles = column && column.roles;\r\n\r\n            if (!columnRoles)\r\n                return requiredTypes;\r\n\r\n            for (let role of rolesToNormalize) {\r\n                if (!columnRoles[role.name])\r\n                    continue;\r\n                for (let typeDescriptor of role.requiredTypes) {\r\n                    let type = ValueType.fromDescriptor(typeDescriptor);\r\n                    requiredTypes.push(type);\r\n                }\r\n            }\r\n\r\n            return requiredTypes;\r\n        }\r\n\r\n        function filterVariantMeasuresCategorical(dataview: DataViewCategorical, columnFilter: IMetadataColumnFilter, valueFilter: IValueFilter): void {\r\n            let values = dataview && dataview.values;\r\n            if (!values)\r\n                return;\r\n\r\n            let valuesGrouped = values.grouped();\r\n            if (!valuesGrouped)\r\n                return;\r\n\r\n            for (let valueGroup of valuesGrouped) {\r\n                let valuesInGroup = valueGroup.values;\r\n                for (let valueColumn of valuesInGroup) {\r\n                    let columnIndex = valueColumn.source.index;\r\n                    if (!columnFilter(columnIndex))\r\n                        continue;\r\n\r\n                    for (let i = 0, ilen = valueColumn.values.length; i < ilen; i++) {\r\n                        valueColumn.values = normalizeVariant(valueColumn.values, i, columnIndex, valueFilter);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function filterVariantMeasuresTable(dataview: DataViewTable, columnFilter: IMetadataColumnFilter, valueFilter: IValueFilter): void {\r\n            let columns = dataview && dataview.columns;\r\n\r\n            if (!columns)\r\n                return;\r\n\r\n            let filteredColumns = [];\r\n            for (let column of columns) {\r\n                if (columnFilter(column.index))\r\n                    filteredColumns.push(column.index);\r\n            }\r\n\r\n            let rows = dataview.rows;\r\n            for (let i = 0, ilen = rows.length; i < ilen; i++) {\r\n                for (let index of filteredColumns) {\r\n                    rows[i] = normalizeVariant(rows[i], index, index, valueFilter);\r\n                }\r\n            }\r\n        }\r\n\r\n        function filterVariantMeasuresTreeNode(node: DataViewTreeNode, columnFilter: IMetadataColumnFilter, valueFilter: IValueFilter): void {\r\n            if (node.values) {\r\n                for (let columnIndex in node.values) {\r\n                    // In dataView.tree, the keys in node.values correspond to columnIndex of the node value\r\n                    if (columnFilter(columnIndex)) {\r\n                        // According to nojorgen, it is possible to have primitive values as values in the node.values dictionary.\r\n                        if (typeof (node.values[columnIndex]) === 'object' && ('value' in node.values[columnIndex]))\r\n                            node.values[columnIndex] = normalizeVariant(node.values[columnIndex], 'value', columnIndex, valueFilter);\r\n                        else // if node.values[columnIndex] is a primitive value\r\n                            node.values = normalizeVariant(node.values, columnIndex, columnIndex, valueFilter);\r\n                    }\r\n                }\r\n            }\r\n            else if (node.children) {\r\n                for (let child of node.children) {\r\n                    filterVariantMeasuresTreeNode(child, columnFilter, valueFilter);\r\n                }\r\n            }\r\n        }\r\n\r\n        function filterVariantMeasuresMatrix(dataview: DataViewMatrix, columnFilter: IMetadataColumnFilter, valueFilter: IValueFilter): void {\r\n            let root = dataview && dataview.rows && dataview.rows.root;\r\n\r\n            if (!root)\r\n                return;\r\n\r\n            // Recurse into rows.children\r\n            // e.g. rows.children -> .children -> .children.values\r\n            filterVariantMeasuresMatrixRecursive(dataview, root, columnFilter, valueFilter);\r\n        }\r\n\r\n        function filterVariantMeasuresMatrixRecursive(dataviewMatrix: DataViewMatrix, node: DataViewTreeNode, columnFilter: IMetadataColumnFilter, valueFilter: IValueFilter): void {\r\n            if (node.values) {\r\n                for (let id in node.values) {\r\n                    // Note related to VSTS 6547124: In dataView.matrix, the keys in node.values are NOT equivalent to value.valueSourceIndex.\r\n                    let nodeValue: DataViewMatrixNodeValue = node.values[id];\r\n\r\n                    // the property DataViewMatrixNodeValue.valueSourceIndex will not exist if valueSourceIndex is 0 for that value\r\n                    let valueSourceIndex: number = nodeValue.valueSourceIndex || 0;\r\n\r\n                    // index is an optional property on DataViewMetadataColumn, but I am not sure when it will ever be undefined in a matrix' column metadata\r\n                    let columnIndex = dataviewMatrix.valueSources[valueSourceIndex].index;\r\n\r\n                    if (_.isNumber(columnIndex) && columnFilter(columnIndex)) {\r\n                        node.values[id] = normalizeVariant(nodeValue, 'value', columnIndex, valueFilter);\r\n                    }\r\n                }\r\n            }\r\n            else if (node.children) {\r\n                for (let child of node.children) {\r\n                    filterVariantMeasuresMatrixRecursive(dataviewMatrix, child, columnFilter, valueFilter);\r\n                }\r\n            }\r\n        }\r\n\r\n        function filterVariantMeasuresSingle(dataview: DataView, dataViewMappings: DataViewMapping[], rolesToNormalize: VisualDataRole[], valueFilter: IValueFilter): void {\r\n            if (!dataview.single)\r\n                return;\r\n\r\n            let roleNames: string[] = [];\r\n            for (let role of rolesToNormalize) {\r\n                if (role.name)\r\n                    roleNames.push(role.name);\r\n            }\r\n\r\n            let columns = dataview.metadata.columns;\r\n            for (let dataViewMapping of dataViewMappings) {\r\n                let roleName = dataViewMapping.single.role;\r\n                if (roleNames.indexOf(roleName) !== -1) {\r\n                    let column = firstColumnByRoleName(columns, roleName);\r\n                    if (column)\r\n                        dataview.single = normalizeVariant(dataview.single, 'value', column.index, valueFilter);\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        export function normalizeVariant<T>(object: T, key: string|number, columnIndex: number, valueFilter: IValueFilter): T {\r\n            if (!object)\r\n                return;\r\n\r\n            let value = object[key];\r\n            if (value !== null && !valueFilter(columnIndex, value)) {\r\n                object = inheritSingle(object);\r\n                object[key] = null;\r\n            }\r\n\r\n            return object;\r\n        }\r\n\r\n        function doesValueMatchTypes<T>(value: T, types: ValueType[]): boolean {\r\n            for (let type of types) {\r\n                if (type.numeric || type.integer)\r\n                    return typeof (value) === 'number';\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        function firstColumnByRoleName(columns: DataViewMetadataColumn[], roleName: string): DataViewMetadataColumn {\r\n            for (let column of columns) {\r\n                let columnRoles = column && column.roles;\r\n                if (columnRoles && columnRoles[roleName])\r\n                    return column;\r\n            }\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi {\r\n\r\n    export module DataViewObjects {\r\n        /** Gets the value of the given object/property pair. */\r\n        export function getValue<T>(objects: DataViewObjects, propertyId: DataViewObjectPropertyIdentifier, defaultValue?: T): T {\r\n            debug.assertAnyValue(objects, 'objects');\r\n            debug.assertValue(propertyId, 'propertyId');\r\n\r\n            if (!objects)\r\n                return defaultValue;\r\n\r\n            let objectOrMap = objects[propertyId.objectName];\r\n            debug.assert(!isUserDefined(objectOrMap), 'expected DataViewObject');\r\n\r\n            let object = <DataViewObject>objectOrMap;\r\n            return DataViewObject.getValue(object, propertyId.propertyName, defaultValue);\r\n        }\r\n\r\n        /** Gets an object from objects. */\r\n        export function getObject(objects: DataViewObjects, objectName: string, defaultValue?: DataViewObject): DataViewObject {\r\n            if (objects && objects[objectName]) {\r\n                let object = <DataViewObject>objects[objectName];\r\n                debug.assert(!isUserDefined(object), 'expected DataViewObject');\r\n                return object;\r\n            }\r\n            else {\r\n                return defaultValue;\r\n            }\r\n        }\r\n\r\n        /** Gets a map of user-defined objects. */\r\n        export function getUserDefinedObjects(objects: DataViewObjects, objectName: string): DataViewObjectMap {\r\n            if (objects && objects[objectName]) {\r\n                let map = <DataViewObjectMap>objects[objectName];\r\n                debug.assert(isUserDefined(map), 'expected DataViewObjectMap');\r\n                return map;\r\n            }\r\n        }\r\n\r\n        /** Gets the solid color from a fill property. */\r\n        export function getFillColor(objects: DataViewObjects, propertyId: DataViewObjectPropertyIdentifier, defaultColor?: string): string {\r\n            let value: Fill = getValue(objects, propertyId);\r\n            if (!value || !value.solid)\r\n                return defaultColor;\r\n\r\n            return value.solid.color;\r\n        }\r\n\r\n        /** Returns true if the given object represents a collection of user-defined objects */\r\n        export function isUserDefined(objectOrMap: DataViewObject | DataViewObjectMap): boolean {\r\n            return _.isArray(objectOrMap);\r\n        }\r\n    }\r\n\r\n    export module DataViewObject {\r\n        export function getValue<T>(object: DataViewObject, propertyName: string, defaultValue?: T): T {\r\n            debug.assertAnyValue(object, 'object');\r\n            debug.assertValue(propertyName, 'propertyName');\r\n\r\n            if (!object)\r\n                return defaultValue;\r\n\r\n            let propertyValue = <T>object[propertyName];\r\n            if (propertyValue === undefined)\r\n                return defaultValue;\r\n\r\n            return propertyValue;\r\n        }\r\n\r\n        /** Gets the solid color from a fill property using only a propertyName */\r\n        export function getFillColorByPropertyName(objects: DataViewObjects, propertyName: string, defaultColor?: string): string {\r\n            let value: Fill = DataViewObject.getValue(objects, propertyName);\r\n            if (!value || !value.solid)\r\n                return defaultColor;\r\n\r\n            return value.solid.color;\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    import JsonComparer = jsCommon.JsonComparer;\r\n\r\n    /** Defines the values for particular objects. */\r\n    export interface DataViewObjectDefinitions {\r\n        [objectName: string]: DataViewObjectDefinition[];\r\n    }\r\n\r\n    export interface DataViewObjectDefinition {\r\n        selector?: Selector;\r\n        properties: DataViewObjectPropertyDefinitions;\r\n    }\r\n\r\n    export interface DataViewObjectPropertyDefinitions {\r\n        [name: string]: DataViewObjectPropertyDefinition;\r\n    }\r\n\r\n    export type DataViewObjectPropertyDefinition = SQExpr | StructuralObjectDefinition;\r\n\r\n    export module DataViewObjectDefinitions {\r\n\r\n        /** Creates or reuses a DataViewObjectDefinition for matching the given objectName and selector within the defns. */\r\n        export function ensure(\r\n            defns: DataViewObjectDefinitions,\r\n            objectName: string,\r\n            selector: Selector): DataViewObjectDefinition {\r\n            debug.assertValue(defns, 'defns');\r\n\r\n            let defnsForObject = defns[objectName];\r\n            if (!defnsForObject)\r\n                defns[objectName] = defnsForObject = [];\r\n\r\n            for (let i = 0, len = defnsForObject.length; i < len; i++) {\r\n                let defn = defnsForObject[i];\r\n                if (Selector.equals(defn.selector, selector))\r\n                    return defn;\r\n            }\r\n\r\n            let newDefn: DataViewObjectDefinition = {\r\n                selector: selector,\r\n                properties: {},\r\n            };\r\n            defnsForObject.push(newDefn);\r\n\r\n            return newDefn;\r\n        }\r\n\r\n        export function deleteProperty(\r\n            defns: DataViewObjectDefinitions,\r\n            objectName: string,\r\n            selector: Selector,\r\n            propertyName: string): void {\r\n            debug.assertValue(defns, 'defns');\r\n\r\n            let defn = getObjectDefinition(defns, objectName, selector);\r\n            if (!defn)\r\n                return;\r\n\r\n            DataViewObjectDefinition.deleteSingleProperty(defn, propertyName);\r\n        }\r\n        \r\n        export function setValue(\r\n            defns: DataViewObjectDefinitions,\r\n            propertyId: DataViewObjectPropertyIdentifier,\r\n            selector: Selector,\r\n            value: DataViewObjectPropertyDefinition): void {\r\n            debug.assertValue(defns, 'defns');\r\n            debug.assertValue(propertyId, 'propertyId');\r\n\r\n            ensure(defns, propertyId.objectName, selector).properties[propertyId.propertyName] = value;\r\n        }\r\n\r\n        export function getValue(\r\n            defns: DataViewObjectDefinitions,\r\n            propertyId: DataViewObjectPropertyIdentifier,\r\n            selector: Selector): DataViewObjectPropertyDefinition {\r\n\r\n            let properties = getPropertyContainer(defns, propertyId, selector);\r\n            if (!properties)\r\n                return;\r\n\r\n            return properties[propertyId.propertyName];\r\n        }\r\n\r\n        export function getPropertyContainer(\r\n            defns: DataViewObjectDefinitions,\r\n            propertyId: DataViewObjectPropertyIdentifier,\r\n            selector: Selector): DataViewObjectPropertyDefinitions {\r\n\r\n            let defn = getObjectDefinition(defns, propertyId.objectName, selector);\r\n            if (!defn)\r\n                return;\r\n\r\n            return defn.properties;\r\n        }\r\n\r\n        export function getObjectDefinition(\r\n            defns: DataViewObjectDefinitions,\r\n            objectName: string,\r\n            selector: Selector): DataViewObjectDefinition {\r\n            debug.assertAnyValue(defns, 'defns');\r\n            debug.assertValue(objectName, 'objectName');\r\n            debug.assertAnyValue(selector, 'selector');\r\n\r\n            if (!defns)\r\n                return;\r\n\r\n            let defnsForObject = defns[objectName];\r\n            if (!defnsForObject)\r\n                return;\r\n\r\n            for (let i = 0, len = defnsForObject.length; i < len; i++) {\r\n                let defn = defnsForObject[i];\r\n                if (Selector.equals(defn.selector, selector))\r\n                    return defn;\r\n            }\r\n        }\r\n\r\n        export function propertiesAreEqual(a: DataViewObjectPropertyDefinition, b: DataViewObjectPropertyDefinition): boolean {\r\n            if (a instanceof SemanticFilter && b instanceof SemanticFilter) {\r\n                return SemanticFilter.isSameFilter(<SemanticFilter>a, <SemanticFilter>b);\r\n            }\r\n\r\n            return JsonComparer.equals(a, b);\r\n        }\r\n\r\n        export function allPropertiesAreEqual(a: DataViewObjectPropertyDefinitions, b: DataViewObjectPropertyDefinitions): boolean {\r\n            debug.assertValue(a, 'a');\r\n            debug.assertValue(b, 'b');\r\n\r\n            if (Object.keys(a).length !== Object.keys(b).length)\r\n                return false;\r\n\r\n            for (let property in a) {\r\n                if (!propertiesAreEqual(a[property], b[property]))\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        export function encodePropertyValue(value: DataViewPropertyValue, valueTypeDescriptor: ValueTypeDescriptor): DataViewObjectPropertyDefinition {\r\n            debug.assertAnyValue(value, 'value');\r\n            debug.assertValue(valueTypeDescriptor, 'valueTypeDescriptor');\r\n\r\n            if (valueTypeDescriptor.bool) {\r\n                if (typeof (value) !== 'boolean')\r\n                    value = false; // This is fallback, which doesn't really belong here.\r\n\r\n                return SQExprBuilder.boolean(<boolean>value);\r\n            }\r\n            else if (valueTypeDescriptor.text || (valueTypeDescriptor.scripting && valueTypeDescriptor.scripting.source)) {\r\n                return SQExprBuilder.text(<string>value);\r\n            }\r\n            else if (valueTypeDescriptor.numeric) {\r\n                if ($.isNumeric(value))\r\n                    return SQExprBuilder.double(+value);\r\n            }\r\n            else if ((<StructuralTypeDescriptor>valueTypeDescriptor).fill) {\r\n                if (value) {\r\n                    return {\r\n                        solid: { color: SQExprBuilder.text(<string>value) }\r\n                    };\r\n                }\r\n            }\r\n            else if (valueTypeDescriptor.formatting) {\r\n                if (valueTypeDescriptor.formatting.labelDisplayUnits) {\r\n                    return SQExprBuilder.double(+value);\r\n                }\r\n                else {\r\n                    return SQExprBuilder.text(<string>value);\r\n                }\r\n            }\r\n            else if (valueTypeDescriptor.enumeration) {\r\n                if ($.isNumeric(value))\r\n                    return SQExprBuilder.double(+value);\r\n                else\r\n                    return SQExprBuilder.text(<string>value);\r\n            }\r\n            else if (valueTypeDescriptor.misc) {\r\n                if (value) {\r\n                    value = SQExprBuilder.text(<string>value);\r\n                } else {\r\n                    value = null;\r\n                }\r\n            }\r\n            else if ((<StructuralTypeDescriptor>valueTypeDescriptor).image) {\r\n                if (value) {\r\n                    let imageValue = <ImageValue>value;\r\n                    let imageDefinition: ImageDefinition = {\r\n                        name: SQExprBuilder.text(imageValue.name),\r\n                        url: SQExprBuilder.text(imageValue.url),\r\n                    };\r\n\r\n                    if (imageValue.scaling)\r\n                        imageDefinition.scaling = SQExprBuilder.text(imageValue.scaling);\r\n\r\n                    return imageDefinition;\r\n                }\r\n            }\r\n\r\n            return value;\r\n        }\r\n\r\n        export function clone(original: DataViewObjectDefinitions): DataViewObjectDefinitions {\r\n            debug.assertValue(original, 'original');\r\n\r\n            let cloned: DataViewObjectDefinitions = {};\r\n\r\n            for (let objectName in original) {\r\n                let originalDefns = original[objectName];\r\n                if (_.isEmpty(originalDefns))\r\n                    continue;\r\n\r\n                let clonedDefns: DataViewObjectDefinition[] = [];\r\n                for (let originalDefn of originalDefns) {\r\n                    clonedDefns.push({\r\n                        properties: cloneProperties(originalDefn.properties),\r\n                        selector: originalDefn.selector,\r\n                    });\r\n                }\r\n                cloned[objectName] = clonedDefns;\r\n            }\r\n\r\n            return cloned;\r\n        }\r\n\r\n        function cloneProperties(original: DataViewObjectPropertyDefinitions): DataViewObjectPropertyDefinitions {\r\n            debug.assertValue(original, 'original');\r\n\r\n            // NOTE: properties are considered atomic, so a shallow clone is appropriate here.\r\n            return _.clone(original);\r\n        }\r\n    }\r\n\r\n    export module DataViewObjectDefinition {\r\n\r\n        export function deleteSingleProperty(\r\n            defn: DataViewObjectDefinition,\r\n            propertyName: string): void {\r\n\r\n            //note: We decided that delete is acceptable here and that we don't need optimization here\r\n            delete defn.properties[propertyName];\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n\r\n    export module DataViewObjectDescriptors {\r\n        /** Attempts to find the format string property.  This can be useful for upgrade and conversion. */\r\n        export function findFormatString(descriptors: DataViewObjectDescriptors): DataViewObjectPropertyIdentifier {\r\n            return findProperty(\r\n                descriptors,\r\n                (propDesc: DataViewObjectPropertyDescriptor) => {\r\n                    let formattingTypeDesc = ValueType.fromDescriptor(propDesc.type).formatting;\r\n                    return formattingTypeDesc && formattingTypeDesc.formatString;\r\n                });\r\n        }\r\n\r\n        /** Attempts to find the filter property.  This can be useful for propagating filters from one visual to others. */\r\n        export function findFilterOutput(descriptors: DataViewObjectDescriptors): DataViewObjectPropertyIdentifier {\r\n            return findProperty(\r\n                descriptors,\r\n                (propDesc: DataViewObjectPropertyDescriptor) => {\r\n                    let propType: StructuralTypeDescriptor = propDesc.type;\r\n                    return propType && !!propType.filter;\r\n                });\r\n        }\r\n\r\n        /** Attempts to find the default value property.  This can be useful for propagating schema default value. */\r\n        export function findDefaultValue(descriptors: DataViewObjectDescriptors): DataViewObjectPropertyIdentifier {\r\n            return findProperty(\r\n                descriptors,\r\n                (propDesc: DataViewObjectPropertyDescriptor) => {\r\n                    let propType: StructuralTypeDescriptor = propDesc.type;\r\n                    return propType && !!propType.expression && propType.expression.defaultValue;\r\n                });\r\n        }\r\n\r\n        function findProperty(descriptors: DataViewObjectDescriptors, propPredicate: (propDesc: DataViewObjectPropertyDescriptor) => boolean): DataViewObjectPropertyIdentifier {\r\n            debug.assertAnyValue(descriptors, 'descriptors');\r\n            debug.assertAnyValue(propPredicate, 'propPredicate');\r\n\r\n            if (!descriptors)\r\n                return;\r\n\r\n            for (let objectName in descriptors) {\r\n                let objPropDescs = descriptors[objectName].properties;\r\n\r\n                for (let propertyName in objPropDescs) {\r\n                    if (propPredicate(objPropDescs[propertyName])) {\r\n                        return {\r\n                            objectName: objectName,\r\n                            propertyName: propertyName,\r\n                        };\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","/*\r\n*  Power BI Visualizations\r\n*\r\n*  Copyright (c) Microsoft Corporation\r\n*  All rights reserved. \r\n *  MIT License\r\n*\r\n*  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n*  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n*  in the Software without restriction, including without limitation the rights\r\n*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n*  copies of the Software, and to permit persons to whom the Software is\r\n*  furnished to do so, subject to the following conditions:\r\n*   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n*   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n*  THE SOFTWARE.\r\n*/\r\n\r\nmodule powerbi.data {\r\n    export interface DataViewObjectDefinitionsByRepetition {\r\n        metadataOnce?: DataViewObjectDefinitionsForSelector;\r\n        userDefined?: DataViewObjectDefinitionsForSelector[];\r\n        metadata?: DataViewObjectDefinitionsForSelector[];\r\n        data: DataViewObjectDefinitionsForSelectorWithRule[];\r\n    }\r\n\r\n    export interface DataViewObjectDefinitionsForSelector {\r\n        selector?: Selector;\r\n        objects: DataViewNamedObjectDefinition[];\r\n    }\r\n\r\n    export interface DataViewObjectDefinitionsForSelectorWithRule extends DataViewObjectDefinitionsForSelector {\r\n        rules?: RuleEvaluation[];\r\n    }\r\n\r\n    export interface DataViewNamedObjectDefinition {\r\n        name: string;\r\n        properties: DataViewObjectPropertyDefinitions;\r\n    }\r\n\r\n    export module DataViewObjectEvaluationUtils {\r\n        export function evaluateDataViewObjects(\r\n            evalContext: IEvalContext,\r\n            objectDescriptors: DataViewObjectDescriptors,\r\n            objectDefns: DataViewNamedObjectDefinition[]): DataViewObjects {\r\n            debug.assertValue(evalContext, 'evalContext');\r\n            debug.assertValue(objectDescriptors, 'objectDescriptors');\r\n            debug.assertValue(objectDefns, 'objectDefns');\r\n\r\n            let objects: DataViewObjects;\r\n\r\n            for (let j = 0, jlen = objectDefns.length; j < jlen; j++) {\r\n                let objectDefinition = objectDefns[j],\r\n                    objectName = objectDefinition.name;\r\n\r\n                let evaluatedObject: DataViewObject = DataViewObjectEvaluator.run(\r\n                    evalContext,\r\n                    objectDescriptors[objectName],\r\n                    objectDefinition.properties);\r\n\r\n                if (!evaluatedObject)\r\n                    continue;\r\n\r\n                if (!objects)\r\n                    objects = {};\r\n\r\n                // NOTE: this currently has last-object-wins semantics.\r\n                objects[objectName] = evaluatedObject;\r\n            }\r\n\r\n            return objects;\r\n        }\r\n\r\n        export function groupObjectsBySelector(objectDefinitions: DataViewObjectDefinitions): DataViewObjectDefinitionsByRepetition {\r\n            debug.assertAnyValue(objectDefinitions, 'objectDefinitions');\r\n\r\n            let grouped: DataViewObjectDefinitionsByRepetition = {\r\n                data: [],\r\n            };\r\n\r\n            if (objectDefinitions) {\r\n                for (let objectName in objectDefinitions) {\r\n                    let objectDefnList = objectDefinitions[objectName];\r\n\r\n                    for (let i = 0, len = objectDefnList.length; i < len; i++) {\r\n                        let objectDefn = objectDefnList[i];\r\n\r\n                        ensureDefinitionListForSelector(grouped, objectDefn.selector).objects.push({\r\n                            name: objectName,\r\n                            properties: objectDefn.properties,\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            return grouped;\r\n        }\r\n\r\n        function ensureDefinitionListForSelector(grouped: DataViewObjectDefinitionsByRepetition, selector: Selector): DataViewObjectDefinitionsForSelector {\r\n            debug.assertValue(grouped, 'grouped');\r\n            debug.assertAnyValue(selector, 'selector');\r\n\r\n            if (!selector) {\r\n                if (!grouped.metadataOnce)\r\n                    grouped.metadataOnce = { objects: [] };\r\n                return grouped.metadataOnce;\r\n            }\r\n\r\n            let groupedObjects: DataViewObjectDefinitionsForSelector[];\r\n            if (selector.data) {\r\n                groupedObjects = grouped.data;\r\n            }\r\n            else if (selector.metadata) {\r\n                if (!grouped.metadata)\r\n                    grouped.metadata = [];\r\n                groupedObjects = grouped.metadata;\r\n            }\r\n            else if (selector.id) {\r\n                if (!grouped.userDefined)\r\n                    grouped.userDefined = [];\r\n                groupedObjects = grouped.userDefined;\r\n            }\r\n\r\n            debug.assert(!!groupedObjects, 'GroupedObjects is not defined.  Indicates malformed selector.');\r\n\r\n            for (let item of groupedObjects) {\r\n                if (Selector.equals(selector, item.selector))\r\n                    return item;\r\n            }\r\n\r\n            let item: DataViewObjectDefinitionsForSelector = {\r\n                selector: selector,\r\n                objects: [],\r\n            };\r\n            groupedObjects.push(item);\r\n\r\n            return item;\r\n        }\r\n\r\n        export function addImplicitObjects(\r\n            objectsForAllSelectors: DataViewObjectDefinitionsByRepetition,\r\n            objectDescriptors: DataViewObjectDescriptors,\r\n            columns: DataViewMetadataColumn[],\r\n            selectTransforms: DataViewSelectTransform[]): void {\r\n            debug.assertValue(objectsForAllSelectors, 'objectsForAllSelectors');\r\n            debug.assertValue(objectDescriptors, 'objectDescriptors');\r\n            debug.assertValue(columns, 'columns');\r\n            debug.assertAnyValue(selectTransforms, 'selectTransforms');\r\n\r\n            if (selectTransforms) {\r\n                addDefaultFormatString(objectsForAllSelectors, objectDescriptors, columns, selectTransforms);\r\n                addDefaultValue(objectsForAllSelectors, objectDescriptors, columns, selectTransforms);\r\n            }\r\n        }\r\n\r\n        function addDefaultFormatString(\r\n            objectsForAllSelectors: DataViewObjectDefinitionsByRepetition,\r\n            objectDescriptors: DataViewObjectDescriptors,\r\n            columns: DataViewMetadataColumn[],\r\n            selectTransforms: DataViewSelectTransform[]): void {\r\n            debug.assertValue(objectsForAllSelectors, 'objectsForAllSelectors');\r\n            debug.assertValue(objectDescriptors, 'objectDescriptors');\r\n            debug.assertValue(columns, 'columns');\r\n            debug.assertValue(selectTransforms, 'selectTransforms');\r\n\r\n            let formatStringProp = DataViewObjectDescriptors.findFormatString(objectDescriptors);\r\n            if (!formatStringProp)\r\n                return;\r\n\r\n            for (let selectIdx = 0, selectLen = selectTransforms.length; selectIdx < selectLen; selectIdx++) {\r\n                let selectTransform = selectTransforms[selectIdx];\r\n                if (!selectTransform)\r\n                    continue;\r\n                debug.assertValue(selectTransform.queryName, 'selectTransform.queryName');\r\n\r\n                applyFormatString(\r\n                    objectsForAllSelectors,\r\n                    formatStringProp,\r\n                    selectTransform.queryName,\r\n                    selectTransform.format || getColumnFormatForIndex(columns, selectIdx));\r\n            }\r\n        }\r\n\r\n        /** Registers properties for default value, if the properties are not explicitly provided. */\r\n        function addDefaultValue (\r\n            objectsForAllSelectors: DataViewObjectDefinitionsByRepetition,\r\n            objectDescriptors: DataViewObjectDescriptors,\r\n            columns: DataViewMetadataColumn[],\r\n            selectTransforms: DataViewSelectTransform[]): void {\r\n            debug.assertValue(objectsForAllSelectors, 'objectsForAllSelectors');\r\n            debug.assertValue(objectDescriptors, 'objectDescriptors');\r\n            debug.assertValue(columns, 'columns');\r\n            debug.assertValue(selectTransforms, 'selectTransforms');\r\n\r\n            let defaultValueProp = DataViewObjectDescriptors.findDefaultValue(objectDescriptors);\r\n            if (!defaultValueProp)\r\n                return;\r\n\r\n            for (let selectTransform of selectTransforms) {\r\n                if (!selectTransform)\r\n                    continue;\r\n                debug.assertValue(selectTransform.queryName, 'selectTransform.queryName');\r\n\r\n                applyDefaultValue(\r\n                    objectsForAllSelectors,\r\n                    defaultValueProp,\r\n                    selectTransform.queryName,\r\n                    selectTransform.defaultValue);\r\n            }\r\n        }\r\n\r\n        function getColumnFormatForIndex(columns: DataViewMetadataColumn[], selectIdx: number): string {\r\n            for (let columnIdx = 0, columnLen = columns.length; columnIdx < columnLen; columnIdx++) {\r\n                let column = columns[columnIdx];\r\n                if (!column || column.index !== selectIdx)\r\n                    continue;\r\n\r\n                return column.format;\r\n            }\r\n        }\r\n\r\n        function applyFormatString(\r\n            objectsForAllSelectors: DataViewObjectDefinitionsByRepetition,\r\n            formatStringProp: DataViewObjectPropertyIdentifier,\r\n            queryName: string,\r\n            formatStringValue: string): void {\r\n            if (!formatStringValue)\r\n                return;\r\n\r\n            // There is a format string specified -- apply it as an object property, if there is not already one specified.\r\n            applyMetadataProperty(\r\n                objectsForAllSelectors,\r\n                formatStringProp,\r\n                { metadata: queryName },\r\n                SQExprBuilder.text(formatStringValue));\r\n        }\r\n\r\n        function applyDefaultValue(\r\n            objectsForAllSelectors: DataViewObjectDefinitionsByRepetition,\r\n            defaultValueProp: DataViewObjectPropertyIdentifier,\r\n            queryName: string,\r\n            defaultValue: DefaultValueDefinition): void {\r\n            if (!defaultValue)\r\n                return;\r\n\r\n            // There is a default value specified -- apply it as an object property, if there is not already one specified.\r\n            applyMetadataProperty(\r\n                objectsForAllSelectors,\r\n                defaultValueProp,\r\n                { metadata: queryName },\r\n                defaultValue);\r\n        }\r\n\r\n        function applyMetadataProperty(\r\n            objectsForAllSelectors: DataViewObjectDefinitionsByRepetition,\r\n            propertyId: DataViewObjectPropertyIdentifier,\r\n            selector: Selector,\r\n            value: DataViewObjectPropertyDefinition): void {\r\n\r\n            let objectDefns: DataViewObjectDefinitionsForSelector[];\r\n            if (selector) {\r\n                let metadataObjects = objectsForAllSelectors.metadata;\r\n                if (!metadataObjects)\r\n                    metadataObjects = objectsForAllSelectors.metadata = [];\r\n                objectDefns = metadataObjects;\r\n            }\r\n            else {\r\n                let metadataOnce = objectsForAllSelectors.metadataOnce;\r\n                if (!metadataOnce)\r\n                    metadataOnce = objectsForAllSelectors.metadataOnce = { selector: selector, objects: [] };\r\n                objectDefns = [metadataOnce];\r\n            }\r\n\r\n            let targetMetadataObject = findWithMatchingSelector(objectDefns, selector);\r\n            let targetObjectDefn: DataViewNamedObjectDefinition;\r\n            if (targetMetadataObject) {\r\n                let targetObjectDefns = targetMetadataObject.objects;\r\n                targetObjectDefn = findExistingObject(targetObjectDefns, propertyId.objectName);\r\n                if (targetObjectDefn) {\r\n                    if (targetObjectDefn.properties[propertyId.propertyName])\r\n                        return;\r\n                }\r\n                else {\r\n                    targetObjectDefn = {\r\n                        name: propertyId.objectName,\r\n                        properties: {},\r\n                    };\r\n                    targetObjectDefns.push(targetObjectDefn);\r\n                }\r\n            }\r\n            else {\r\n                targetObjectDefn = {\r\n                    name: propertyId.objectName,\r\n                    properties: {}\r\n                };\r\n\r\n                objectDefns.push({\r\n                    selector: selector,\r\n                    objects: [targetObjectDefn],\r\n                });\r\n            }\r\n\r\n            targetObjectDefn.properties[propertyId.propertyName] = value;\r\n        }\r\n\r\n        function findWithMatchingSelector(objects: DataViewObjectDefinitionsForSelector[], selector: Selector): DataViewObjectDefinitionsForSelector {\r\n            debug.assertValue(objects, 'objects');\r\n            debug.assertAnyValue(selector, 'selector');\r\n\r\n            for (let i = 0, len = objects.length; i < len; i++) {\r\n                let object = objects[i];\r\n                if (Selector.equals(object.selector, selector))\r\n                    return object;\r\n            }\r\n        }\r\n\r\n        function findExistingObject(objectDefns: DataViewNamedObjectDefinition[], objectName: string): DataViewNamedObjectDefinition {\r\n            debug.assertValue(objectDefns, 'objectDefns');\r\n            debug.assertValue(objectName, 'objectName');\r\n\r\n            for (let i = 0, len = objectDefns.length; i < len; i++) {\r\n                let objectDefn = objectDefns[i];\r\n\r\n                if (objectDefn.name === objectName)\r\n                    return objectDefn;\r\n            }\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n \r\n\r\nmodule powerbi.data {\r\n    /** Responsible for evaluating object property expressions to be applied at various scopes in a DataView. */\r\n    export module DataViewObjectEvaluator {\r\n        const colorValueType: ValueType = ValueType.fromDescriptor({ formatting: { color: true } });\r\n        const numericType: ValueType = ValueType.fromDescriptor({ numeric: true });\r\n        const textType: ValueType = ValueType.fromDescriptor({ text: true });\r\n\r\n        export function run(\r\n            evalContext: IEvalContext,\r\n            objectDescriptor: DataViewObjectDescriptor,\r\n            propertyDefinitions: DataViewObjectPropertyDefinitions): DataViewObject {\r\n            debug.assertValue(evalContext, 'evalContext');\r\n            debug.assertAnyValue(objectDescriptor, 'objectDescriptor');\r\n            debug.assertValue(propertyDefinitions, 'propertyDefinitions');\r\n\r\n            if (!objectDescriptor)\r\n                return;\r\n\r\n            let object: DataViewObject,\r\n                propertyDescriptors = objectDescriptor.properties;\r\n            for (let propertyName in propertyDefinitions) {\r\n                let propertyDefinition = propertyDefinitions[propertyName],\r\n                    propertyDescriptor = propertyDescriptors[propertyName];\r\n\r\n                if (!propertyDescriptor)\r\n                    continue;\r\n\r\n                let propertyValue = evaluateProperty(evalContext, propertyDescriptor, propertyDefinition);\r\n                if (propertyValue === undefined)\r\n                    continue;\r\n\r\n                if (!object)\r\n                    object = {};\r\n                object[propertyName] = propertyValue;\r\n            }\r\n\r\n            return object;\r\n        }\r\n\r\n        /** Note: Exported for testability */\r\n        export function evaluateProperty(\r\n            evalContext: IEvalContext,\r\n            propertyDescriptor: DataViewObjectPropertyDescriptor,\r\n            propertyDefinition: DataViewObjectPropertyDefinition): any {\r\n            debug.assertValue(evalContext, 'evalContext');\r\n            debug.assertValue(propertyDescriptor, 'propertyDescriptor');\r\n            debug.assertValue(propertyDefinition, 'propertyDefinition');\r\n\r\n            let structuralType = <StructuralTypeDescriptor>propertyDescriptor.type;\r\n            if (structuralType && structuralType.expression)\r\n                return propertyDefinition;\r\n\r\n            let value = evaluateValue(evalContext, <any>propertyDefinition, ValueType.fromDescriptor(propertyDescriptor.type));\r\n            if (value !== undefined || (propertyDefinition instanceof RuleEvaluation))\r\n                return value;\r\n\r\n            return evaluateFill(evalContext, <FillDefinition>propertyDefinition, structuralType)\r\n                || evaluateFillRule(evalContext, <FillRuleDefinition>propertyDefinition, structuralType)\r\n                || evaluateImage(evalContext, <ImageDefinition>propertyDefinition, structuralType)\r\n                || evaluateParagraphs(evalContext, <ParagraphsDefinition>propertyDefinition, structuralType)\r\n                || propertyDefinition;\r\n        }\r\n\r\n        function evaluateFill(evalContext: IEvalContext, fillDefn: FillDefinition, type: StructuralTypeDescriptor): Fill {\r\n            let fillType = type.fill;\r\n            if (!fillType)\r\n                return;\r\n\r\n            if (fillType && fillType.solid && fillType.solid.color && fillDefn.solid) {\r\n                return {\r\n                    solid: {\r\n                        color: evaluateValue(evalContext, fillDefn.solid.color, ValueType.fromExtendedType(ExtendedType.Color)),\r\n                    }\r\n                };\r\n            }\r\n        }\r\n\r\n        function evaluateFillRule(evalContext: IEvalContext, fillRuleDefn: FillRuleDefinition, type: StructuralTypeDescriptor): FillRule {\r\n            if (!type.fillRule)\r\n                return;\r\n\r\n            if (fillRuleDefn.linearGradient2) {\r\n                let linearGradient2 = fillRuleDefn.linearGradient2;\r\n                return {\r\n                    linearGradient2: {\r\n                        min: evaluateColorStop(evalContext, linearGradient2.min),\r\n                        max: evaluateColorStop(evalContext, linearGradient2.max),\r\n                    }\r\n                };\r\n            }\r\n\r\n            if (fillRuleDefn.linearGradient3) {\r\n                let linearGradient3 = fillRuleDefn.linearGradient3;\r\n                return {\r\n                    linearGradient3: {\r\n                        min: evaluateColorStop(evalContext, linearGradient3.min),\r\n                        mid: evaluateColorStop(evalContext, linearGradient3.mid),\r\n                        max: evaluateColorStop(evalContext, linearGradient3.max),\r\n                    }\r\n                };\r\n            }\r\n        }\r\n\r\n        function evaluateColorStop(evalContext: IEvalContext, colorStop: RuleColorStopDefinition): RuleColorStop {\r\n            debug.assertValue(evalContext, 'evalContext');\r\n            debug.assertValue(colorStop, 'colorStop');\r\n\r\n            let step: RuleColorStop = {\r\n                color: evaluateValue(evalContext, colorStop.color, colorValueType),\r\n            };\r\n\r\n            let value = evaluateValue(evalContext, colorStop.value, numericType);\r\n            if (value != null)\r\n                step.value = value;\r\n\r\n            return step;\r\n        }\r\n\r\n        function evaluateImage(evalContext: IEvalContext, definition: ImageDefinition, type: StructuralTypeDescriptor): ImageValue {\r\n            debug.assertValue(evalContext, 'evalContext');\r\n            debug.assertAnyValue(definition, 'definition');\r\n            debug.assertValue(type, 'type');\r\n\r\n            if (!type.image || !definition)\r\n                return;\r\n\r\n            let value: ImageValue = {\r\n                name: evaluateValue(evalContext, definition.name, textType),\r\n                url: evaluateValue(evalContext, definition.url, ValueType.fromDescriptor(ImageDefinition.urlType)),\r\n            };\r\n\r\n            if (definition.scaling)\r\n                value.scaling = evaluateValue(evalContext, definition.scaling, textType);\r\n\r\n            return value;\r\n        }\r\n\r\n        function evaluateParagraphs(evalContext: IEvalContext, definition: ParagraphsDefinition, type: StructuralTypeDescriptor): Paragraphs {\r\n            debug.assertValue(evalContext, 'evalContext');\r\n            debug.assertAnyValue(definition, 'definition');\r\n            debug.assertValue(type, 'type');\r\n\r\n            if (!type.paragraphs || !definition)\r\n                return;\r\n\r\n            return evaluateArrayCopyOnChange(evalContext, definition, evaluateParagraph);\r\n        }\r\n\r\n        function evaluateParagraph(evalContext: IEvalContext, definition: ParagraphDefinition): Paragraph {\r\n            debug.assertValue(evalContext, 'evalContext');\r\n            debug.assertValue(definition, 'definition');\r\n\r\n            let evaluated: Paragraph;\r\n\r\n            let definitionTextRuns = definition.textRuns;\r\n            let evaluatedTextRuns: TextRun[] = evaluateArrayCopyOnChange(evalContext, definitionTextRuns, evaluateTextRun);\r\n            if (definitionTextRuns !== evaluatedTextRuns) {\r\n                evaluated = _.clone(<any>definition);\r\n                evaluated.textRuns = evaluatedTextRuns;\r\n            }\r\n\r\n            return evaluated || <Paragraph>definition;\r\n        }\r\n\r\n        function evaluateTextRun(evalContext: IEvalContext, definition: TextRunDefinition): TextRun {\r\n            debug.assertValue(evalContext, 'evalContext');\r\n            debug.assertValue(definition, 'definition');\r\n\r\n            let evaluated: TextRun;\r\n\r\n            let definitionValue = definition.value;\r\n            let evaluatedValue = evaluateValue(evalContext, <any> definitionValue, textType);\r\n            if (evaluatedValue !== undefined) {\r\n                evaluated = _.clone(<any>definition);\r\n                evaluated.value = evaluatedValue;\r\n            }\r\n\r\n            return evaluated || <TextRun>definition;\r\n        }\r\n\r\n        /**\r\n         * Evaluates an array, and lazily copies on write whenever the evaluator function returns something\r\n         * other than the input to it.\r\n         */\r\n        function evaluateArrayCopyOnChange<TDefinition, TEvaluated>(\r\n            evalContext: IEvalContext,\r\n            definitions: TDefinition[],\r\n            evaluator: (ctx: IEvalContext, defn: TDefinition) => TEvaluated): TEvaluated[] {\r\n            debug.assertValue(evalContext, 'evalContext');\r\n            debug.assertValue(definitions, 'definitions');\r\n            debug.assertValue(evaluator, 'evaluator');\r\n\r\n            let evaluatedValues: TEvaluated[];\r\n\r\n            for (let i = 0, len = definitions.length; i < len; i++) {\r\n                let definition = definitions[i];\r\n                let evaluated: TEvaluated = evaluator(evalContext, definition);\r\n\r\n                // NOTE: the any casts here are necessary due to the compiler not knowing the relationship\r\n                // between TEvaluated & TDefinition\r\n                if (!evaluatedValues && <any>definition !== evaluated) {\r\n                    evaluatedValues = _.take(<TEvaluated[]><any>definitions, i);\r\n                }\r\n\r\n                if (evaluatedValues) {\r\n                    evaluatedValues.push(evaluated);\r\n                }\r\n            }\r\n\r\n            return evaluatedValues || <TEvaluated[]><any>definitions;\r\n        }\r\n\r\n        function evaluateValue(evalContext: IEvalContext, definition: SQExpr | RuleEvaluation, valueType: ValueType): any {\r\n            if (definition instanceof SQExpr)\r\n                return ExpressionEvaluator.evaluate(<SQExpr>definition, evalContext);\r\n\r\n            if (definition instanceof RuleEvaluation)\r\n                return (<RuleEvaluation>definition).evaluate(evalContext);\r\n        }\r\n\r\n        /** Responsible for evaluating SQExprs into values. */\r\n        class ExpressionEvaluator extends DefaultSQExprVisitorWithArg<PrimitiveValue, IEvalContext> {\r\n            private static instance: ExpressionEvaluator = new ExpressionEvaluator();\r\n\r\n            public static evaluate(expr: SQExpr, evalContext: IEvalContext): PrimitiveValue {\r\n                if (expr == null)\r\n                    return;\r\n\r\n                return expr.accept(ExpressionEvaluator.instance, evalContext);\r\n            }\r\n\r\n            public visitColumnRef(expr: SQColumnRefExpr, evalContext: IEvalContext): PrimitiveValue {\r\n                return evalContext.getExprValue(expr);\r\n            }\r\n\r\n            public visitConstant(expr: SQConstantExpr, evalContext: IEvalContext): PrimitiveValue {\r\n                return expr.value;\r\n            }\r\n\r\n            public visitMeasureRef(expr: SQMeasureRefExpr, evalContext: IEvalContext): PrimitiveValue {\r\n                return evalContext.getExprValue(expr);\r\n            }\r\n\r\n            public visitAggr(expr: SQAggregationExpr, evalContext: IEvalContext): PrimitiveValue {\r\n                return evalContext.getExprValue(expr);\r\n            }\r\n        }\r\n    }\r\n} \r\n","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    import inherit = Prototype.inherit;\r\n\r\n    export module DataViewPivotCategorical {\r\n        /**\r\n         * Pivots categories in a categorical DataView into valueGroupings.\r\n         * This is akin to a mathematical matrix transpose.\r\n         */\r\n        export function apply(dataView: DataView): DataView {\r\n            debug.assertValue(dataView, 'dataView');\r\n\r\n            let categorical = dataView.categorical;\r\n            if (!categorical)\r\n                return null;\r\n\r\n            let categories = categorical.categories;\r\n            if (!categories || categories.length !== 1)\r\n                return null;\r\n\r\n            let values = categorical.values;\r\n            if (_.isEmpty(values) || values.source)\r\n                return null;\r\n\r\n            let category = categories[0],\r\n                categoryIdentities = category.identity,\r\n                categoryValues = category.values,\r\n                pivotedColumns: DataViewMetadataColumn[] = [],\r\n                pivotedValues: DataViewValueColumn[] = [];\r\n            for (let rowIdx = 0, rowCount = categoryValues.length; rowIdx < rowCount; rowIdx++) {\r\n                let categoryValue = categoryValues[rowIdx],\r\n                    categoryIdentity = categoryIdentities[rowIdx];\r\n                for (let colIdx = 0, colCount = values.length; colIdx < colCount; colIdx++) {\r\n                    let value = values[colIdx],\r\n                        pivotedColumn = inherit(value.source);\r\n\r\n                    // A value has a series group, which is not implemented for pivoting -- just give up.\r\n                    if (value.identity)\r\n                        return null;\r\n\r\n                    pivotedColumn.groupName = categoryValue;\r\n                    let pivotedValue: DataViewValueColumn = {\r\n                        source: pivotedColumn,\r\n                        values: [value.values[rowIdx]],\r\n                        identity: categoryIdentity,\r\n                        min: value.min,\r\n                        max: value.max,\r\n                        subtotal: value.subtotal\r\n                    };\r\n\r\n                    let highlights = value.highlights;\r\n                    if (highlights) {\r\n                        pivotedValue.highlights = [highlights[rowIdx]];\r\n                    }\r\n\r\n                    pivotedColumns.push(pivotedColumn);\r\n                    pivotedValues.push(pivotedValue);\r\n                }\r\n            }\r\n\r\n            let pivotedMetadata = inherit(dataView.metadata);\r\n            pivotedMetadata.columns = pivotedColumns;\r\n\r\n            values = DataViewTransform.createValueColumns(pivotedValues, <SQExpr[]>category.identityFields, category.source);\r\n            return {\r\n                metadata: pivotedMetadata,\r\n                categorical: {\r\n                    values: values,\r\n                },\r\n                matrix: dataView.matrix\r\n            };\r\n        }\r\n    }\r\n} ","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    export module DataViewPivotMatrix {\r\n        /** Pivots row hierarchy members in a matrix DataView into column hierarchy. */\r\n        export function apply(dataViewMatrix: DataViewMatrix, context: MatrixTransformationContext): void {\r\n            debug.assertValue(dataViewMatrix, 'dataViewMatrix');\r\n\r\n            if (!context.columnHierarchyRewritten)\r\n                dataViewMatrix.columns = Prototype.inherit(dataViewMatrix.columns);\r\n            let columns = dataViewMatrix.columns;\r\n\r\n            if (!context.rowHierarchyRewritten)\r\n                dataViewMatrix.rows = Prototype.inherit(dataViewMatrix.rows);\r\n            let rows = dataViewMatrix.rows;\r\n\r\n            if (columns.levels.length > 1)\r\n                return;\r\n\r\n            let pivotedRowNode: DataViewMatrixNode = {\r\n                level: 0\r\n            };\r\n\r\n            let columnLeafNodes: DataViewMatrixNode[] = columns.root.children;\r\n            let measureCount = columnLeafNodes.length;\r\n\r\n            // Notes related to VSTS 6999369: The level value of Measure Header nodes is not necessarily its parent node's level + 1.\r\n            // In particular, the Measure Header column nodes directly under the Grand Total node at level 0 (i.e. _.last(pivotResultMatrix.columns.root.children))\r\n            // will have level === (pivotResultMatrix.columns.levels.length - 1), which will be greater than the Grand Total node's 'level + 1' \r\n            // in a matrix with 2+ column fields and 2+ measure fields.\r\n            // In this code, all row levels will get pivoted over to the columns hierarchy, hence the level of any Measure Header nodes in the pivot result\r\n            // is just (1 + the level of the deepest row node's level), which === rows.levels.length.\r\n            let pivotResultMeasureHeaderLevel = rows.levels.length;\r\n\r\n            if (measureCount > 0) {\r\n                let index = 0;\r\n                let callback = function (node: DataViewMatrixNode) {\r\n                    // Collect values and remove them from row leaves\r\n                    if (node.values) {\r\n                        if (!pivotedRowNode.values)\r\n                            pivotedRowNode.values = {};\r\n\r\n                        for (let i = 0; i < measureCount; i++)\r\n                            pivotedRowNode.values[index++] = node.values[i];\r\n\r\n                        delete node.values;\r\n                    }\r\n\r\n                    // Create measure headers if there are more than one measures\r\n                    if (measureCount > 1) {\r\n                        if (!node.children)\r\n                            node.children = [];\r\n\r\n                        for (let j = 0; j < measureCount; j++) {\r\n                            let measureHeaderLeaf: DataViewMatrixNode = { level: pivotResultMeasureHeaderLevel };\r\n\r\n                            // Copy levelSourceIndex from columnLeafNodes (as they might have been reordered)\r\n                            let columnLeafNode = columnLeafNodes[j];\r\n                            measureHeaderLeaf.levelSourceIndex = columnLeafNode.levelSourceIndex;\r\n\r\n                            if (node.isSubtotal)\r\n                                measureHeaderLeaf.isSubtotal = true;\r\n\r\n                            node.children.push(measureHeaderLeaf);\r\n                        }\r\n                    }\r\n                };\r\n\r\n                if (context.hierarchyTreesRewritten) {\r\n                    forEachLeaf(rows.root, callback);\r\n                }\r\n                else {\r\n                    dataViewMatrix.columns.root = cloneTreeExecuteOnLeaf(rows.root, callback);\r\n                }\r\n            }\r\n            else {\r\n                if (!context.hierarchyTreesRewritten) {\r\n                    dataViewMatrix.columns.root = cloneTree(rows.root);\r\n                }\r\n            }\r\n\r\n            if (measureCount > 1) {\r\n                // Keep measure headers, but move them to the innermost level\r\n                let level: DataViewHierarchyLevel = { sources: columns.levels[0].sources };\r\n                rows.levels.push(level);\r\n\r\n                columns.levels.length = 0;\r\n            }\r\n\r\n            if (context.hierarchyTreesRewritten) {\r\n                dataViewMatrix.columns.root = rows.root;\r\n                dataViewMatrix.rows.root = {\r\n                    children: [pivotedRowNode]\r\n                };\r\n            }\r\n            else {\r\n                let updatedRowRoot = Prototype.inherit(dataViewMatrix.rows.root);\r\n                updatedRowRoot.children = [pivotedRowNode];\r\n                dataViewMatrix.rows.root = updatedRowRoot;\r\n            }\r\n\r\n            dataViewMatrix.columns.levels = rows.levels;\r\n            dataViewMatrix.rows.levels = [];\r\n        }\r\n\r\n        function forEachLeaf(root: DataViewMatrixNode, callback: (node: DataViewMatrixNode) => void): void {\r\n            let children = root.children;\r\n            if (children && children.length > 0) {\r\n                for (let i = 0, ilen = children.length; i < ilen; i++)\r\n                    forEachLeaf(children[i], callback);\r\n\r\n                return;\r\n            }\r\n\r\n            callback(root);\r\n        }\r\n\r\n        export function cloneTree(node: DataViewMatrixNode): DataViewMatrixNode {\r\n            return cloneTreeExecuteOnLeaf(node);\r\n        }\r\n\r\n        export function cloneTreeExecuteOnLeaf(node: DataViewMatrixNode, callback?: (node: DataViewMatrixNode) => void): DataViewMatrixNode {\r\n            let updatedNode = Prototype.inherit(node);\r\n\r\n            let children = node.children;\r\n            if (children && children.length > 0) {\r\n                let newChildren: DataViewTreeNode[] = [];\r\n\r\n                for (let i = 0, ilen = children.length; i < ilen; i++) {\r\n                    let updatedChild = cloneTreeExecuteOnLeaf(children[i], callback);\r\n                    newChildren.push(updatedChild);\r\n                }\r\n                updatedNode.children = newChildren;\r\n            }\r\n            else {\r\n                if (callback)\r\n                    callback(updatedNode);\r\n            }\r\n\r\n            return updatedNode;\r\n        }\r\n    }\r\n} ","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    export module DataViewSelfCrossJoin {\r\n        /**\r\n         * Returns a new DataView based on the original, with a single DataViewCategorical category that is \"cross joined\"\r\n         * to itself as a value grouping.\r\n         * This is the mathematical equivalent of taking an array and turning it into an identity matrix.\r\n         */\r\n        export function apply(dataView: DataView): DataView {\r\n            debug.assertValue(dataView, 'dataView');\r\n\r\n            if (!dataView.categorical)\r\n                return;\r\n            let dataViewCategorical = dataView.categorical;\r\n            if (!dataViewCategorical.categories || dataViewCategorical.categories.length !== 1)\r\n                return;\r\n            if (dataViewCategorical.values && dataViewCategorical.values.source)\r\n                return;\r\n\r\n            return applyCategorical(dataView.metadata, dataViewCategorical);\r\n        }\r\n\r\n        function applyCategorical(dataViewMetadata: DataViewMetadata, dataViewCategorical: DataViewCategorical): DataView {\r\n            debug.assertValue(dataViewMetadata, 'dataViewMetadata');\r\n            debug.assertValue(dataViewCategorical, 'dataViewCategorical');\r\n            debug.assertValue(dataViewCategorical.categories, 'dataViewCategorical.categories');\r\n\r\n            let category = dataViewCategorical.categories[0],\r\n                categoryValues = category.values,\r\n                categoryLength = categoryValues.length;\r\n\r\n            if (categoryLength === 0)\r\n                return;\r\n\r\n            let valuesArray: DataViewValueColumn[] = dataViewCategorical.values\r\n                ? dataViewCategorical.values.grouped()[0].values\r\n                : [];\r\n            let transformedDataView = createCategoricalDataViewBuilder()\r\n                .withCategories(dataViewCategorical.categories)\r\n                .withGroupedValues(createGroupedValues(category, categoryValues, categoryLength, valuesArray))\r\n                .build();\r\n\r\n            dataViewMetadata = Prototype.inherit(dataViewMetadata);\r\n            dataViewMetadata.columns = transformedDataView.metadata.columns;\r\n\r\n            return {\r\n                metadata: dataViewMetadata,\r\n                categorical: transformedDataView.categorical,\r\n            };\r\n        }\r\n\r\n        function createGroupedValues(\r\n            category: DataViewCategoryColumn,\r\n            categoryValues: any[],\r\n            categoryLength: number,\r\n            valuesArray: DataViewValueColumn[]): DataViewBuilderGroupedValuesOptions {\r\n            debug.assertValue(category, 'category');\r\n            debug.assertValue(categoryValues, 'categoryValues');\r\n            debug.assertValue(categoryLength, 'categoryLength');\r\n            debug.assertValue(valuesArray, 'valuesArray');\r\n\r\n            let nullValuesArray: any[] = createNullValues(categoryLength),\r\n                valuesArrayLen = valuesArray.length,\r\n                seriesData: DataViewBuilderSeriesData[][] = [];\r\n\r\n            for (let i = 0; i < categoryLength; i++) {\r\n                let seriesDataItem: DataViewBuilderSeriesData[] = [];\r\n\r\n                for (let j = 0; j < valuesArrayLen; j++) {\r\n                    let originalValueColumn = valuesArray[j],\r\n                        originalHighlightValues = originalValueColumn.highlights;\r\n\r\n                    let seriesDataItemCategory: DataViewBuilderSeriesData = {\r\n                        values: inheritArrayWithValue(nullValuesArray, originalValueColumn.values, i),\r\n                    };\r\n                    if (originalHighlightValues)\r\n                        seriesDataItemCategory.highlights = inheritArrayWithValue(nullValuesArray, originalHighlightValues, i);\r\n\r\n                    seriesDataItem.push(seriesDataItemCategory);\r\n                }\r\n\r\n                seriesData.push(seriesDataItem);\r\n            }\r\n\r\n            return {\r\n                groupColumn: {\r\n                    source: category.source,\r\n                    identityFrom: { fields: <SQExpr[]>category.identityFields, identities: category.identity },\r\n                    values: category.values,\r\n                },\r\n                valueColumns: _.map(valuesArray, v => <DataViewBuilderColumnOptions>{ source: v.source }),\r\n                data: seriesData,\r\n            };\r\n        }\r\n    }\r\n\r\n    function createNullValues(length: number): any[] {\r\n        debug.assertValue(length, 'length');\r\n\r\n        let array = new Array(length);\r\n        for (let i = 0; i < length; i++)\r\n            array[i] = null;\r\n        return array;\r\n    }\r\n\r\n    function inheritArrayWithValue(nullValues: any[], original: any[], index: number): any[] {\r\n        let inherited = Prototype.inherit(nullValues);\r\n        inherited[index] = original[index];\r\n\r\n        return inherited;\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved.\r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *\r\n *  The above copyright notice and this permission notice shall be included in\r\n *  all copies or substantial portions of the Software.\r\n *\r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    import ArrayExtensions = jsCommon.ArrayExtensions;\r\n    import DataShapeBindingDataReduction = powerbi.data.DataShapeBindingDataReduction;\r\n    import RoleKindByQueryRef = DataViewAnalysis.RoleKindByQueryRef;\r\n\r\n    export module DataViewPivotCategoricalToPrimaryGroups {\r\n\r\n        /**\r\n         * If mapping requests cross axis data reduction and the binding has secondary grouping, mutates the binding to\r\n         * pivot the secondary before the primary.\r\n         */\r\n        export function pivotBinding(binding: DataShapeBinding, allMappings: CompiledDataViewMapping[], finalMapping: CompiledDataViewMapping, defaultDataVolume: number): void {\r\n            // unpivot is inferred from result in DataViewTransform.apply but it does not have the\r\n            // compiled mappings available, let alone the merged mapping, only the original\r\n            // DataViewMappings. to keep that inference easy, only apply pivot when there's\r\n            // only one matching mapping\r\n            if (!allMappings || allMappings.length !== 1)\r\n                return;\r\n\r\n            if (!finalMapping.categorical || !finalMapping.categorical.dataReductionAlgorithm)\r\n                return;\r\n\r\n            if (!binding)\r\n                return;\r\n\r\n            if (!canPivotCategorical(binding, finalMapping))\r\n                return;\r\n\r\n            // pivot secondary onto front of primary\r\n            binding.Primary.Groupings = [binding.Secondary.Groupings[0], binding.Primary.Groupings[0]];\r\n\r\n            binding.Secondary = undefined;\r\n        \r\n            // set primary to pivot reduction\r\n            binding.DataReduction = {\r\n                Primary: DataShapeBindingDataReduction.createFrom(finalMapping.categorical.dataReductionAlgorithm),\r\n                DataVolume: finalMapping.categorical.dataVolume || defaultDataVolume,\r\n            };\r\n        }\r\n\r\n        /** narrowly targets scatter chart scenario for now to keep code simple */\r\n        function isPivotableAxis(axis: powerbi.data.DataShapeBindingAxis): boolean {\r\n            return axis\r\n                && axis.Groupings\r\n                && axis.Groupings.length === 1\r\n                && !_.isEmpty(axis.Groupings[0].Projections)\r\n                && !axis.Groupings[0].Subtotal\r\n                && _.isEmpty(axis.Groupings[0].SuppressedProjections);\r\n        }\r\n\r\n        function canPivotCategorical(binding: DataShapeBinding, mapping: CompiledDataViewMapping): boolean {\r\n            if (!isPivotableAxis(binding.Primary))\r\n                return false;\r\n            if (!isPivotableAxis(binding.Secondary) || binding.Secondary.Groupings[0].Projections.length !== 1)\r\n                return false;\r\n\r\n            // don't pivot if either axis has a data reduction\r\n            if (binding.DataReduction && (binding.DataReduction.Primary || binding.DataReduction.Secondary))\r\n                return false;\r\n\r\n            return true;\r\n        }\r\n\r\n        export function unpivotResult(oldDataView: DataView, selects: DataViewSelectTransform[], dataViewMappings: DataViewMapping[], projectionActiveItems: DataViewProjectionActiveItems): DataView {\r\n            if (!inferUnpivotTransform(selects, dataViewMappings, oldDataView, projectionActiveItems))\r\n                return oldDataView;\r\n\r\n            // This returns a subsetted version of the DataView rather than using prototypal inheritance because\r\n            // any dataviews in the old one (including ones invented after this code is written) will correspond\r\n            // to a pivoted query result and therefore will be in the wrong shape for the unpivoted query the\r\n            // querying code made.\r\n            let newDataView: DataView = {\r\n                metadata: {\r\n                    columns: ArrayExtensions.copy(oldDataView.metadata.columns),\r\n                },\r\n            };\r\n            \r\n            // preserve view types that aren't affected by pivoting\r\n            if (oldDataView.single)\r\n                newDataView.single = oldDataView.single;\r\n            if (oldDataView.table)\r\n                newDataView.table = oldDataView.table;\r\n\r\n            // other views are derived from matrix\r\n            if (oldDataView.matrix) {\r\n                let newDataViewMatrix = unpivotMatrix(oldDataView.matrix);\r\n\r\n                // categorical only if there's data\r\n                if (!_.isEmpty(newDataViewMatrix.valueSources))\r\n                    newDataView.categorical = categoricalFromUnpivotedMatrix(newDataViewMatrix, newDataView.metadata.columns);\r\n            }\r\n\r\n            return newDataView;\r\n        }\r\n\r\n        /** Get roles from a role mapping */\r\n        function getRolesInRoleMapping(role: (roleName: string) => void, roleMapping: DataViewRoleBindMapping | DataViewRoleForMapping | DataViewGroupedRoleMapping | DataViewListRoleMapping): void {\r\n            if (!roleMapping)\r\n                return;\r\n\r\n            if ((<DataViewRoleBindMapping>roleMapping).bind)\r\n                role((<DataViewRoleBindMapping>roleMapping).bind.to);\r\n\r\n            if ((<DataViewRoleForMapping>roleMapping).for)\r\n                role((<DataViewRoleForMapping>roleMapping).for.in);\r\n\r\n            if ((<DataViewGroupedRoleMapping>roleMapping).group) {\r\n                role((<DataViewGroupedRoleMapping>roleMapping).group.by);\r\n                getRolesInRoleMappings(role, (<DataViewGroupedRoleMapping>roleMapping).group.select);\r\n            }\r\n\r\n            getRolesInRoleMappings(role, (<DataViewListRoleMapping>roleMapping).select);\r\n        }\r\n\r\n        /** Get roles from a list of role mappings */\r\n        function getRolesInRoleMappings(role: (roleName: string) => void, roleMappings: (DataViewRoleBindMapping | DataViewRoleForMapping)[]): void {\r\n            if (!_.isEmpty(roleMappings)) {\r\n                for (let roleMapping of roleMappings)\r\n                    getRolesInRoleMapping(role, roleMapping);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Infer from the query result and the visual mappings whether the query was pivoted.\r\n         * Narrowly targets scatter chart scenario for now to keep code simple\r\n         */\r\n        function inferUnpivotTransform(selects: DataViewSelectTransform[], dataViewMappings: DataViewMapping[], dataView: DataView, projectionActiveItems: DataViewProjectionActiveItems): boolean {\r\n            if (!selects || !dataViewMappings || !dataView)\r\n                return false;\r\n\r\n            // select applicable mappings based on select roles\r\n            let roleKinds: RoleKindByQueryRef = DataViewSelectTransform.createRoleKindFromMetadata(selects, dataView.metadata);\r\n            let projections: QueryProjectionsByRole = DataViewSelectTransform.projectionsFromSelects(selects, projectionActiveItems);\r\n            dataViewMappings = DataViewAnalysis.chooseDataViewMappings(projections, dataViewMappings, roleKinds).supportedMappings;\r\n\r\n            // NOTE: limiting to simple situation that handles scatter for now - see the other side in canPivotCategorical\r\n            if (!dataViewMappings || dataViewMappings.length !== 1)\r\n                return false;\r\n\r\n            let categoricalMapping = dataViewMappings[0].categorical;\r\n            if (!categoricalMapping)\r\n                return false;\r\n\r\n            // pivoted query will have produced a matrix\r\n            let matrixDataview = dataView.matrix;\r\n            if (!matrixDataview)\r\n                return false;\r\n\r\n            // matrix must have two levels of grouping\r\n            if (!matrixDataview.rows || !matrixDataview.rows.levels || matrixDataview.rows.levels.length !== 2)\r\n                return false;\r\n\r\n            // get category and value grouping roles\r\n            let categoryGroups: string[] = [];\r\n            let valueGroups: string[] = [];\r\n\r\n            let addGroupingRole = (roleName: string, groups: string[]) => {\r\n                let roleProjections: QueryProjectionCollection = projections[roleName];\r\n                if (!roleProjections)\r\n                    return;\r\n\r\n                for (let roleProjection of roleProjections.all()) {\r\n                    if (roleKinds[roleProjection.queryRef] === VisualDataRoleKind.Grouping)\r\n                        groups.push(roleProjection.queryRef);\r\n                }\r\n            };\r\n\r\n            getRolesInRoleMapping((roleName: string) => { addGroupingRole(roleName, categoryGroups); }, categoricalMapping.categories);\r\n            getRolesInRoleMapping((roleName: string) => { addGroupingRole(roleName, valueGroups); }, categoricalMapping.values);\r\n\r\n            // need both for pivot to have been done\r\n            if (_.isEmpty(categoryGroups) || _.isEmpty(valueGroups))\r\n                return false;\r\n\r\n            // if there was a pivot, there won't be any measures left in the columns\r\n            for (let level of matrixDataview.columns.levels) {\r\n                for (let source of level.sources) {\r\n                    if (!source.isMeasure)\r\n                        return false;\r\n                }\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        interface GroupValue {\r\n            identity: DataViewScopeIdentity;\r\n            value: any;\r\n        }\r\n\r\n        interface DataViewMatrixNodeValues {\r\n            [id: number]: DataViewMatrixNodeValue;\r\n        }\r\n\r\n        /**\r\n         * matrix will have two groupings in the rows, outer (series) and inner (categories), and none in the columns.\r\n         * this function changes that so that the categories become the rows and the series the columns.\r\n         */\r\n        function unpivotMatrix(oldMatrix: DataViewMatrix): DataViewMatrix {\r\n            let oldRows = oldMatrix.rows;\r\n            let oldRoot = oldRows.root;\r\n            let oldChildren = oldRoot.children;\r\n\r\n            // series are the outer grouping\r\n            let series: GroupValue[] = [];\r\n            let seriesIdLevel = oldRows.levels[0];\r\n            let seriesIdFields = oldRoot.childIdentityFields;\r\n\r\n            // categories are the inner grouping. \r\n            let categoryIndex: _.Dictionary<number> = {};\r\n            let categories: GroupValue[] = [];\r\n            let categoryIdLevel = oldRows.levels[1];\r\n            let categoryIdFields = _.isEmpty(oldChildren) ? undefined : oldChildren[0].childIdentityFields;\r\n\r\n            let measureCount = oldMatrix.valueSources.length;\r\n\r\n            // within each series value, the category list may not be complete so cannot simply use the inner loop index\r\n            // to reference it.\r\n            let findCategory = (identity: DataViewScopeIdentity) => {\r\n                let index = categoryIndex[identity.key];\r\n\r\n                debug.assert(index !== undefined, \"findcat() !== undefined\");\r\n\r\n                return index;\r\n            };\r\n\r\n            // collect series and categories from the row hierarchy\r\n            if (oldChildren) {\r\n                let addCategory = (identity: DataViewScopeIdentity, value: any) => {\r\n                    let key = identity.key;\r\n                    let index = categoryIndex[key];\r\n                    if (index === undefined) {\r\n                        index = categories.length;\r\n                        categoryIndex[key] = index;\r\n                        categories.push({ value: value, identity: identity });\r\n                    }\r\n                };\r\n\r\n                for (let seriesNode of oldChildren) {\r\n                    series.push({ value: seriesNode.value, identity: seriesNode.identity });\r\n\r\n                    for (let categoryNode of seriesNode.children) {\r\n                        addCategory(categoryNode.identity, categoryNode.value);\r\n                    }\r\n                }\r\n            }\r\n            \r\n            // extract intersection values from pivoted matrix\r\n            // values will be indexed by categories then series\r\n            let matrixValues: DataViewMatrixNodeValues[][] = new Array<DataViewMatrixNodeValues[]>(categories.length);\r\n            for (let j = 0; j < series.length; ++j) { // outer is series\r\n                let seriesNode = oldChildren[j];\r\n                for (let categoryNode of seriesNode.children) { // inner is categories but maybe a subset\r\n                    let i = findCategory(categoryNode.identity); // must lookup actual category index\r\n\r\n                    if (!matrixValues[i])\r\n                        matrixValues[i] = new Array<DataViewMatrixNodeValues>(series.length);\r\n\r\n                    matrixValues[i][j] = categoryNode.values;\r\n                }\r\n            }\r\n\r\n            // unpivoted matrix columns are the series\r\n            let newColumns: DataViewHierarchy = {\r\n                root: {\r\n                    children: _.map(series, (s: any) => {\r\n                        return {\r\n                            level: 0,\r\n                            value: s.value,\r\n                            identity: s.identity,\r\n                        };\r\n                    }),\r\n                    childIdentityFields: seriesIdFields,\r\n                },\r\n                levels: [\r\n                    seriesIdLevel,\r\n                    \r\n                ],\r\n            };\r\n            if (measureCount > 0) {\r\n                let newColChildren: DataViewMatrixNode[] = _.map(oldMatrix.columns.root.children, (srcnode: DataViewMatrixNode) => {\r\n                    let dstnode: DataViewMatrixNode = { level: 1 };\r\n                    if (srcnode.levelSourceIndex)\r\n                        dstnode.levelSourceIndex = srcnode.levelSourceIndex;\r\n                    return dstnode;\r\n                });\r\n\r\n                for (let i = 0; i < newColumns.root.children.length; ++i)\r\n                    newColumns.root.children[i].children = newColChildren;\r\n\r\n                newColumns.levels.push(oldMatrix.columns.levels[0]);\r\n            }\r\n\r\n            // unpivoted rows are the categories\r\n            let newRows: DataViewHierarchy = {\r\n                root: {\r\n                    children: _.map(categories, (s: GroupValue) => { return { level: 0, value: s.value, identity: s.identity }; }),\r\n                    childIdentityFields: categoryIdFields,\r\n                },\r\n                levels: [\r\n                    categoryIdLevel,\r\n                ],\r\n            };\r\n\r\n            // put values into rows\r\n            if (measureCount > 0) {\r\n                for (let i = 0; i < categories.length; ++i) {\r\n                    let row = newRows.root.children[i];\r\n                    let rowValues: DataViewMatrixNodeValues = {};\r\n\r\n                    for (let j = 0; j < series.length; ++j) {\r\n                        let mvalues = matrixValues[i][j];\r\n                        for (let k = 0; k < measureCount; ++k) {\r\n                            let l = j * measureCount + k;\r\n                            rowValues[l] = !mvalues\r\n                                ? ( k === 0 ? { value: null } : { value: null, valueSourceIndex: k } )\r\n                                : mvalues[k];\r\n                        }\r\n                    }\r\n\r\n                    row.values = rowValues;\r\n                }\r\n            }\r\n\r\n            let newMatrix: DataViewMatrix = {\r\n                rows: newRows,\r\n                columns: newColumns,\r\n                valueSources: oldMatrix.valueSources,\r\n            };\r\n\r\n            return newMatrix;\r\n        }\r\n\r\n        /** build a categorical data view from an unpivoted matrix. */\r\n        function categoricalFromUnpivotedMatrix(matrix: DataViewMatrix, columnMetadata: DataViewMetadataColumn[]): DataViewCategorical {\r\n            let seriesCount = matrix.columns.root.children.length;\r\n            let measureMetadata = matrix.valueSources;\r\n            let measureCount = measureMetadata.length;\r\n\r\n            // create categories from rows\r\n            let categories: DataViewCategoryColumn[] = [\r\n                {\r\n                    source: matrix.rows.levels[0].sources[0],\r\n                    values: _.map(matrix.rows.root.children, x => x.value),\r\n                    identity: _.map(matrix.rows.root.children, x => x.identity),\r\n                    identityFields: matrix.rows.root.childIdentityFields,\r\n                },\r\n            ];\r\n\r\n            // create grouped values\r\n            let groups: DataViewValueColumnGroup[] = [];\r\n            for (let j = 0; j < seriesCount; ++j) {\r\n                let seriesColumn = matrix.columns.root.children[j];\r\n                let group: DataViewValueColumnGroup = {\r\n                    values: [],\r\n                    identity: seriesColumn.identity,\r\n                    name: seriesColumn.value || null,\r\n                };\r\n\r\n                groups.push(group);\r\n\r\n                for (let k = 0; k < measureCount; ++k) {\r\n                    let valueColumnMetadataSrc = measureMetadata[k];\r\n                    let valueColumnMetadataDst: DataViewMetadataColumn = <DataViewMetadataColumn>{};\r\n                    for (let key in valueColumnMetadataSrc)\r\n                        valueColumnMetadataDst[key] = valueColumnMetadataSrc[key];\r\n                    valueColumnMetadataDst.groupName = group.name;\r\n\r\n                    columnMetadata.push(valueColumnMetadataDst);\r\n\r\n                    let valueColumn: DataViewValueColumn = {\r\n                        source: valueColumnMetadataDst,\r\n                        values: [],\r\n                        identity: group.identity,\r\n                    };\r\n\r\n                    group.values.push(valueColumn);\r\n\r\n                    // grab measure values in the group from across rows of matrix\r\n                    let index = k + j * measureCount;\r\n\r\n                    for (let categoryNode of matrix.rows.root.children) {\r\n                        let value = categoryNode.values[index].value;\r\n\r\n                        valueColumn.values.push(value);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // and now ungrouped\r\n            let values: DataViewValueColumns = <DataViewValueColumns>[];\r\n            for (let group of groups) {\r\n                for (let k = 0; k < measureCount; ++k) {\r\n                    values.push(group.values[k]);\r\n                }\r\n            }\r\n\r\n            values.grouped = () => groups;\r\n            values.identityFields = matrix.columns.root.childIdentityFields;\r\n            values.source = matrix.columns.levels[0].sources[0];\r\n\r\n            // final assembly\r\n            let categorical: DataViewCategorical = {\r\n                categories: categories,\r\n                values: values,\r\n            };\r\n\r\n            return categorical;\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved.\r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *\r\n *  The above copyright notice and this permission notice shall be included in\r\n *  all copies or substantial portions of the Software.\r\n *\r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    import inherit = Prototype.inherit;\r\n    import inheritSingle = Prototype.inheritSingle;\r\n    import ArrayExtensions = jsCommon.ArrayExtensions;\r\n    import EnumExtensions = jsCommon.EnumExtensions;\r\n    import INumberDictionary = jsCommon.INumberDictionary;\r\n\r\n    export interface DataViewTransformApplyOptions {\r\n        prototype: DataView;\r\n        objectDescriptors: DataViewObjectDescriptors;\r\n        dataViewMappings?: DataViewMapping[];\r\n        transforms: DataViewTransformActions;\r\n        colorAllocatorFactory: IColorAllocatorFactory;\r\n        dataRoles: VisualDataRole[];\r\n    }\r\n\r\n    /** Describes the Transform actions to be done to a prototype DataView. */\r\n    export interface DataViewTransformActions {\r\n        /** Describes transform metadata for each semantic query select item, as the arrays align, by index. */\r\n        selects?: DataViewSelectTransform[];\r\n\r\n        /** Describes the DataViewObject definitions. */\r\n        objects?: DataViewObjectDefinitions;\r\n\r\n        /** Describes the splitting of a single input DataView into multiple DataViews. */\r\n        splits?: DataViewSplitTransform[];\r\n\r\n        /** Describes the projection metadata which includes projection ordering and active items. */\r\n        roles?: DataViewRoleTransformMetadata;\r\n    }\r\n\r\n    export interface DataViewSplitTransform {\r\n        selects: INumberDictionary<boolean>;\r\n    }\r\n\r\n    export interface DataViewProjectionOrdering {\r\n        [roleName: string]: number[];\r\n    }\r\n\r\n    export interface DataViewProjectionActiveItems {\r\n        [roleName: string]: string[];\r\n    }\r\n\r\n    export interface DataViewRoleTransformMetadata {\r\n        /** Describes the order of selects (referenced by query index) in each role. */\r\n        ordering?: DataViewProjectionOrdering;\r\n\r\n        /** Describes the active items in each role. */\r\n        activeItems?: DataViewProjectionActiveItems;\r\n    }\r\n\r\n    export interface MatrixTransformationContext {\r\n        rowHierarchyRewritten: boolean;\r\n        columnHierarchyRewritten: boolean;\r\n        hierarchyTreesRewritten: boolean;\r\n    }\r\n\r\n    interface ValueRewrite<T> {\r\n        from: T;\r\n        to: T;\r\n    }\r\n\r\n    interface NumberToNumberMapping {\r\n        [position: number]: number;\r\n    }\r\n\r\n    const enum CategoricalDataViewTransformation {\r\n        None,\r\n        Pivot,\r\n        SelfCrossJoin,\r\n    }\r\n\r\n    export const enum StandardDataViewKinds {\r\n        None = 0,\r\n        Categorical = 1,\r\n        Matrix = 1 << 1,\r\n        Single = 1 << 2,\r\n        Table = 1 << 3,\r\n        Tree = 1 << 4,\r\n    }\r\n\r\n    // TODO: refactor & focus DataViewTransform into a service with well-defined dependencies.\r\n    export module DataViewTransform {\r\n        export function apply(options: DataViewTransformApplyOptions): DataView[] {\r\n            debug.assertValue(options, 'options');\r\n\r\n            // TODO: Flow a context object through to capture errors/warnings about what happens here for better diagnosability.\r\n\r\n            let prototype = options.prototype,\r\n                objectDescriptors = options.objectDescriptors,\r\n                dataViewMappings = options.dataViewMappings,\r\n                transforms = options.transforms,\r\n                projectionActiveItems = transforms && transforms.roles && transforms.roles.activeItems,\r\n                colorAllocatorFactory = options.colorAllocatorFactory,\r\n                dataRoles = options.dataRoles;\r\n\r\n            if (!prototype)\r\n                return transformEmptyDataView(objectDescriptors, transforms, colorAllocatorFactory);\r\n\r\n            if (!transforms)\r\n                return [prototype];\r\n\r\n            // Transform Query DataView\r\n            prototype = DataViewPivotCategoricalToPrimaryGroups.unpivotResult(prototype, transforms.selects, dataViewMappings, projectionActiveItems);\r\n            let transformedDataViews: DataView[] = transformQueryToVisualDataView(prototype, transforms, objectDescriptors, dataViewMappings, colorAllocatorFactory, dataRoles);\r\n\r\n            // Transform and generate derived visual DataViews\r\n            transformedDataViews = DataViewRegression.run({\r\n                dataViewMappings: dataViewMappings,\r\n                transformedDataViews: transformedDataViews,\r\n                dataRoles: dataRoles,\r\n                objectDescriptors: objectDescriptors,\r\n                objectDefinitions: transforms.objects,\r\n                colorAllocatorFactory: colorAllocatorFactory,\r\n                transformSelects: transforms.selects,\r\n                dataView: prototype,\r\n                projectionActiveItems: projectionActiveItems,\r\n            });\r\n\r\n            return transformedDataViews;\r\n        }\r\n\r\n        function transformQueryToVisualDataView(\r\n            prototype: DataView,\r\n            transforms: DataViewTransformActions,\r\n            objectDescriptors: DataViewObjectDescriptors,\r\n            dataViewMappings: DataViewMapping[],\r\n            colorAllocatorFactory: IColorAllocatorFactory,\r\n            dataRoles: VisualDataRole[]): DataView[] {\r\n            let transformedDataViews: DataView[] = [];\r\n            let splits = transforms.splits;\r\n            if (_.isEmpty(splits)) {\r\n                transformedDataViews.push(transformDataView(prototype, objectDescriptors, dataViewMappings, transforms, colorAllocatorFactory, dataRoles));\r\n            } else {\r\n                for (let split of splits) {\r\n                    let transformed = transformDataView(prototype, objectDescriptors, dataViewMappings, transforms, colorAllocatorFactory, dataRoles, split.selects);\r\n                    transformedDataViews.push(transformed);\r\n                }\r\n            }\r\n            return transformedDataViews;\r\n        }\r\n\r\n        function transformEmptyDataView(objectDescriptors: DataViewObjectDescriptors, transforms: DataViewTransformActions, colorAllocatorFactory: IColorAllocatorFactory): DataView[] {\r\n            if (transforms && transforms.objects) {\r\n                let emptyDataView: DataView = {\r\n                    metadata: {\r\n                        columns: [],\r\n                    }\r\n                };\r\n\r\n                transformObjects(\r\n                    emptyDataView,\r\n                    StandardDataViewKinds.None,\r\n                    objectDescriptors,\r\n                    transforms.objects,\r\n                    transforms.selects,\r\n                    colorAllocatorFactory);\r\n\r\n                return [emptyDataView];\r\n            }\r\n\r\n            return [];\r\n        }\r\n\r\n        function transformDataView(\r\n            prototype: DataView,\r\n            objectDescriptors: DataViewObjectDescriptors,\r\n            roleMappings: DataViewMapping[],\r\n            transforms: DataViewTransformActions,\r\n            colorAllocatorFactory: IColorAllocatorFactory,\r\n            dataRoles: VisualDataRole[],\r\n            selectsToInclude?: INumberDictionary<boolean>): DataView {\r\n            debug.assertValue(prototype, 'prototype');\r\n\r\n            let targetKinds = getTargetKinds(roleMappings);\r\n            let transformed = inherit(prototype);\r\n            transformed.metadata = inherit(prototype.metadata);\r\n\r\n            let projectionOrdering = transforms.roles && transforms.roles.ordering;\r\n            let projectionActiveItems = transforms.roles && transforms.roles.activeItems;\r\n            transformed = transformSelects(transformed, roleMappings, transforms.selects, projectionOrdering, selectsToInclude);\r\n            transformObjects(transformed, targetKinds, objectDescriptors, transforms.objects, transforms.selects, colorAllocatorFactory);\r\n\r\n            // Note: Do this step after transformObjects() so that metadata columns in 'transformed' have roles and objects.general.formatString populated\r\n            transformed = DataViewConcatenateCategoricalColumns.detectAndApply(transformed, roleMappings, projectionOrdering, transforms.selects, projectionActiveItems);\r\n\r\n            DataViewNormalizeValues.apply({\r\n                dataview: transformed,\r\n                dataViewMappings: roleMappings,\r\n                dataRoles: dataRoles,\r\n            });\r\n\r\n            return transformed;\r\n        }\r\n\r\n        function getTargetKinds(roleMappings: DataViewMapping[]): StandardDataViewKinds {\r\n            debug.assertAnyValue(roleMappings, 'roleMappings');\r\n\r\n            if (!roleMappings)\r\n                return StandardDataViewKinds.None;\r\n\r\n            let result = StandardDataViewKinds.None;\r\n            for (let roleMapping of roleMappings) {\r\n                if (roleMapping.categorical)\r\n                    result |= StandardDataViewKinds.Categorical;\r\n                if (roleMapping.matrix)\r\n                    result |= StandardDataViewKinds.Matrix;\r\n                if (roleMapping.single)\r\n                    result |= StandardDataViewKinds.Single;\r\n                if (roleMapping.table)\r\n                    result |= StandardDataViewKinds.Table;\r\n                if (roleMapping.tree)\r\n                    result |= StandardDataViewKinds.Tree;\r\n            }\r\n            return result;\r\n        }\r\n\r\n        function transformSelects(\r\n            dataView: DataView,\r\n            roleMappings: DataViewMapping[],\r\n            selectTransforms: DataViewSelectTransform[],\r\n            projectionOrdering?: DataViewProjectionOrdering,\r\n            selectsToInclude?: INumberDictionary<boolean>): DataView {\r\n\r\n            let columnRewrites: ValueRewrite<DataViewMetadataColumn>[] = [];\r\n            if (selectTransforms) {\r\n                dataView.metadata.columns = applyTransformsToColumns(\r\n                    dataView.metadata.columns,\r\n                    selectTransforms,\r\n                    columnRewrites);\r\n            }\r\n\r\n            // NOTE: no rewrites necessary for Tree (it doesn't reference the columns)\r\n            if (dataView.categorical) {\r\n                dataView.categorical = applyRewritesToCategorical(dataView.categorical, columnRewrites, selectsToInclude);\r\n\r\n                // TODO VSTS 7024199: separate out structural transformations from dataViewTransform.transformSelects(...)\r\n                // NOTE: This is slightly DSR-specific.\r\n                dataView = pivotIfNecessary(dataView, roleMappings);\r\n            }\r\n\r\n            if (dataView.matrix) {\r\n                let matrixTransformationContext: MatrixTransformationContext = {\r\n                    rowHierarchyRewritten: false,\r\n                    columnHierarchyRewritten: false,\r\n                    hierarchyTreesRewritten: false\r\n                };\r\n                dataView.matrix = applyRewritesToMatrix(dataView.matrix, columnRewrites, roleMappings, projectionOrdering, matrixTransformationContext);\r\n\r\n                // TODO VSTS 7024199: separate out structural transformations from dataViewTransform.transformSelects(...)\r\n                if (shouldPivotMatrix(dataView.matrix, roleMappings))\r\n                    DataViewPivotMatrix.apply(dataView.matrix, matrixTransformationContext);\r\n            }\r\n\r\n            if (dataView.table)\r\n                dataView.table = applyRewritesToTable(dataView.table, columnRewrites, roleMappings, projectionOrdering);\r\n\r\n            return dataView;\r\n        }\r\n\r\n        function applyTransformsToColumns(\r\n            prototypeColumns: DataViewMetadataColumn[],\r\n            selects: DataViewSelectTransform[],\r\n            rewrites: ValueRewrite<DataViewMetadataColumn>[]): DataViewMetadataColumn[] {\r\n            debug.assertValue(prototypeColumns, 'columns');\r\n\r\n            if (!selects)\r\n                return prototypeColumns;\r\n\r\n            //column may contain undefined entries\r\n            let columns = inherit(prototypeColumns);\r\n\r\n            for (let i = 0, len = prototypeColumns.length; i < len; i++) {\r\n                let prototypeColumn = prototypeColumns[i];\r\n                let select = selects[prototypeColumn.index];\r\n                if (!select)\r\n                    continue;\r\n\r\n                let column: DataViewMetadataColumn = columns[i] = inherit(prototypeColumn);\r\n\r\n                if (select.roles)\r\n                    column.roles = select.roles;\r\n                if (select.type)\r\n                    column.type = select.type;\r\n                column.format = getFormatForColumn(select, column);\r\n\r\n                if (select.displayName)\r\n                    column.displayName = select.displayName;\r\n                if (select.queryName)\r\n                    column.queryName = select.queryName;\r\n                if (select.kpi)\r\n                    column.kpi = select.kpi;\r\n                if (select.sort)\r\n                    column.sort = select.sort;\r\n                if (select.discourageAggregationAcrossGroups)\r\n                    column.discourageAggregationAcrossGroups = select.discourageAggregationAcrossGroups;\r\n\r\n                rewrites.push({\r\n                    from: prototypeColumn,\r\n                    to: column,\r\n                });\r\n            }\r\n\r\n            return columns;\r\n        }\r\n\r\n        /**\r\n         * Get the column format. Order of precendence is:\r\n         *  1. Select format\r\n         *  2. Column format\r\n         */\r\n        function getFormatForColumn(select: DataViewSelectTransform, column: DataViewMetadataColumn): string {\r\n            // TODO: we already copied the select.Format to column.format, we probably don't need this check\r\n            return select.format || column.format;\r\n        }\r\n\r\n        function applyRewritesToCategorical(prototype: DataViewCategorical, columnRewrites: ValueRewrite<DataViewMetadataColumn>[], selectsToInclude?: INumberDictionary<boolean>): DataViewCategorical {\r\n            debug.assertValue(prototype, 'prototype');\r\n            debug.assertValue(columnRewrites, 'columnRewrites');\r\n\r\n            let categorical = inherit(prototype);\r\n\r\n            function override(value: { source?: DataViewMetadataColumn }) {\r\n                let rewrittenSource = findOverride(value.source, columnRewrites);\r\n                if (rewrittenSource) {\r\n                    let rewritten = inherit(value);\r\n                    rewritten.source = rewrittenSource;\r\n                    return rewritten;\r\n                }\r\n            }\r\n\r\n            let categories = Prototype.overrideArray(prototype.categories, override);\r\n            if (categories)\r\n                categorical.categories = categories;\r\n\r\n            let values = Prototype.overrideArray(prototype.values, override);\r\n\r\n            if (values) {\r\n                if (selectsToInclude) {\r\n                    for (let i = values.length - 1; i >= 0; i--) {\r\n                        if (!selectsToInclude[values[i].source.index])\r\n                            values.splice(i, 1);\r\n                    }\r\n                }\r\n\r\n                if (values.source) {\r\n                    if (selectsToInclude && !selectsToInclude[values.source.index]) {\r\n                        values.source = undefined;\r\n                    }\r\n                    else {\r\n                        let rewrittenValuesSource = findOverride(values.source, columnRewrites);\r\n                        if (rewrittenValuesSource)\r\n                            values.source = rewrittenValuesSource;\r\n                    }\r\n                }\r\n\r\n                categorical.values = values;\r\n                setGrouped(values);\r\n            }\r\n\r\n            return categorical;\r\n        }\r\n\r\n        function applyRewritesToTable(\r\n            prototype: DataViewTable,\r\n            columnRewrites: ValueRewrite<DataViewMetadataColumn>[],\r\n            roleMappings: DataViewMapping[],\r\n            projectionOrdering: DataViewProjectionOrdering): DataViewTable {\r\n            debug.assertValue(prototype, 'prototype');\r\n            debug.assertValue(columnRewrites, 'columnRewrites');\r\n\r\n            // Don't perform this potentially expensive transform unless we actually have a table.\r\n            // When we switch to lazy per-visual DataView creation, we'll be able to remove this check.\r\n            if (!roleMappings || roleMappings.length !== 1 || !roleMappings[0].table)\r\n                return prototype;\r\n\r\n            let table = inherit(prototype);\r\n\r\n            // Copy the rewritten columns into the table view\r\n            let override = (metadata: DataViewMetadataColumn) => findOverride(metadata, columnRewrites);\r\n            let columns = Prototype.overrideArray(prototype.columns, override);\r\n            if (columns)\r\n                table.columns = columns;\r\n\r\n            if (!projectionOrdering)\r\n                return table;\r\n\r\n            let newToOldPositions = createTableColumnPositionMapping(projectionOrdering, columnRewrites);\r\n            if (!newToOldPositions)\r\n                return table;\r\n\r\n            // Reorder the columns\r\n            let columnsClone = columns.slice(0);\r\n            let keys = Object.keys(newToOldPositions);\r\n            for (let i = 0, len = keys.length; i < len; i++) {\r\n                let sourceColumn = columnsClone[newToOldPositions[keys[i]]];\r\n\r\n                // In the case we've hit the end of our columns array, but still have position reordering keys,\r\n                // there is a duplicate column so we will need to add a new column for the duplicate data\r\n                if (i === columns.length)\r\n                    columns.push(sourceColumn);\r\n                else {\r\n                    debug.assert(i < columns.length, 'The column index is out of range for reordering.');\r\n                    columns[i] = sourceColumn;\r\n                }\r\n            }\r\n\r\n            // Reorder the rows\r\n            let rows = Prototype.overrideArray(table.rows,\r\n                (row: any[]) => {\r\n                    let newRow: any[] = [];\r\n                    for (let i = 0, len = keys.length; i < len; ++i)\r\n                        newRow[i] = row[newToOldPositions[keys[i]]];\r\n\r\n                    return newRow;\r\n                });\r\n\r\n            if (rows)\r\n                table.rows = rows;\r\n\r\n            return table;\r\n        }\r\n\r\n        /** Creates a mapping of new position to original position. */\r\n        function createTableColumnPositionMapping(\r\n            projectionOrdering: DataViewProjectionOrdering,\r\n            columnRewrites: ValueRewrite<DataViewMetadataColumn>[]): NumberToNumberMapping {\r\n            let roles = Object.keys(projectionOrdering);\r\n\r\n            // If we have more than one role then the ordering of columns between roles is ambiguous, so don't reorder anything.\r\n            if (roles.length !== 1)\r\n                return;\r\n\r\n            let role = roles[0],\r\n                originalOrder = _.map(columnRewrites, (rewrite: ValueRewrite<DataViewMetadataColumn>) => rewrite.from.index),\r\n                newOrder = projectionOrdering[role];\r\n\r\n            return createOrderMapping(originalOrder, newOrder);\r\n        }\r\n\r\n        function applyRewritesToMatrix(\r\n            prototype: DataViewMatrix,\r\n            columnRewrites: ValueRewrite<DataViewMetadataColumn>[],\r\n            roleMappings: DataViewMapping[],\r\n            projectionOrdering: DataViewProjectionOrdering,\r\n            context: MatrixTransformationContext): DataViewMatrix {\r\n            debug.assertValue(prototype, 'prototype');\r\n            debug.assertValue(columnRewrites, 'columnRewrites');\r\n\r\n            // Don't perform this potentially expensive transform unless we actually have a matrix.\r\n            // When we switch to lazy per-visual DataView creation, we'll be able to remove this check.\r\n            if (!roleMappings || roleMappings.length < 1 || !(roleMappings[0].matrix || (roleMappings[1] && roleMappings[1].matrix)))\r\n                return prototype;\r\n\r\n            let matrixMapping = roleMappings[0].matrix || roleMappings[1].matrix;\r\n            let matrix = inherit(prototype);\r\n\r\n            function override(metadata: DataViewMetadataColumn) {\r\n                return findOverride(metadata, columnRewrites);\r\n            }\r\n\r\n            function overrideHierarchy(hierarchy: DataViewHierarchy): DataViewHierarchy {\r\n                let rewrittenHierarchy: DataViewHierarchy = null;\r\n\r\n                let newLevels = Prototype.overrideArray(\r\n                    hierarchy.levels,\r\n                    (level: DataViewHierarchyLevel) => {\r\n                        let newLevel: DataViewHierarchyLevel = null;\r\n                        let levelSources = Prototype.overrideArray(level.sources, override);\r\n                        if (levelSources)\r\n                            newLevel = ensureRewritten<DataViewHierarchyLevel>(newLevel, level, h => h.sources = levelSources);\r\n\r\n                        return newLevel;\r\n                    });\r\n                if (newLevels)\r\n                    rewrittenHierarchy = ensureRewritten<DataViewHierarchy>(rewrittenHierarchy, hierarchy, r => r.levels = newLevels);\r\n\r\n                return rewrittenHierarchy;\r\n            }\r\n\r\n            let rows = overrideHierarchy(matrix.rows);\r\n            if (rows) {\r\n                matrix.rows = rows;\r\n                context.rowHierarchyRewritten = true;\r\n            }\r\n\r\n            let columns = overrideHierarchy(matrix.columns);\r\n            if (columns) {\r\n                matrix.columns = columns;\r\n                context.columnHierarchyRewritten = true;\r\n            }\r\n\r\n            let valueSources = Prototype.overrideArray(matrix.valueSources, override);\r\n            if (valueSources) {\r\n                matrix.valueSources = valueSources;\r\n\r\n                // Only need to reorder if we have more than one value source, and they are all bound to the same role\r\n                let matrixValues = <DataViewRoleForMapping>matrixMapping.values;\r\n                if (projectionOrdering && valueSources.length > 1 && matrixValues && matrixValues.for) {\r\n                    let columnLevels = columns.levels.length;\r\n                    if (columnLevels > 0) {\r\n                        let newToOldPositions = createMatrixValuesPositionMapping(matrixValues, projectionOrdering, valueSources, columnRewrites);\r\n                        if (newToOldPositions) {\r\n                            let keys = Object.keys(newToOldPositions);\r\n                            let numKeys = keys.length;\r\n\r\n                            // Reorder the value columns\r\n                            columns.root = DataViewPivotMatrix.cloneTree(columns.root);\r\n                            if (columnLevels === 1)\r\n                                reorderChildNodes(columns.root, newToOldPositions);\r\n                            else\r\n                                forEachNodeAtLevel(columns.root, columnLevels - 2, (node: DataViewMatrixNode) => reorderChildNodes(node, newToOldPositions));\r\n\r\n                            // Reorder the value rows\r\n                            matrix.rows.root = DataViewPivotMatrix.cloneTreeExecuteOnLeaf(matrix.rows.root, (node: DataViewMatrixNode) => {\r\n\r\n                                if (!node.values)\r\n                                    return;\r\n\r\n                                let newValues: { [id: number]: DataViewTreeNodeValue } = {};\r\n\r\n                                let iterations = Object.keys(node.values).length / numKeys;\r\n                                for (let i = 0, len = iterations; i < len; i++) {\r\n                                    let offset = i * numKeys;\r\n                                    for (let keysIndex = 0; keysIndex < numKeys; keysIndex++)\r\n                                        newValues[offset + keysIndex] = node.values[offset + newToOldPositions[keys[keysIndex]]];\r\n                                }\r\n\r\n                                node.values = newValues;\r\n                            });\r\n\r\n                            context.hierarchyTreesRewritten = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            reorderMatrixCompositeGroups(matrix, matrixMapping, projectionOrdering);\r\n\r\n            return matrix;\r\n        }\r\n\r\n        function reorderChildNodes(node: DataViewMatrixNode, newToOldPositions: NumberToNumberMapping): void {\r\n            let keys = Object.keys(newToOldPositions);\r\n            let numKeys = keys.length;\r\n            let children = node.children;\r\n\r\n            let childrenClone = children.slice(0);\r\n            for (let i = 0, len = numKeys; i < len; i++) {\r\n                let sourceColumn = childrenClone[newToOldPositions[keys[i]]];\r\n\r\n                // In the case we've hit the end of our columns array, but still have position reordering keys,\r\n                // there is a duplicate column so we will need to add a new column for the duplicate data\r\n                if (i === children.length)\r\n                    children.push(sourceColumn);\r\n                else {\r\n                    debug.assert(i < children.length, 'The column index is out of range for reordering.');\r\n                    children[i] = sourceColumn;\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Returns a inheritSingle() version of the specified prototype DataViewMatrix with any composite group levels\r\n         * and values re-ordered by projection ordering.\r\n         * Returns undefined if no re-ordering under the specified prototype is necessary.\r\n         */\r\n        function reorderMatrixCompositeGroups(\r\n            prototype: DataViewMatrix,\r\n            supportedDataViewMapping: DataViewMatrixMapping,\r\n            projection: DataViewProjectionOrdering): DataViewMatrix {\r\n\r\n            let transformedDataView: DataViewMatrix;\r\n\r\n            if (prototype && supportedDataViewMapping && projection) {\r\n\r\n                // reorder levelValues in any composite groups in rows hierarchy\r\n                let transformedRowsHierarchy: DataViewHierarchy;\r\n                DataViewMapping.visitMatrixItems(supportedDataViewMapping.rows, {\r\n                    visitRole: (role: string, context?: RoleItemContext): void => {\r\n                        transformedRowsHierarchy = reorderMatrixHierarchyCompositeGroups(\r\n                            transformedRowsHierarchy || prototype.rows,\r\n                            role,\r\n                            projection);\r\n                    }\r\n                });\r\n                \r\n                // reorder levelValues in any composite groups in columns hierarchy\r\n                let transformedColumnsHierarchy: DataViewHierarchy;\r\n                DataViewMapping.visitMatrixItems(supportedDataViewMapping.columns, {\r\n                    visitRole: (role: string, context?: RoleItemContext): void => {\r\n                        transformedColumnsHierarchy = reorderMatrixHierarchyCompositeGroups(\r\n                            transformedColumnsHierarchy || prototype.columns,\r\n                            role,\r\n                            projection);\r\n                    }\r\n                });\r\n\r\n                if (transformedRowsHierarchy || transformedColumnsHierarchy) {\r\n                    transformedDataView = inheritSingle(prototype);\r\n                    transformedDataView.rows = transformedRowsHierarchy || transformedDataView.rows;\r\n                    transformedDataView.columns = transformedColumnsHierarchy || transformedDataView.columns;\r\n                }\r\n            }\r\n\r\n            return transformedDataView;\r\n        }\r\n\r\n        /**\r\n         * Returns a inheritSingle() version of the specified matrixHierarchy with any composite group levels and  \r\n         * values re-ordered by projection ordering.\r\n         * Returns undefined if no re-ordering under the specified matrixHierarchy is necessary.\r\n         */\r\n        function reorderMatrixHierarchyCompositeGroups(\r\n            matrixHierarchy: DataViewHierarchy,\r\n            hierarchyRole: string,\r\n            projection: DataViewProjectionOrdering): DataViewHierarchy {\r\n            debug.assertValue(matrixHierarchy, 'matrixHierarchy');\r\n            debug.assertValue(hierarchyRole, 'hierarchyRole');\r\n            debug.assertValue(projection, 'projection');\r\n\r\n            let transformedHierarchy: DataViewHierarchy;\r\n            let selectIndicesInProjectionOrder: number[] = projection[hierarchyRole];\r\n\r\n            // reordering needs to happen only if there are multiple columns for the hierarchy's role in the projection\r\n            let hasMultipleColumnsInProjection = selectIndicesInProjectionOrder && selectIndicesInProjectionOrder.length >= 2;\r\n            if (hasMultipleColumnsInProjection && !_.isEmpty(matrixHierarchy.levels)) {\r\n                for (let i = matrixHierarchy.levels.length - 1; i >= 0; i--) {\r\n                    var hierarchyLevel: DataViewHierarchyLevel = matrixHierarchy.levels[i];\r\n\r\n                    // compute a mapping for any necessary reordering of columns at this given level, based on projection ordering\r\n                    let newToOldLevelSourceIndicesMapping: NumberToNumberMapping =\r\n                        createMatrixHierarchyLevelSourcesPositionMapping(hierarchyLevel, hierarchyRole, projection);\r\n\r\n                    if (newToOldLevelSourceIndicesMapping) {\r\n                        if (_.isUndefined(transformedHierarchy)) {\r\n                            // Because we start inspecting the hierarchy from the deepest level and work backwards to the root,\r\n                            // the current hierarchyLevel is therefore the inner-most level that needs re-ordering of composite group values...\r\n                            transformedHierarchy = inheritSingle(matrixHierarchy);\r\n                            transformedHierarchy.levels = inheritSingle(matrixHierarchy.levels);\r\n\r\n                            // Because the current hierarchyLevel is the inner-most level that needs re-ordering of composite group values,\r\n                            // inheriting all nodes from root down to this level will also prepare the nodes for any transform that needs to \r\n                            // happen in other hierarchy levels in the later iterations of this for-loop.\r\n                            transformedHierarchy.root = utils.DataViewMatrixUtils.inheritMatrixNodeHierarchy(matrixHierarchy.root, i, true);\r\n                        }\r\n\r\n                        // reorder the metadata columns in the sources array at that level\r\n                        let transformingHierarchyLevel = inheritSingle(matrixHierarchy.levels[i]); // inherit at most once during the whole dataViewTransform for this obj...\r\n                        transformedHierarchy.levels[i] = reorderMatrixHierarchyLevelColumnSources(transformingHierarchyLevel, newToOldLevelSourceIndicesMapping);\r\n\r\n                        // reorder the level values in the composite group nodes at the current hierarchy level\r\n                        reorderMatrixHierarchyLevelValues(transformedHierarchy.root, i, newToOldLevelSourceIndicesMapping);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return transformedHierarchy;\r\n        }\r\n\r\n        /**\r\n         * If reordering is needed on the level's metadata column sources (i.e. hierarchyLevel.sources),\r\n         * returns the mapping from the target LevelSourceIndex (based on projection order) to original LevelSourceIndex.\r\n         *\r\n         * The returned value maps level source indices from the new target order (calculated from projection order)\r\n         * back to the original order as they appear in the specified hierarchyLevel's sources.\r\n         * Please refer to comments on the createOrderMapping() function for more explanation on the mappings in the return value.\r\n         *\r\n         * Note: The return value is the mapping from new index to old index, for consistency with existing and similar functions in this module.\r\n         *\r\n         * @param hierarchyLevel The hierarchy level that contains the metadata column sources.\r\n         * @param hierarchyRoleName The role name for the hierarchy where the specified hierarchyLevel belongs.\r\n         * @param projection The projection ordering that includes an ordering for the specified hierarchyRoleName.\r\n         */\r\n        function createMatrixHierarchyLevelSourcesPositionMapping(\r\n            hierarchyLevel: DataViewHierarchyLevel,\r\n            hierarchyRole: string,\r\n            projection: DataViewProjectionOrdering): NumberToNumberMapping {\r\n            debug.assertValue(hierarchyLevel, 'hierarchyLevel');\r\n            debug.assertValue(hierarchyRole, 'hierarchyRole');\r\n            debug.assertValue(projection, 'projection');\r\n            debug.assertValue(projection[hierarchyRole], 'pre-condition: The specified projection must contain an ordering for the specified hierarchyRoleName.');\r\n\r\n            let newToOldLevelSourceIndicesMapping: NumberToNumberMapping;\r\n            let levelSourceColumns = hierarchyLevel.sources;\r\n\r\n            if (levelSourceColumns && levelSourceColumns.length >= 2) {\r\n                // The hierarchy level has multiple columns, so it is possible to have composite group, go on to check other conditions...\r\n\r\n                let columnsForHierarchyRoleOrderedByLevelSourceIndex = utils.DataViewMetadataColumnUtils.joinMetadataColumnsAndProjectionOrder(\r\n                    levelSourceColumns,\r\n                    projection,\r\n                    hierarchyRole);\r\n\r\n                if (columnsForHierarchyRoleOrderedByLevelSourceIndex && columnsForHierarchyRoleOrderedByLevelSourceIndex.length >= 2) {\r\n                    // The hierarchy level has multiple columns for the hierarchy's role, go on to calculate newToOldLevelSourceIndicesMapping...\r\n                    let columnsForHierarchyRoleOrderedByProjection = _.sortBy(\r\n                        columnsForHierarchyRoleOrderedByLevelSourceIndex,\r\n                        columnInfo => columnInfo.projectionOrderIndex);\r\n\r\n                    newToOldLevelSourceIndicesMapping = createOrderMapping(\r\n                        _.map(columnsForHierarchyRoleOrderedByLevelSourceIndex, columnInfo => columnInfo.sourceIndex),\r\n                        _.map(columnsForHierarchyRoleOrderedByProjection, columnInfo => columnInfo.sourceIndex));\r\n                }\r\n            }\r\n\r\n            return newToOldLevelSourceIndicesMapping;\r\n        }\r\n\r\n        /**\r\n         * Applies re-ordering on the specified transformingHierarchyLevel's sources.\r\n         * Returns the same object as the specified transformingHierarchyLevel.\r\n         */\r\n        function reorderMatrixHierarchyLevelColumnSources(transformingHierarchyLevel: DataViewHierarchyLevel, newToOldLevelSourceIndicesMapping: NumberToNumberMapping): DataViewHierarchyLevel {\r\n            debug.assertValue(transformingHierarchyLevel, 'transformingHierarchyLevel');\r\n            debug.assertValue(newToOldLevelSourceIndicesMapping, 'newToOldLevelSourceIndicesMapping');\r\n\r\n            let originalLevelSources = transformingHierarchyLevel.sources;\r\n\r\n            transformingHierarchyLevel.sources = originalLevelSources.slice(0); // make a clone of the array before modifying it, because the for-loop depends on the origin array.\r\n            \r\n            let newLevelSourceIndices = Object.keys(newToOldLevelSourceIndicesMapping);\r\n            for (let i = 0, ilen = newLevelSourceIndices.length; i < ilen; i++) {\r\n                let newLevelSourceIndex = newLevelSourceIndices[i];\r\n                let oldLevelSourceIndex = newToOldLevelSourceIndicesMapping[newLevelSourceIndex];\r\n                \r\n                debug.assert(oldLevelSourceIndex < originalLevelSources.length,\r\n                    'pre-condition: The value in every mapping in the specified levelSourceIndicesReorderingMap must be a valid index to the specified hierarchyLevel.sources array property');\r\n\r\n                transformingHierarchyLevel.sources[newLevelSourceIndex] = originalLevelSources[oldLevelSourceIndex];\r\n            }\r\n\r\n            return transformingHierarchyLevel;\r\n        }\r\n\r\n        /**\r\n         * Reorders the elements in levelValues in each node under transformingHierarchyRootNode at the specified hierarchyLevel,\r\n         * and updates their DataViewMatrixGroupValue.levelSourceIndex property.\r\n         *\r\n         * Returns the same object as the specified transformingHierarchyRootNode.\r\n         */\r\n        function reorderMatrixHierarchyLevelValues(\r\n            transformingHierarchyRootNode: DataViewMatrixNode,\r\n            transformingHierarchyLevelIndex: number,\r\n            newToOldLevelSourceIndicesMapping: NumberToNumberMapping): DataViewMatrixNode {\r\n            debug.assertValue(transformingHierarchyRootNode, 'transformingHierarchyRootNode');\r\n            debug.assertValue(newToOldLevelSourceIndicesMapping, 'newToOldLevelSourceIndicesMapping');\r\n\r\n            let oldToNewLevelSourceIndicesMapping: NumberToNumberMapping = createReversedMapping(newToOldLevelSourceIndicesMapping);\r\n\r\n            forEachNodeAtLevel(transformingHierarchyRootNode, transformingHierarchyLevelIndex, (transformingMatrixNode: DataViewMatrixNode) => {\r\n                let originalLevelValues = transformingMatrixNode.levelValues;\r\n\r\n                // Note: Technically this function is incorrect, because the driving source of the new LevelValues is really\r\n                // the \"projection for this composite group\", a concept that isn't yet implemented in DataViewProjectionOrdering.\r\n                // The following code isn't correct in the special case where a column is projected twice in this composite group,\r\n                // in which case the DSR will not have the duplicate columns; DataViewTransform is supposed to expand the duplicates.\r\n                // Until we fully implement composite group projection, though, we'll just sort what we have in transformingMatrixNode.levelValues.\r\n\r\n                if (!_.isEmpty(originalLevelValues)) {\r\n                    // First, re-order the elements in transformingMatrixNode.levelValues by the new levelSourceIndex order.\r\n                    // _.sortBy() also creates a new array, which we want to do for all nodes (including when levelValues.length === 1)\r\n                    // because we don't want to accidentally modify the array AND its value references in Query DataView\r\n                    let newlyOrderedLevelValues = _.sortBy(originalLevelValues, levelValue => oldToNewLevelSourceIndicesMapping[levelValue.levelSourceIndex]);\r\n\r\n                    for (let i = 0, ilen = newlyOrderedLevelValues.length; i < ilen; i++) {\r\n                        let transformingLevelValue = inheritSingle(newlyOrderedLevelValues[i]);\r\n                        transformingLevelValue.levelSourceIndex = oldToNewLevelSourceIndicesMapping[transformingLevelValue.levelSourceIndex];\r\n                        newlyOrderedLevelValues[i] = transformingLevelValue;\r\n                    }\r\n\r\n                    transformingMatrixNode.levelValues = newlyOrderedLevelValues;\r\n\r\n                    // For consistency with how DataViewTreeNode.value works, and for a bit of backward compatibility,\r\n                    // copy the last value from DataViewMatrixNode.levelValues to DataViewMatrixNode.value.\r\n                    let newlyOrderedLastLevelValue = _.last(newlyOrderedLevelValues);\r\n                    if (transformingMatrixNode.value !== newlyOrderedLastLevelValue.value) {\r\n                        transformingMatrixNode.value = newlyOrderedLastLevelValue.value;\r\n                    }\r\n                    if ((transformingMatrixNode.levelSourceIndex || 0) !== newlyOrderedLastLevelValue.levelSourceIndex) {\r\n                        transformingMatrixNode.levelSourceIndex = newlyOrderedLastLevelValue.levelSourceIndex;\r\n                    }\r\n                }\r\n            });\r\n\r\n            return transformingHierarchyRootNode;\r\n        }\r\n\r\n        /**\r\n         * Creates a mapping of new position to original position.\r\n         *\r\n         * The return value is a mapping where each key-value pair represent the order  mapping of a particular column:\r\n         * - the key in the key-value pair is the index of the particular column in the new order (e.g. projection order)\r\n         * - the value in the key-value pair is the index of the particular column in the original order\r\n         */\r\n        function createMatrixValuesPositionMapping(\r\n            matrixValues: DataViewRoleForMapping,\r\n            projectionOrdering: DataViewProjectionOrdering,\r\n            valueSources: DataViewMetadataColumn[],\r\n            columnRewrites: ValueRewrite<DataViewMetadataColumn>[]): NumberToNumberMapping {\r\n\r\n            let role = matrixValues.for.in;\r\n            let newOrder = projectionOrdering[role];\r\n\r\n            let originalOrder = _.chain(columnRewrites)\r\n                                .filter(rewrite => _.contains(valueSources, rewrite.to))\r\n                                .map(rewrite => rewrite.from.index)\r\n                                .value();\r\n\r\n            return createOrderMapping(originalOrder, newOrder);\r\n        }\r\n\r\n        /**\r\n         * Creates a mapping of indices, from indices to the specified newOrder array, back to indices to the specified\r\n         * originalOrder array.\r\n         * Each of the number value in originalOrder and newOrder is actually the unique key of a column (unqiue\r\n         * under the context of the caller code), e.g. the Select Index in projection ordering array.\r\n         * Also, the specified originalOrder must contain every value that exists in newOrder.\r\n         *\r\n         * If the specified originalOrder and newOrder are different in sequence order, then this function returns a collection of\r\n         * key-value pair, each of which represents the new and old indices of a particular column:\r\n         * - the key in each key-value pair is the index of the particular column key as it exists in the specified newOrder array\r\n         * - the value in each key-value pair is the index of the particular column key as it exists in the specified originalOrder array\r\n         *\r\n         * For example on how the return value is consumed, see functions such as reorderMatrixHierarchyLevelColumnSources(...).\r\n         *\r\n         * If the specified originalOrder and newOrder are same, then this function returns undefined.\r\n         *\r\n         * @param originalOrder E.g. an array of metadata column \"select indices\", in the original order as they exist in Query DataView.\r\n         * @param newOrder E.g. an array of metadata column \"select indices\", in rojection ordering.\r\n         */\r\n        function createOrderMapping(originalOrder: number[], newOrder: number[]): NumberToNumberMapping {\r\n            // Optimization: avoid rewriting if the current order is correct\r\n            if (ArrayExtensions.sequenceEqual(originalOrder, newOrder, (x: number, y: number) => x === y))\r\n                return;\r\n\r\n            let mapping: NumberToNumberMapping = {};\r\n            for (let i = 0, len = newOrder.length; i < len; ++i) {\r\n                let newPosition = newOrder[i];\r\n                mapping[i] = originalOrder.indexOf(newPosition);\r\n            }\r\n\r\n            return mapping;\r\n        }\r\n\r\n        function createReversedMapping(mapping: NumberToNumberMapping): NumberToNumberMapping {\r\n            debug.assertValue(mapping, 'mapping');\r\n\r\n            let reversed: NumberToNumberMapping = {};\r\n            \r\n            for (let key in mapping) {\r\n                // Note: key is a string after we get it out from mapping, thus we need to parse it \r\n                // back into a number before putting it as the value in the reversed mapping\r\n                let value = mapping[key];\r\n                let keyAsNumber = parseInt(key, 10);\r\n                reversed[value] = keyAsNumber;\r\n            }\r\n\r\n            debug.assertValue(Object.keys(mapping).length === Object.keys(reversed).length,\r\n                'pre-condition: The specified mapping must not contain any duplicate value because duplicate values are obmitted from the reversed mapping.');\r\n\r\n            return reversed;\r\n        }\r\n\r\n        export function forEachNodeAtLevel(node: DataViewMatrixNode, targetLevel: number, callback: (node: DataViewMatrixNode) => void): void {\r\n            debug.assertValue(node, 'node');\r\n            debug.assert(targetLevel >= 0, 'argetLevel >= 0');\r\n            debug.assertValue(callback, 'callback');\r\n\r\n            if (node.level === targetLevel) {\r\n                callback(node);\r\n                return;\r\n            }\r\n\r\n            let children = node.children;\r\n            if (children && children.length > 0) {\r\n                for (let i = 0, ilen = children.length; i < ilen; i++)\r\n                    forEachNodeAtLevel(children[i], targetLevel, callback);\r\n            }\r\n        }\r\n\r\n        function findOverride(source: DataViewMetadataColumn, columnRewrites: ValueRewrite<DataViewMetadataColumn>[]): DataViewMetadataColumn {\r\n            for (let i = 0, len = columnRewrites.length; i < len; i++) {\r\n                let columnRewrite = columnRewrites[i];\r\n                if (columnRewrite.from === source)\r\n                    return columnRewrite.to;\r\n            }\r\n        }\r\n\r\n        function ensureRewritten<T>(rewritten: T, prototype: T, callback?: (rewritten: T) => void): T {\r\n            if (!rewritten)\r\n                rewritten = inherit(prototype);\r\n\r\n            if (callback)\r\n                callback(rewritten);\r\n\r\n            return rewritten;\r\n        }\r\n\r\n        export function transformObjects(\r\n            dataView: DataView,\r\n            targetDataViewKinds: StandardDataViewKinds,\r\n            objectDescriptors: DataViewObjectDescriptors,\r\n            objectDefinitions: DataViewObjectDefinitions,\r\n            selectTransforms: DataViewSelectTransform[],\r\n            colorAllocatorFactory: IColorAllocatorFactory): void {\r\n            debug.assertValue(dataView, 'dataView');\r\n            debug.assertValue(targetDataViewKinds, 'targetDataViewKinds');\r\n            debug.assertAnyValue(objectDescriptors, 'objectDescriptors');\r\n            debug.assertAnyValue(objectDefinitions, 'objectDefinitions');\r\n            debug.assertAnyValue(selectTransforms, 'selectTransforms');\r\n            debug.assertValue(colorAllocatorFactory, 'colorAllocatorFactory');\r\n\r\n            if (!objectDescriptors)\r\n                return;\r\n\r\n            let objectsForAllSelectors = DataViewObjectEvaluationUtils.groupObjectsBySelector(objectDefinitions);\r\n            DataViewObjectEvaluationUtils.addImplicitObjects(objectsForAllSelectors, objectDescriptors, dataView.metadata.columns, selectTransforms);\r\n\r\n            let metadataOnce = objectsForAllSelectors.metadataOnce;\r\n            let dataObjects = objectsForAllSelectors.data;\r\n            if (metadataOnce)\r\n                evaluateMetadataObjects(dataView, selectTransforms, objectDescriptors, metadataOnce.objects, dataObjects, colorAllocatorFactory);\r\n\r\n            let metadataObjects = objectsForAllSelectors.metadata;\r\n            if (metadataObjects) {\r\n                for (let i = 0, len = metadataObjects.length; i < len; i++) {\r\n                    let metadataObject = metadataObjects[i];\r\n                    evaluateMetadataRepetition(dataView, selectTransforms, objectDescriptors, metadataObject.selector, metadataObject.objects);\r\n                }\r\n            }\r\n\r\n            for (let i = 0, len = dataObjects.length; i < len; i++) {\r\n                let dataObject = dataObjects[i];\r\n                evaluateDataRepetition(dataView, targetDataViewKinds, selectTransforms, objectDescriptors, dataObject.selector, dataObject.rules, dataObject.objects);\r\n            }\r\n\r\n            let userDefined = objectsForAllSelectors.userDefined;\r\n            if (userDefined) {\r\n                // TODO: We only handle user defined objects at the metadata level, but should be able to support them with arbitrary repetition.\r\n                evaluateUserDefinedObjects(dataView, selectTransforms, objectDescriptors, userDefined);\r\n            }\r\n        }\r\n\r\n        function evaluateUserDefinedObjects(\r\n            dataView: DataView,\r\n            selectTransforms: DataViewSelectTransform[],\r\n            objectDescriptors: DataViewObjectDescriptors,\r\n            objectDefns: DataViewObjectDefinitionsForSelector[]): void {\r\n            debug.assertValue(dataView, 'dataView');\r\n            debug.assertAnyValue(selectTransforms, 'selectTransforms');\r\n            debug.assertValue(objectDescriptors, 'objectDescriptors');\r\n            debug.assertValue(objectDefns, 'objectDefns');\r\n\r\n            let dataViewObjects: DataViewObjects = dataView.metadata.objects;\r\n            if (!dataViewObjects) {\r\n                dataViewObjects = dataView.metadata.objects = {};\r\n            }\r\n            let evalContext = createStaticEvalContext(dataView, selectTransforms);\r\n\r\n            for (let objectDefn of objectDefns) {\r\n                let id = objectDefn.selector.id;\r\n\r\n                let objects = DataViewObjectEvaluationUtils.evaluateDataViewObjects(evalContext, objectDescriptors, objectDefn.objects);\r\n\r\n                for (let objectName in objects) {\r\n                    let object = <DataViewObject>objects[objectName];\r\n\r\n                    let map = <DataViewObjectMap>dataViewObjects[objectName];\r\n                    if (!map)\r\n                        map = dataViewObjects[objectName] = [];\r\n                    debug.assert(DataViewObjects.isUserDefined(map), 'expected DataViewObjectMap');\r\n\r\n                    // NOTE: We do not check for duplicate ids.\r\n                    map.push({ id: id, object: object });\r\n                }\r\n            }\r\n        }\r\n\r\n        /** Evaluates and sets properties on the DataView metadata. */\r\n        function evaluateMetadataObjects(\r\n            dataView: DataView,\r\n            selectTransforms: DataViewSelectTransform[],\r\n            objectDescriptors: DataViewObjectDescriptors,\r\n            objectDefns: DataViewNamedObjectDefinition[],\r\n            dataObjects: DataViewObjectDefinitionsForSelectorWithRule[],\r\n            colorAllocatorFactory: IColorAllocatorFactory): void {\r\n            debug.assertValue(dataView, 'dataView');\r\n            debug.assertAnyValue(selectTransforms, 'selectTransforms');\r\n            debug.assertValue(objectDescriptors, 'objectDescriptors');\r\n            debug.assertValue(objectDefns, 'objectDefns');\r\n            debug.assertValue(dataObjects, 'dataObjects');\r\n            debug.assertValue(colorAllocatorFactory, 'colorAllocatorFactory');\r\n\r\n            let evalContext = createStaticEvalContext(dataView, selectTransforms);\r\n            let objects = DataViewObjectEvaluationUtils.evaluateDataViewObjects(evalContext, objectDescriptors, objectDefns);\r\n            if (objects) {\r\n                dataView.metadata.objects = objects;\r\n\r\n                for (let objectName in objects) {\r\n                    let object = <DataViewObject>objects[objectName],\r\n                        objectDesc = objectDescriptors[objectName];\r\n\r\n                    for (let propertyName in object) {\r\n                        let propertyDesc = objectDesc.properties[propertyName],\r\n                            ruleDesc = propertyDesc.rule;\r\n                        if (!ruleDesc)\r\n                            continue;\r\n\r\n                        let definition = createRuleEvaluationInstance(\r\n                            dataView,\r\n                            colorAllocatorFactory,\r\n                            ruleDesc,\r\n                            objectName,\r\n                            object[propertyName],\r\n                            propertyDesc.type);\r\n                        if (!definition)\r\n                            continue;\r\n\r\n                        dataObjects.push(definition);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function createRuleEvaluationInstance(\r\n            dataView: DataView,\r\n            colorAllocatorFactory: IColorAllocatorFactory,\r\n            ruleDesc: DataViewObjectPropertyRuleDescriptor,\r\n            objectName: string,\r\n            propertyValue: DataViewPropertyValue,\r\n            ruleType: StructuralTypeDescriptor): DataViewObjectDefinitionsForSelectorWithRule {\r\n            debug.assertValue(dataView, 'dataView');\r\n            debug.assertValue(colorAllocatorFactory, 'colorAllocatorFactory');\r\n            debug.assertValue(ruleDesc, 'ruleDesc');\r\n            debug.assertValue(propertyValue, 'propertyValue');\r\n            debug.assertValue(ruleType, 'ruleType');\r\n\r\n            let ruleOutput = ruleDesc.output;\r\n            if (!ruleOutput)\r\n                return;\r\n\r\n            let selectorToCreate = findSelectorForRuleInput(dataView, ruleOutput.selector);\r\n            if (!selectorToCreate)\r\n                return;\r\n\r\n            if (ruleType.fillRule)\r\n                return createRuleEvaluationInstanceFillRule(dataView, colorAllocatorFactory, ruleDesc, selectorToCreate, objectName, <FillRule>propertyValue);\r\n        }\r\n\r\n        function createRuleEvaluationInstanceFillRule(\r\n            dataView: DataView,\r\n            colorAllocatorFactory: IColorAllocatorFactory,\r\n            ruleDesc: DataViewObjectPropertyRuleDescriptor,\r\n            selectorToCreate: Selector,\r\n            objectName: string,\r\n            propertyValue: FillRule): DataViewObjectDefinitionsForSelectorWithRule {\r\n            debug.assertValue(dataView, 'dataView');\r\n            debug.assertValue(colorAllocatorFactory, 'colorAllocatorFactory');\r\n            debug.assertValue(ruleDesc, 'ruleDesc');\r\n            debug.assertValue(selectorToCreate, 'selectorToCreate');\r\n            debug.assertValue(propertyValue, 'propertyValue');\r\n\r\n            let colorAllocator: IColorAllocator;\r\n            if (propertyValue.linearGradient2)\r\n                colorAllocator = createColorAllocatorLinearGradient2(dataView, colorAllocatorFactory, ruleDesc, propertyValue, propertyValue.linearGradient2);\r\n            else if (propertyValue.linearGradient3)\r\n                colorAllocator = createColorAllocatorLinearGradient3(dataView, colorAllocatorFactory, ruleDesc, propertyValue, propertyValue.linearGradient3);\r\n\r\n            if (!colorAllocator)\r\n                return;\r\n\r\n            let rule = new ColorRuleEvaluation(ruleDesc.inputRole, colorAllocator);\r\n            let fillRuleProperties: DataViewObjectPropertyDefinitions = {};\r\n            fillRuleProperties[ruleDesc.output.property] = {\r\n                solid: { color: rule }\r\n            };\r\n\r\n            return {\r\n                selector: selectorToCreate,\r\n                rules: [rule],\r\n                objects: [{\r\n                    name: objectName,\r\n                    properties: fillRuleProperties,\r\n                }]\r\n            };\r\n        }\r\n\r\n        function createColorAllocatorLinearGradient2(\r\n            dataView: DataView,\r\n            colorAllocatorFactory: IColorAllocatorFactory,\r\n            ruleDesc: DataViewObjectPropertyRuleDescriptor,\r\n            propertyValueFillRule: FillRule,\r\n            linearGradient2: LinearGradient2): IColorAllocator {\r\n            debug.assertValue(dataView, 'dataView');\r\n            debug.assertValue(colorAllocatorFactory, 'colorAllocatorFactory');\r\n            debug.assertValue(ruleDesc, 'ruleDesc');\r\n            debug.assertValue(linearGradient2, 'linearGradient2');\r\n\r\n            linearGradient2 = propertyValueFillRule.linearGradient2;\r\n            if (linearGradient2.min.value === undefined ||\r\n                linearGradient2.max.value === undefined) {\r\n                let inputRange = findRuleInputColumnNumberRange(dataView, ruleDesc.inputRole);\r\n                if (!inputRange)\r\n                    return;\r\n\r\n                if (linearGradient2.min.value === undefined)\r\n                    linearGradient2.min.value = inputRange.min;\r\n                if (linearGradient2.max.value === undefined)\r\n                    linearGradient2.max.value = inputRange.max;\r\n            }\r\n\r\n            return colorAllocatorFactory.linearGradient2(propertyValueFillRule.linearGradient2);\r\n        }\r\n\r\n        function createColorAllocatorLinearGradient3(\r\n            dataView: DataView,\r\n            colorAllocatorFactory: IColorAllocatorFactory,\r\n            ruleDesc: DataViewObjectPropertyRuleDescriptor,\r\n            propertyValueFillRule: FillRule,\r\n            linearGradient3: LinearGradient3): IColorAllocator {\r\n            debug.assertValue(dataView, 'dataView');\r\n            debug.assertValue(colorAllocatorFactory, 'colorAllocatorFactory');\r\n            debug.assertValue(ruleDesc, 'ruleDesc');\r\n            debug.assertValue(linearGradient3, 'linearGradient3');\r\n            let splitScales: boolean = undefined;\r\n            linearGradient3 = propertyValueFillRule.linearGradient3;\r\n            if (linearGradient3.min.value === undefined ||\r\n                linearGradient3.mid.value === undefined ||\r\n                linearGradient3.max.value === undefined) {\r\n                let inputRange = findRuleInputColumnNumberRange(dataView, ruleDesc.inputRole);\r\n                if (!inputRange)\r\n                    return;\r\n\r\n                splitScales =\r\n                linearGradient3.min.value === undefined &&\r\n                linearGradient3.max.value === undefined &&\r\n                linearGradient3.mid.value !== undefined;\r\n\r\n                if (linearGradient3.min.value === undefined) {\r\n                    linearGradient3.min.value = inputRange.min;\r\n                }\r\n                if (linearGradient3.max.value === undefined) {\r\n                    linearGradient3.max.value = inputRange.max;\r\n                }\r\n                if (linearGradient3.mid.value === undefined) {\r\n                    let midValue: number = (linearGradient3.max.value + linearGradient3.min.value) / 2;\r\n                    linearGradient3.mid.value = midValue;\r\n                }\r\n            }\r\n\r\n            return colorAllocatorFactory.linearGradient3(propertyValueFillRule.linearGradient3, splitScales);\r\n        }\r\n\r\n        function evaluateDataRepetition(\r\n            dataView: DataView,\r\n            targetDataViewKinds: StandardDataViewKinds,\r\n            selectTransforms: DataViewSelectTransform[],\r\n            objectDescriptors: DataViewObjectDescriptors,\r\n            selector: Selector,\r\n            rules: RuleEvaluation[],\r\n            objectDefns: DataViewNamedObjectDefinition[]): void {\r\n            debug.assertValue(dataView, 'dataView');\r\n            debug.assertValue(targetDataViewKinds, 'targetDataViewKinds');\r\n            debug.assertValue(selectTransforms, 'selectTransforms');\r\n            debug.assertValue(objectDescriptors, 'objectDescriptors');\r\n            debug.assertValue(selector, 'selector');\r\n            debug.assertAnyValue(rules, 'rules');\r\n            debug.assertValue(objectDefns, 'objectDefns');\r\n\r\n            let containsWildcard = Selector.containsWildcard(selector);\r\n\r\n            let dataViewCategorical = dataView.categorical;\r\n            if (dataViewCategorical && EnumExtensions.hasFlag(targetDataViewKinds, StandardDataViewKinds.Categorical)) {\r\n                // 1) Match against categories\r\n                evaluateDataRepetitionCategoricalCategory(dataViewCategorical, objectDescriptors, selector, rules, containsWildcard, objectDefns);\r\n\r\n                // 2) Match against valueGrouping\r\n                evaluateDataRepetitionCategoricalValueGrouping(dataViewCategorical, objectDescriptors, selector, rules, containsWildcard, objectDefns);\r\n\r\n                // Consider capturing diagnostics for unmatched selectors to help debugging.\r\n            }\r\n\r\n            let dataViewMatrix = dataView.matrix;\r\n            if (dataViewMatrix && EnumExtensions.hasFlag(targetDataViewKinds, StandardDataViewKinds.Matrix)) {\r\n                let rewrittenMatrix = evaluateDataRepetitionMatrix(dataViewMatrix, objectDescriptors, selector, rules, containsWildcard, objectDefns);\r\n                if (rewrittenMatrix) {\r\n                    // TODO: This mutates the DataView -- the assumption is that prototypal inheritance has already occurred.  We should\r\n                    // revisit this, likely when we do lazy evaluation of DataView.\r\n                    dataView.matrix = rewrittenMatrix;\r\n                }\r\n\r\n                // Consider capturing diagnostics for unmatched selectors to help debugging.\r\n            }\r\n\r\n            let dataViewTable = dataView.table;\r\n            if (dataViewTable && EnumExtensions.hasFlag(targetDataViewKinds, StandardDataViewKinds.Table)) {\r\n                let rewrittenTable = evaluateDataRepetitionTable(dataViewTable, selectTransforms, objectDescriptors, selector, rules, containsWildcard, objectDefns);\r\n                if (rewrittenTable) {\r\n                    // TODO: This mutates the DataView -- the assumption is that prototypal inheritance has already occurred.  We should\r\n                    // revisit this, likely when we do lazy evaluation of DataView.\r\n                    dataView.table = rewrittenTable;\r\n                }\r\n\r\n                // Consider capturing diagnostics for unmatched selectors to help debugging.\r\n            }\r\n        }\r\n\r\n        function evaluateDataRepetitionCategoricalCategory(\r\n            dataViewCategorical: DataViewCategorical,\r\n            objectDescriptors: DataViewObjectDescriptors,\r\n            selector: Selector,\r\n            rules: RuleEvaluation[],\r\n            containsWildcard: boolean,\r\n            objectDefns: DataViewNamedObjectDefinition[]): boolean {\r\n            debug.assertValue(dataViewCategorical, 'dataViewCategorical');\r\n            debug.assertValue(objectDescriptors, 'objectDescriptors');\r\n            debug.assertValue(selector, 'selector');\r\n            debug.assertAnyValue(rules, 'rules');\r\n            debug.assertValue(containsWildcard, 'containsWildcard');\r\n            debug.assertValue(objectDefns, 'objectDefns');\r\n\r\n            if (!dataViewCategorical.categories || dataViewCategorical.categories.length === 0)\r\n                return;\r\n\r\n            let targetColumn = findSelectedCategoricalColumn(dataViewCategorical, selector);\r\n            if (!targetColumn)\r\n                return;\r\n\r\n            let identities = targetColumn.identities,\r\n                foundMatch: boolean,\r\n                evalContext = createCategoricalEvalContext(dataViewCategorical);\r\n\r\n            if (!identities)\r\n                return;\r\n\r\n            debug.assert(targetColumn.column.values.length === identities.length, 'Column length mismatch');\r\n\r\n            for (let i = 0, len = identities.length; i < len; i++) {\r\n                let identity = identities[i];\r\n\r\n                if (containsWildcard || Selector.matchesData(selector, [identity])) {\r\n                    evalContext.setCurrentRowIndex(i);\r\n\r\n                    let objects = DataViewObjectEvaluationUtils.evaluateDataViewObjects(evalContext, objectDescriptors, objectDefns);\r\n                    if (objects) {\r\n                        // TODO: This mutates the DataView -- the assumption is that prototypal inheritance has already occurred.  We should\r\n                        // revisit this, likely when we do lazy evaluation of DataView.\r\n                        if (!targetColumn.column.objects) {\r\n                            targetColumn.column.objects = [];\r\n                            targetColumn.column.objects.length = len;\r\n                        }\r\n                        targetColumn.column.objects[i] = objects;\r\n                    }\r\n\r\n                    if (!containsWildcard)\r\n                        return true;\r\n\r\n                    foundMatch = true;\r\n                }\r\n            }\r\n\r\n            return foundMatch;\r\n        }\r\n\r\n        function evaluateDataRepetitionCategoricalValueGrouping(\r\n            dataViewCategorical: DataViewCategorical,\r\n            objectDescriptors: DataViewObjectDescriptors,\r\n            selector: Selector,\r\n            rules: RuleEvaluation[],\r\n            containsWildcard: boolean,\r\n            objectDefns: DataViewNamedObjectDefinition[]): boolean {\r\n            debug.assertValue(dataViewCategorical, 'dataViewCategorical');\r\n            debug.assertValue(objectDescriptors, 'objectDescriptors');\r\n            debug.assertValue(selector, 'selector');\r\n            debug.assertAnyValue(rules, 'rules');\r\n            debug.assertValue(containsWildcard, 'containsWildcard');\r\n            debug.assertValue(objectDefns, 'objectDefns');\r\n\r\n            let dataViewCategoricalValues = dataViewCategorical.values;\r\n            if (!dataViewCategoricalValues || !dataViewCategoricalValues.identityFields)\r\n                return;\r\n\r\n            if (!Selector.matchesKeys(selector, <SQExpr[][]>[dataViewCategoricalValues.identityFields]))\r\n                return;\r\n\r\n            let valuesGrouped = dataViewCategoricalValues.grouped();\r\n            if (!valuesGrouped)\r\n                return;\r\n\r\n            // NOTE: We do not set the evalContext row index below because iteration is over value groups (i.e., columns, no rows).\r\n            // This should be enhanced in the future.\r\n            let evalContext = createCategoricalEvalContext(dataViewCategorical);\r\n\r\n            let foundMatch: boolean;\r\n            for (let i = 0, len = valuesGrouped.length; i < len; i++) {\r\n                let valueGroup = valuesGrouped[i];\r\n                let selectorMetadata = selector.metadata;\r\n                let valuesInGroup = valueGroup.values;\r\n                if (containsWildcard || Selector.matchesData(selector, [valueGroup.identity])) {\r\n                    let objects = DataViewObjectEvaluationUtils.evaluateDataViewObjects(evalContext, objectDescriptors, objectDefns);\r\n                    if (objects) {\r\n                        // TODO: This mutates the DataView -- the assumption is that prototypal inheritance has already occurred.  We should\r\n                        // revisit this, likely when we do lazy evaluation of DataView.\r\n\r\n                        if (selectorMetadata) {\r\n                            for (let j = 0, jlen = valuesInGroup.length; j < jlen; j++) {\r\n                                let valueColumn = valuesInGroup[j],\r\n                                    valueSource = valueColumn.source;\r\n                                if (valueSource.queryName === selectorMetadata) {\r\n                                    let valueSourceOverwrite = Prototype.inherit(valueSource);\r\n                                    valueSourceOverwrite.objects = objects;\r\n                                    valueColumn.source = valueSourceOverwrite;\r\n\r\n                                    foundMatch = true;\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n                            valueGroup.objects = objects;\r\n                            setGrouped(dataViewCategoricalValues, valuesGrouped);\r\n\r\n                            foundMatch = true;\r\n                        }\r\n                    }\r\n\r\n                    if (!containsWildcard)\r\n                        return true;\r\n                }\r\n            }\r\n\r\n            return foundMatch;\r\n        }\r\n\r\n        function evaluateDataRepetitionMatrix(\r\n            dataViewMatrix: DataViewMatrix,\r\n            objectDescriptors: DataViewObjectDescriptors,\r\n            selector: Selector,\r\n            rules: RuleEvaluation[],\r\n            containsWildcard: boolean,\r\n            objectDefns: DataViewNamedObjectDefinition[]): DataViewMatrix {\r\n\r\n            let evalContext = createMatrixEvalContext(dataViewMatrix);\r\n            let rewrittenRows = evaluateDataRepetitionMatrixHierarchy(evalContext, dataViewMatrix.rows, objectDescriptors, selector, rules, containsWildcard, objectDefns);\r\n            let rewrittenCols = evaluateDataRepetitionMatrixHierarchy(evalContext, dataViewMatrix.columns, objectDescriptors, selector, rules, containsWildcard, objectDefns);\r\n\r\n            if (rewrittenRows || rewrittenCols) {\r\n                let rewrittenMatrix = inheritSingle(dataViewMatrix);\r\n\r\n                if (rewrittenRows)\r\n                    rewrittenMatrix.rows = rewrittenRows;\r\n                if (rewrittenCols)\r\n                    rewrittenMatrix.columns = rewrittenCols;\r\n\r\n                return rewrittenMatrix;\r\n            }\r\n        }\r\n\r\n        function evaluateDataRepetitionMatrixHierarchy(\r\n            evalContext: IEvalContext,\r\n            dataViewMatrixHierarchy: DataViewHierarchy,\r\n            objectDescriptors: DataViewObjectDescriptors,\r\n            selector: Selector,\r\n            rules: RuleEvaluation[],\r\n            containsWildcard: boolean,\r\n            objectDefns: DataViewNamedObjectDefinition[]): DataViewHierarchy {\r\n            debug.assertAnyValue(dataViewMatrixHierarchy, 'dataViewMatrixHierarchy');\r\n            debug.assertValue(objectDescriptors, 'objectDescriptors');\r\n            debug.assertValue(selector, 'selector');\r\n            debug.assertAnyValue(rules, 'rules');\r\n            debug.assertValue(objectDefns, 'objectDefns');\r\n\r\n            if (!dataViewMatrixHierarchy)\r\n                return;\r\n\r\n            let root = dataViewMatrixHierarchy.root;\r\n            if (!root)\r\n                return;\r\n\r\n            let rewrittenRoot = evaluateDataRepetitionMatrixNode(evalContext, root, objectDescriptors, selector, rules, containsWildcard, objectDefns);\r\n            if (rewrittenRoot) {\r\n                let rewrittenHierarchy = inheritSingle(dataViewMatrixHierarchy);\r\n                rewrittenHierarchy.root = rewrittenRoot;\r\n\r\n                return rewrittenHierarchy;\r\n            }\r\n        }\r\n\r\n        function evaluateDataRepetitionMatrixNode(\r\n            evalContext: IEvalContext,\r\n            dataViewNode: DataViewMatrixNode,\r\n            objectDescriptors: DataViewObjectDescriptors,\r\n            selector: Selector,\r\n            rules: RuleEvaluation[],\r\n            containsWildcard: boolean,\r\n            objectDefns: DataViewNamedObjectDefinition[]): DataViewMatrixNode {\r\n            debug.assertValue(evalContext, 'evalContext');\r\n            debug.assertValue(dataViewNode, 'dataViewNode');\r\n            debug.assertValue(objectDescriptors, 'objectDescriptors');\r\n            debug.assertValue(selector, 'selector');\r\n            debug.assertAnyValue(rules, 'rules');\r\n            debug.assertValue(objectDefns, 'objectDefns');\r\n\r\n            let childNodes = dataViewNode.children;\r\n            if (!childNodes)\r\n                return;\r\n\r\n            let rewrittenNode: DataViewMatrixNode;\r\n            let shouldSearchChildren: boolean;\r\n            let childIdentityFields = dataViewNode.childIdentityFields;\r\n            if (childIdentityFields) {\r\n                // NOTE: selector matching in matrix currently only considers the current node, and does not consider parents as part of the match.\r\n                shouldSearchChildren = Selector.matchesKeys(selector, <SQExpr[][]>[childIdentityFields]);\r\n            }\r\n\r\n            for (let i = 0, len = childNodes.length; i < len; i++) {\r\n                let childNode = childNodes[i],\r\n                    identity = childNode.identity,\r\n                    rewrittenChildNode: DataViewMatrixNode = null;\r\n\r\n                if (shouldSearchChildren) {\r\n                    if (containsWildcard || Selector.matchesData(selector, [identity])) {\r\n                        // TODO: Need to initialize context for rule-based properties.  Rule-based properties\r\n                        // (such as fillRule/gradients) are not currently implemented.\r\n\r\n                        let objects = DataViewObjectEvaluationUtils.evaluateDataViewObjects(evalContext, objectDescriptors, objectDefns);\r\n                        if (objects) {\r\n                            rewrittenChildNode = inheritSingle(childNode);\r\n                            rewrittenChildNode.objects = objects;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    rewrittenChildNode = evaluateDataRepetitionMatrixNode(\r\n                        evalContext,\r\n                        childNode,\r\n                        objectDescriptors,\r\n                        selector,\r\n                        rules,\r\n                        containsWildcard,\r\n                        objectDefns);\r\n                }\r\n\r\n                if (rewrittenChildNode) {\r\n                    if (!rewrittenNode)\r\n                        rewrittenNode = inheritNodeAndChildren(dataViewNode);\r\n                    rewrittenNode.children[i] = rewrittenChildNode;\r\n\r\n                    if (!containsWildcard) {\r\n                        // NOTE: once we find a match for a non-wildcard selector, stop looking.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return rewrittenNode;\r\n        }\r\n\r\n        function inheritNodeAndChildren(node: DataViewMatrixNode): DataViewMatrixNode {\r\n            if (Object.getPrototypeOf(node) !== Object.prototype) {\r\n                return node;\r\n            }\r\n\r\n            let inherited = inheritSingle(node);\r\n            inherited.children = inherit(node.children);\r\n            return inherited;\r\n        }\r\n\r\n        function evaluateDataRepetitionTable(\r\n            dataViewTable: DataViewTable,\r\n            selectTransforms: DataViewSelectTransform[],\r\n            objectDescriptors: DataViewObjectDescriptors,\r\n            selector: Selector,\r\n            rules: RuleEvaluation[],\r\n            containsWildcard: boolean,\r\n            objectDefns: DataViewNamedObjectDefinition[]): DataViewTable {\r\n            debug.assertValue(dataViewTable, 'dataViewTable');\r\n            debug.assertValue(selectTransforms, 'selectTransforms');\r\n            debug.assertValue(objectDescriptors, 'objectDescriptors');\r\n            debug.assertValue(selector, 'selector');\r\n            debug.assertAnyValue(rules, 'rules');\r\n            debug.assertValue(objectDefns, 'objectDefns');\r\n\r\n            let evalContext = createTableEvalContext(dataViewTable, selectTransforms);\r\n            let rewrittenRows = evaluateDataRepetitionTableRows(\r\n                evalContext,\r\n                dataViewTable.columns,\r\n                dataViewTable.rows,\r\n                dataViewTable.identity,\r\n                dataViewTable.identityFields,\r\n                objectDescriptors,\r\n                selector,\r\n                rules,\r\n                containsWildcard,\r\n                objectDefns);\r\n\r\n            if (rewrittenRows) {\r\n                let rewrittenTable = inheritSingle(dataViewTable);\r\n                rewrittenTable.rows = rewrittenRows;\r\n\r\n                return rewrittenTable;\r\n            }\r\n        }\r\n\r\n        function evaluateDataRepetitionTableRows(\r\n            evalContext: ITableEvalContext,\r\n            columns: DataViewMetadataColumn[],\r\n            rows: DataViewTableRow[],\r\n            identities: DataViewScopeIdentity[],\r\n            identityFields: ISQExpr[],\r\n            objectDescriptors: DataViewObjectDescriptors,\r\n            selector: Selector,\r\n            rules: RuleEvaluation[],\r\n            containsWildcard: boolean,\r\n            objectDefns: DataViewNamedObjectDefinition[]): DataViewTableRow[] {\r\n            debug.assertValue(evalContext, 'evalContext');\r\n            debug.assertValue(columns, 'columns');\r\n            debug.assertValue(rows, 'rows');\r\n            debug.assertAnyValue(identities, 'identities');\r\n            debug.assertAnyValue(identityFields, 'identityFields');\r\n            debug.assertValue(objectDescriptors, 'objectDescriptors');\r\n            debug.assertValue(selector, 'selector');\r\n            debug.assertAnyValue(rules, 'rules');\r\n            debug.assertValue(objectDefns, 'objectDefns');\r\n\r\n            if (_.isEmpty(identities) || _.isEmpty(identityFields))\r\n                return;\r\n\r\n            if (!selector.metadata &&\r\n                !Selector.matchesKeys(selector, <SQExpr[][]>[identityFields]))\r\n                return;\r\n\r\n            let colIdx = _.findIndex(columns, col => col.queryName === selector.metadata);\r\n            if (colIdx < 0)\r\n                return;\r\n\r\n            debug.assert(rows.length === identities.length, 'row length mismatch');\r\n            let colLen = columns.length;\r\n            let inheritedRows: DataViewTableRow[];\r\n\r\n            for (let rowIdx = 0, rowLen = identities.length; rowIdx < rowLen; rowIdx++) {\r\n                let identity = identities[rowIdx];\r\n\r\n                if (containsWildcard || Selector.matchesData(selector, [identity])) {\r\n                    evalContext.setCurrentRowIndex(rowIdx);\r\n\r\n                    let objects = DataViewObjectEvaluationUtils.evaluateDataViewObjects(evalContext, objectDescriptors, objectDefns);\r\n                    if (objects) {\r\n                        if (!inheritedRows)\r\n                            inheritedRows = inheritSingle(rows);\r\n\r\n                        let inheritedRow = inheritedRows[rowIdx] = inheritSingle(inheritedRows[rowIdx]);\r\n                        let objectsForColumns = inheritedRow.objects;\r\n                        if (!objectsForColumns)\r\n                            inheritedRow.objects = objectsForColumns = new Array(colLen);\r\n\r\n                        objectsForColumns[colIdx] = objects;\r\n                    }\r\n\r\n                    if (!containsWildcard)\r\n                        break;\r\n                }\r\n            }\r\n\r\n            return inheritedRows;\r\n        }\r\n\r\n        function evaluateMetadataRepetition(\r\n            dataView: DataView,\r\n            selectTransforms: DataViewSelectTransform[],\r\n            objectDescriptors: DataViewObjectDescriptors,\r\n            selector: Selector,\r\n            objectDefns: DataViewNamedObjectDefinition[]): void {\r\n            debug.assertValue(dataView, 'dataView');\r\n            debug.assertAnyValue(selectTransforms, 'selectTransforms');\r\n            debug.assertValue(objectDescriptors, 'objectDescriptors');\r\n            debug.assertValue(selector, 'selector');\r\n            debug.assertValue(objectDefns, 'objectDefns');\r\n\r\n            // TODO: This mutates the DataView -- the assumption is that prototypal inheritance has already occurred.  We should\r\n            // revisit this, likely when we do lazy evaluation of DataView.\r\n            let columns = dataView.metadata.columns,\r\n                metadataId = selector.metadata,\r\n                evalContext = createStaticEvalContext(dataView, selectTransforms);\r\n            for (let i = 0, len = columns.length; i < len; i++) {\r\n                let column = columns[i];\r\n                if (column.queryName === metadataId) {\r\n                    let objects = DataViewObjectEvaluationUtils.evaluateDataViewObjects(evalContext, objectDescriptors, objectDefns);\r\n                    if (objects)\r\n                        column.objects = objects;\r\n                }\r\n            }\r\n        }\r\n\r\n        /** Attempts to find a column that can possibly match the selector. */\r\n        function findSelectedCategoricalColumn(dataViewCategorical: DataViewCategorical, selector: Selector) {\r\n            debug.assertValue(dataViewCategorical.categories[0], 'dataViewCategorical.categories[0]');\r\n\r\n            let categoricalColumn = dataViewCategorical.categories[0];\r\n            if (!categoricalColumn.identityFields)\r\n                return;\r\n            if (!Selector.matchesKeys(selector, <SQExpr[][]>[categoricalColumn.identityFields]))\r\n                return;\r\n\r\n            let identities = categoricalColumn.identity,\r\n                targetColumn: DataViewCategoricalColumn = categoricalColumn;\r\n\r\n            let selectedMetadataId = selector.metadata;\r\n            if (selectedMetadataId) {\r\n                let valueColumns = dataViewCategorical.values;\r\n                if (valueColumns) {\r\n                    for (let i = 0, len = valueColumns.length; i < len; i++) {\r\n                        let valueColumn = valueColumns[i];\r\n                        if (valueColumn.source.queryName === selectedMetadataId) {\r\n                            targetColumn = valueColumn;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return {\r\n                column: targetColumn,\r\n                identities: identities,\r\n            };\r\n        }\r\n\r\n        function findSelectorForRuleInput(dataView: DataView, selectorRoles: string[]): Selector {\r\n            debug.assertValue(dataView, 'dataView');\r\n            debug.assertValue(selectorRoles, 'selectorRoles');\r\n\r\n            if (selectorRoles.length !== 1)\r\n                return;\r\n\r\n            let dataViewCategorical = dataView.categorical;\r\n            if (!dataViewCategorical)\r\n                return;\r\n\r\n            let categories = dataViewCategorical.categories;\r\n            if (!categories || categories.length !== 1)\r\n                return;\r\n\r\n            let categoryColumn = categories[0],\r\n                categoryRoles = categoryColumn.source.roles,\r\n                categoryIdentityFields = categoryColumn.identityFields;\r\n            if (!categoryRoles || !categoryIdentityFields || !categoryRoles[selectorRoles[0]])\r\n                return;\r\n\r\n            return { data: [DataViewScopeWildcard.fromExprs(<SQExpr[]>categoryIdentityFields)] };\r\n        }\r\n\r\n        /** Attempts to find the value range for the single column with the given inputRole. */\r\n        function findRuleInputColumnNumberRange(dataView: DataView, inputRole: string): NumberRange {\r\n            debug.assertValue(dataView, 'dataView');\r\n            debug.assertValue(inputRole, 'inputRole');\r\n\r\n            // NOTE: This implementation currently only supports categorical DataView, becuase that's the\r\n            // only scenario that has custom colors, as of this writing.  This would be rewritten to be more generic\r\n            // as required, when needed.\r\n            let dataViewCategorical = dataView.categorical;\r\n            if (!dataViewCategorical)\r\n                return;\r\n\r\n            let values = dataViewCategorical.values;\r\n            if (!values)\r\n                return;\r\n\r\n            for (let i = 0, len = values.length; i < len; i++) {\r\n                let valueCol = values[i],\r\n                    valueColRoles = valueCol.source.roles;\r\n\r\n                if (!valueColRoles || !valueColRoles[inputRole])\r\n                    continue;\r\n\r\n                let min = valueCol.min;\r\n                if (min === undefined)\r\n                    min = valueCol.minLocal;\r\n                if (min === undefined)\r\n                    continue;\r\n\r\n                let max = valueCol.max;\r\n                if (max === undefined)\r\n                    max = valueCol.maxLocal;\r\n                if (max === undefined)\r\n                    continue;\r\n\r\n                return { min: min, max: max };\r\n            }\r\n        }\r\n\r\n        export function createValueColumns(\r\n            values: DataViewValueColumn[] = [],\r\n            valueIdentityFields?: SQExpr[],\r\n            source?: DataViewMetadataColumn): DataViewValueColumns {\r\n            let result = <DataViewValueColumns>values;\r\n            setGrouped(<DataViewValueColumns>values);\r\n\r\n            if (valueIdentityFields)\r\n                result.identityFields = valueIdentityFields;\r\n\r\n            if (source)\r\n                result.source = source;\r\n\r\n            return result;\r\n        }\r\n\r\n        function setGrouped(values: DataViewValueColumns, groupedResult?: DataViewValueColumnGroup[]): void {\r\n            values.grouped = groupedResult\r\n                ? () => groupedResult\r\n                : () => groupValues(values);\r\n        }\r\n\r\n        /** Group together the values with a common identity. */\r\n        function groupValues(values: DataViewValueColumn[]): DataViewValueColumnGroup[] {\r\n            debug.assertValue(values, 'values');\r\n\r\n            let groups: DataViewValueColumnGroup[] = [],\r\n                currentGroup: DataViewValueColumnGroup;\r\n\r\n            for (let i = 0, len = values.length; i < len; i++) {\r\n                let value = values[i];\r\n\r\n                if (!currentGroup || currentGroup.identity !== value.identity) {\r\n                    currentGroup = {\r\n                        values: []\r\n                    };\r\n\r\n                    if (value.identity) {\r\n                        currentGroup.identity = value.identity;\r\n\r\n                        let source = value.source;\r\n\r\n                        // allow null, which will be formatted as (Blank).\r\n                        if (source.groupName !== undefined)\r\n                            currentGroup.name = source.groupName;\r\n                        else if (source.displayName)\r\n                            currentGroup.name = source.displayName;\r\n                    }\r\n\r\n                    groups.push(currentGroup);\r\n                }\r\n\r\n                currentGroup.values.push(value);\r\n            }\r\n\r\n            return groups;\r\n        }\r\n\r\n        function pivotIfNecessary(dataView: DataView, dataViewMappings: DataViewMapping[]): DataView {\r\n            debug.assertValue(dataView, 'dataView');\r\n\r\n            let transformedDataView: DataView;\r\n            switch (determineCategoricalTransformation(dataView.categorical, dataViewMappings)) {\r\n                case CategoricalDataViewTransformation.Pivot:\r\n                    transformedDataView = DataViewPivotCategorical.apply(dataView);\r\n                    break;\r\n\r\n                case CategoricalDataViewTransformation.SelfCrossJoin:\r\n                    transformedDataView = DataViewSelfCrossJoin.apply(dataView);\r\n                    break;\r\n            }\r\n\r\n            return transformedDataView || dataView;\r\n        }\r\n\r\n        function determineCategoricalTransformation(categorical: DataViewCategorical, dataViewMappings: DataViewMapping[]): CategoricalDataViewTransformation {\r\n            if (!categorical || _.isEmpty(dataViewMappings))\r\n                return;\r\n\r\n            let categories = categorical.categories;\r\n            if (!categories || categories.length !== 1)\r\n                return;\r\n\r\n            let values = categorical.values;\r\n            if (_.isEmpty(values))\r\n                return;\r\n\r\n            if (values.grouped().some(vg => !!vg.identity))\r\n                return;\r\n\r\n            // If we made it here, the DataView has a single category and no valueGrouping.\r\n            let categoryRoles = categories[0].source.roles;\r\n\r\n            for (let i = 0, len = dataViewMappings.length; i < len; i++) {\r\n                let roleMappingCategorical = dataViewMappings[i].categorical;\r\n                if (!roleMappingCategorical)\r\n                    continue;\r\n\r\n                if (!hasRolesGrouped(categoryRoles, <DataViewGroupedRoleMapping>roleMappingCategorical.values))\r\n                    continue;\r\n\r\n                // If we made it here, the DataView's single category has the value grouping role.\r\n                let categoriesMapping = roleMappingCategorical.categories;\r\n                let hasCategoryRole =\r\n                    hasRolesBind(categoryRoles, <DataViewRoleBindMappingWithReduction>categoriesMapping) ||\r\n                    hasRolesFor(categoryRoles, <DataViewRoleForMappingWithReduction>categoriesMapping);\r\n\r\n                if (hasCategoryRole)\r\n                    return CategoricalDataViewTransformation.SelfCrossJoin;\r\n\r\n                return CategoricalDataViewTransformation.Pivot;\r\n            }\r\n        }\r\n\r\n        function shouldPivotMatrix(matrix: DataViewMatrix, dataViewMappings: DataViewMapping[]): boolean {\r\n            if (!matrix || _.isEmpty(dataViewMappings))\r\n                return;\r\n\r\n            let rowLevels = matrix.rows.levels;\r\n            if (rowLevels.length < 1)\r\n                return;\r\n\r\n            let rows = matrix.rows.root.children;\r\n            if (!rows || rows.length === 0)\r\n                return;\r\n\r\n            let rowRoles = rowLevels[0].sources[0].roles;\r\n\r\n            for (let i = 0, len = dataViewMappings.length; i < len; i++) {\r\n                let roleMappingMatrix = dataViewMappings[i].matrix;\r\n                if (!roleMappingMatrix)\r\n                    continue;\r\n\r\n                if (!hasRolesFor(rowRoles, <DataViewRoleForMappingWithReduction>roleMappingMatrix.rows) &&\r\n                    hasRolesFor(rowRoles, <DataViewRoleForMappingWithReduction>roleMappingMatrix.columns)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        function hasRolesBind(roles: { [name: string]: boolean }, roleMapping: DataViewRoleBindMappingWithReduction): boolean {\r\n            if (roles && roleMapping && roleMapping.bind)\r\n                return roles[roleMapping.bind.to];\r\n        }\r\n\r\n        function hasRolesFor(roles: { [name: string]: boolean }, roleMapping: DataViewRoleForMappingWithReduction): boolean {\r\n            if (roles && roleMapping && roleMapping.for)\r\n                return roles[roleMapping.for.in];\r\n        }\r\n\r\n        function hasRolesGrouped(roles: { [name: string]: boolean }, roleMapping: DataViewGroupedRoleMapping): boolean {\r\n            if (roles && roleMapping && roleMapping.group)\r\n                return roles[roleMapping.group.by];\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    import IStringResourceProvider = jsCommon.IStringResourceProvider;\r\n\r\n    export function createDisplayNameGetter(displayNameKey: string): (IStringResourceProvider) => string {\r\n        return (resourceProvider: IStringResourceProvider) => resourceProvider.get(displayNameKey);\r\n    }\r\n\r\n    export function getDisplayName(displayNameGetter: data.DisplayNameGetter, resourceProvider: jsCommon.IStringResourceProvider): string {\r\n        if (typeof displayNameGetter === 'function')\r\n            return displayNameGetter(resourceProvider);\r\n\r\n        if (typeof displayNameGetter === 'string')\r\n            return displayNameGetter;\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    /** Represents a data reader. */\r\n    export interface IDataReader {\r\n        /** Executes a query, with a promise of completion.  The response object should be compatible with the transform implementation. */\r\n        execute?(options: DataReaderExecutionOptions): RejectablePromise2<DataReaderData, IClientError>;\r\n\r\n        /** Transforms the given data into a DataView.  When this function is not specified, the data is put on a property on the DataView. */\r\n        transform?(obj: DataReaderData): DataReaderTransformResult;\r\n\r\n        /** Stops all future communication and reject and pending communication  */\r\n        stopCommunication?(): void;\r\n\r\n        /** Resumes communication which enables future requests */\r\n        resumeCommunication?(): void;\r\n\r\n        /** Clear cache */\r\n        clearCache?(dataSource: DataReaderDataSource): void;\r\n\r\n        /** rewriteCacheEntries */\r\n        rewriteCacheEntries?(dataSource: DataReaderDataSource, rewriter: DataReaderCacheRewriter): void;\r\n\r\n        /** Sets the result into the local cache */\r\n        setLocalCacheResult?(options: DataReaderExecutionOptions, dataAsObject: DataReaderData): void;\r\n    }\r\n\r\n    /** Represents a query generator. */\r\n    export interface IQueryGenerator {\r\n        /** Query generation function to convert a (prototype) SemanticQuery to a runnable query command. */\r\n        execute(options: QueryGeneratorOptions): QueryGeneratorResult;\r\n    }\r\n\r\n    export interface IFederatedConceptualSchemaReader {\r\n        /** Executes a request for conceptual schema with a promise of completion. */\r\n        execute(options: FederatedConceptualSchemaReaderOptions): IPromise<FederatedConceptualSchemaResponse>;\r\n\r\n        /** Transforms the given data into a FederatedConceptualSchema. */\r\n        transform(obj: FederatedConceptualSchemaResponse): SchemaReaderTransformResult;\r\n    }\r\n\r\n    /** Represents a custom data reader plugin, to be registered in the powerbi.data.plugins object. */\r\n    export interface IDataReaderPlugin {\r\n        /** The name of this plugin. */\r\n        name: string;\r\n        \r\n        /** Factory method for the IDataReader. */\r\n        reader(hostServices: IDataReaderHostServices): IDataReader;\r\n\r\n        /** Factory method for the IQueryGenerator. */\r\n        queryGenerator?(): IQueryGenerator;\r\n\r\n        /** Factory method for the IFederatedConceptualSchemaReader. */\r\n        schemaReader?(hostServices: IDataReaderHostServices): IFederatedConceptualSchemaReader;\r\n    }\r\n\r\n    export interface QueryGeneratorOptions {\r\n        query: SemanticQuery;\r\n        mappings: CompiledDataViewMapping[];\r\n        additionalProjections?: AdditionalQueryProjection[];\r\n        highlightFilter?: SemanticFilter;\r\n        restartToken?: RestartToken;\r\n        viewport?: IViewport;\r\n    }\r\n\r\n    export interface AdditionalQueryProjection {\r\n        queryName: string;\r\n        selector: Selector;\r\n    }\r\n\r\n    export interface QueryGeneratorResult {\r\n        command: DataReaderQueryCommand;\r\n        splits?: DataViewSplitTransform[];\r\n    }\r\n\r\n    export interface DataReaderTransformResult {\r\n        dataView?: DataView;\r\n        restartToken?: RestartToken;\r\n        error?: IClientError;\r\n        warning?: IClientWarning;\r\n    }\r\n\r\n    export interface RestartToken {\r\n        // This interface is intentionally empty, as plugins define their own data structure.\r\n    }\r\n\r\n    export interface DataReaderQueryCommand {\r\n        // This interface is intentionally empty, as plugins define their own data structure.\r\n    }\r\n\r\n    /** Represents a query command defined by an IDataReader. */\r\n    export interface DataReaderCommand {\r\n        // This interface is intentionally empty, as plugins define their own data structure.\r\n    }\r\n\r\n    /** Represents a data source defined by an IDataReader. */\r\n    export interface DataReaderDataSource {\r\n        // This interface is intentionally empty, as plugins define their own data structure.\r\n    }\r\n\r\n    /** Represents arbitrary data defined by an IDataReader. */\r\n    export interface DataReaderData {\r\n        // This interface is intentionally empty, as plugins define their own data structure.\r\n    }\r\n\r\n    /** Represents cacheRewriter that will rewrite the cache of reader as defined by an IDataReader. */\r\n    export interface DataReaderCacheRewriter {\r\n        // This interface is intentionally empty, as plugins define their own data structure.\r\n    }\r\n\r\n    export interface DataReaderExecutionOptions {\r\n        dataSource?: DataReaderDataSource;\r\n        command: DataReaderCommand;\r\n        allowCache?: boolean;\r\n        cacheResponseOnServer?: boolean;\r\n    }\r\n\r\n    export interface FederatedConceptualSchemaReaderOptions {\r\n        dataSources: ConceptualSchemaReaderDataSource[];\r\n    }\r\n\r\n    export interface ConceptualSchemaReaderDataSource {\r\n        id: number;\r\n\r\n        /** Specifies the name used in Semantic Queries to reference this DataSource. */\r\n        name: string;\r\n    }\r\n\r\n    export interface FederatedConceptualSchemaResponse {\r\n        data: FederatedConceptualSchemaData;\r\n    }\r\n\r\n    export interface FederatedConceptualSchemaData {\r\n        // This interface is intentionally empty, as plugins define their own data structure.\r\n    }\r\n\r\n    export interface SchemaReaderTransformResult {\r\n        schema: FederatedConceptualSchema;\r\n        error?: SchemaReaderError;\r\n    }\r\n\r\n    // Defect 5858607, consider removing serviceError and only have IClientError to be more consistent with IDataProxy.\r\n    export interface SchemaReaderError {\r\n        requestId?: string;\r\n        serviceError?: ServiceError;\r\n        clientError: IClientError;\r\n    }\r\n\r\n    export interface IDataReaderHostServices {\r\n        promiseFactory(): IPromiseFactory;\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi {\r\n\r\n    /** Enumeration of DateTimeUnits */\r\n    export enum DateTimeUnit {\r\n        Year,\r\n        Month,\r\n        Week,\r\n        Day,\r\n        Hour,\r\n        Minute,\r\n        Second,\r\n        Millisecond,\r\n    }\r\n\r\n    export interface IFormattingService {\r\n        /** \r\n         * Formats the value using provided format expression and culture\r\n         * @param value - value to be formatted and converted to string.\r\n         * @param format - format to be applied. If undefined or empty then generic format is used.        \r\n         */\r\n        formatValue(value: any, format?: string): string;\r\n\r\n        /** \r\n         * Replaces the indexed format tokens (for example {0:c2}) in the format string with the localized formatted arguments.\r\n         * @param formatWithIndexedTokens - format string with a set of indexed format tokens.\r\n         * @param args - array of values which should replace the tokens in the format string.\r\n         * @param culture - localization culture. If undefined then the current culture is used.\r\n         */\r\n        format(formatWithIndexedTokens: string, args: any[], culture?: string): string;\r\n\r\n        /** Gets a value indicating whether the specified format a standard numeric format specifier. */\r\n        isStandardNumberFormat(format: string): boolean;\r\n\r\n        /** Performs a custom format with a value override.  Typically used for custom formats showing scaled values. */\r\n        formatNumberWithCustomOverride(value: number, format: string, nonScientificOverrideFormat: string): string;\r\n\r\n        /** Gets the format string to use for dates in particular units. */\r\n        dateFormatString(unit: DateTimeUnit): string;\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    /** Represents common expression patterns for 'field' expressions such as columns, column aggregates, measures, etc. */\r\n    export interface FieldExprPattern {\r\n        column?: FieldExprColumnPattern;\r\n        columnAggr?: FieldExprColumnAggrPattern;\r\n        columnHierarchyLevelVariation?: FieldExprColumnHierarchyLevelVariation;\r\n        entityAggr?: FieldExprEntityAggrPattern;\r\n        hierarchyLevel?: FieldExprHierarchyLevelPattern;\r\n        hierarchyLevelAggr?: FieldExprHierarchyLevelAggrPattern;\r\n        hierarchy?: FieldExprHierarchyPattern;\r\n        measure?: FieldExprMeasurePattern;\r\n    }\r\n\r\n    export interface FieldExprEntityItemPattern {\r\n        schema: string;\r\n        entity: string;\r\n        entityVar?: string;\r\n    }\r\n\r\n    export interface FieldExprPropertyPattern extends FieldExprEntityItemPattern {\r\n        name: string;\r\n    }\r\n\r\n    export type FieldExprColumnPattern = FieldExprPropertyPattern;\r\n\r\n    export interface FieldExprColumnAggrPattern extends FieldExprColumnPattern {\r\n        aggregate: QueryAggregateFunction;\r\n    }\r\n    \r\n    export interface FieldExprHierarchyLevelAggrPattern extends FieldExprHierarchyLevelPattern {\r\n        aggregate: QueryAggregateFunction;\r\n    }\r\n\r\n    export module SQExprBuilder {\r\n        export function fieldExpr(fieldExpr: FieldExprPattern): SQExpr {\r\n            return wrapColumnAggr(fieldExpr)\r\n                || wrapColumn(fieldExpr)\r\n                || wrapMeasure(fieldExpr)\r\n                || wrapHierarchyLevel(fieldExpr)\r\n                || wrapHierarchy(fieldExpr)\r\n                || wrapEntityAggr(fieldExpr)\r\n                || wrapPropertyVariationSource(fieldExpr)\r\n                || wrapEntity(fieldExpr);\r\n        }\r\n\r\n        function wrapColumnAggr(fieldExpr: FieldExprPattern): SQExpr {\r\n            let aggr = fieldExpr.columnAggr;\r\n            if (aggr) {\r\n                let entityExpr = wrapEntity(fieldExpr.columnAggr);\r\n                return aggregate(columnRef(entityExpr, aggr.name), aggr.aggregate);\r\n            }\r\n        }\r\n\r\n        function wrapHierarchyLevel(fieldExpr: FieldExprPattern): SQExpr {\r\n            let hierarchyLevelPattern = fieldExpr.hierarchyLevel;\r\n            if (hierarchyLevelPattern) {\r\n                let hierarchyExpr = hierarchy(wrapEntity(hierarchyLevelPattern), hierarchyLevelPattern.name);\r\n                return hierarchyLevel(hierarchyExpr, hierarchyLevelPattern.level);\r\n            }\r\n        }\r\n\r\n        function wrapHierarchy(fieldExpr: FieldExprPattern): SQExpr {\r\n            let hierarchyExprPattern = fieldExpr.hierarchy;\r\n            if (hierarchyExprPattern) {\r\n                let entityExpr = wrapEntity(hierarchyExprPattern);\r\n                return hierarchy(entityExpr, hierarchyExprPattern.name);\r\n            }\r\n        }\r\n\r\n        function wrapPropertyVariationSource(fieldExpr: FieldExprPattern): SQExpr {\r\n            let variation = fieldExpr.columnHierarchyLevelVariation;\r\n            if (variation) {\r\n                let entitiyExpr = wrapEntity(variation.source);\r\n                return propertyVariationSource(entitiyExpr, variation.source.name, variation.level.name);\r\n            }\r\n        }\r\n\r\n        function wrapColumn(fieldExpr: FieldExprPattern): SQExpr {\r\n            let column = fieldExpr.column;\r\n            if (column) {\r\n                let entityExpr = wrapEntity(fieldExpr.column);\r\n                return columnRef(entityExpr, column.name);\r\n            }\r\n        }\r\n\r\n        function wrapMeasure(fieldExpr: FieldExprPattern): SQExpr {\r\n            let measure = fieldExpr.measure;\r\n            if (measure) {\r\n                let entityExpr = wrapEntity(fieldExpr.measure);\r\n                return measureRef(entityExpr, measure.name);\r\n            }\r\n        }\r\n\r\n        function wrapEntityAggr(fieldExpr: FieldExprPattern): SQExpr {\r\n            let entityAggregate = fieldExpr.entityAggr;\r\n\r\n            if (entityAggregate) {\r\n                let entityExpr = wrapEntity(fieldExpr.entityAggr);\r\n                return aggregate(entityExpr, entityAggregate.aggregate);\r\n            }\r\n        }\r\n\r\n        function wrapEntity(fieldExpr: FieldExprPattern): SQExpr {\r\n            let fieldExprEntityItemPattern = FieldExprPattern.toFieldExprEntityItemPattern(fieldExpr);\r\n            return entity(fieldExprEntityItemPattern.schema, fieldExprEntityItemPattern.entity, fieldExprEntityItemPattern.entityVar);\r\n        }\r\n    }\r\n\r\n    export interface FieldExprColumnHierarchyLevelVariation {\r\n        source: FieldExprColumnPattern;\r\n        level: FieldExprHierarchyLevelPattern;\r\n        variationName: string;\r\n    }\r\n\r\n    export interface FieldExprEntityAggrPattern extends FieldExprEntityItemPattern {\r\n        aggregate: QueryAggregateFunction;\r\n    }\r\n\r\n    export interface FieldExprHierarchyLevelPattern extends FieldExprEntityItemPattern {\r\n        level: string;\r\n        name: string;\r\n    }\r\n\r\n    export interface FieldExprHierarchyPattern extends FieldExprEntityItemPattern {\r\n        name: string;\r\n    }\r\n    export type FieldExprMeasurePattern = FieldExprPropertyPattern;\r\n\r\n    export module SQExprConverter {\r\n        export function asFieldPattern(sqExpr: SQExpr): FieldExprPattern {\r\n            // TODO: adding entity to the FieldExprPattern\r\n            if (sqExpr instanceof data.SQEntityExpr) {\r\n                return {\r\n                    entity: sqExpr.entity,\r\n                    schema: sqExpr.schema,\r\n                };\r\n            }\r\n\r\n            return sqExpr.accept(FieldExprPatternBuilder.instance);\r\n        }\r\n    }\r\n\r\n    interface FieldExprSourceVariationPattern {\r\n        column: FieldExprColumnPattern;\r\n        variationName: string;\r\n    }\r\n\r\n    interface SourceExprPattern {\r\n        entity?: FieldExprEntityItemPattern;\r\n\r\n        // TODO: Change FieldExprHierarchyPattern to FieldExprHierarchyLevelPattern\r\n        hierarchy?: FieldExprHierarchyPattern;\r\n        variation?: FieldExprSourceVariationPattern;\r\n    }\r\n\r\n    interface HierarchySourceExprPattern {\r\n        hierarchy: FieldExprHierarchyPattern;\r\n        variation?: FieldExprSourceVariationPattern;\r\n    }\r\n\r\n    class FieldExprPatternBuilder extends DefaultSQExprVisitor<FieldExprPattern> {\r\n        public static instance: FieldExprPatternBuilder = new FieldExprPatternBuilder();\r\n\r\n        public visitColumnRef(expr: SQColumnRefExpr): FieldExprPattern {\r\n            let sourceRef = expr.source.accept(SourceExprPatternBuilder.instance);\r\n            if (!sourceRef)\r\n                return;\r\n\r\n            if (sourceRef.entity) {\r\n                let columnRef = <FieldExprColumnPattern>sourceRef.entity;\r\n                columnRef.name = expr.ref;\r\n\r\n                return { column: columnRef };\r\n            }\r\n        }\r\n\r\n        public visitMeasureRef(expr: SQMeasureRefExpr): FieldExprPattern {\r\n            let sourceRef = expr.source.accept(SourceExprPatternBuilder.instance);\r\n            if (!sourceRef)\r\n                return;\r\n\r\n            if (sourceRef.entity) {\r\n                let measureRef = <FieldExprMeasurePattern>sourceRef.entity;\r\n                measureRef.name = expr.ref;\r\n\r\n                return { measure: measureRef };\r\n            }\r\n        }\r\n\r\n        public visitAggr(expr: SQAggregationExpr): FieldExprPattern {\r\n            let fieldPattern: FieldExprPattern = expr.arg.accept(this);\r\n            if (fieldPattern && fieldPattern.column) {\r\n                let argAggr = <FieldExprColumnAggrPattern>fieldPattern.column;\r\n                argAggr.aggregate = expr.func;\r\n                return { columnAggr: argAggr };\r\n            } else if (fieldPattern && fieldPattern.columnAggr) {\r\n                let argAggr = <FieldExprColumnAggrPattern>fieldPattern.columnAggr;\r\n                argAggr.aggregate = expr.func;\r\n                return { columnAggr: argAggr };\r\n            } else if (fieldPattern && fieldPattern.hierarchyLevel) {\r\n                let argAggr = <FieldExprHierarchyLevelAggrPattern>fieldPattern.hierarchyLevel;\r\n                argAggr.aggregate = expr.func;\r\n                return { hierarchyLevelAggr: argAggr };\r\n            }\r\n\r\n            let sourcePattern = expr.arg.accept(SourceExprPatternBuilder.instance);\r\n            if (sourcePattern && sourcePattern.entity) {\r\n                let argAggr = <FieldExprEntityAggrPattern>sourcePattern.entity;\r\n                argAggr.aggregate = expr.func;\r\n\r\n                return { entityAggr: argAggr };\r\n            }\r\n        }\r\n\r\n        public visitHierarchy(expr: SQHierarchyExpr): FieldExprPattern {\r\n            let sourcePattern = expr.arg.accept(SourceExprPatternBuilder.instance);\r\n\r\n            if (sourcePattern && sourcePattern.entity) {\r\n                let hierarchyRef = <FieldExprHierarchyPattern>(sourcePattern.entity);\r\n                hierarchyRef.name = expr.hierarchy;\r\n                return { hierarchy: hierarchyRef };\r\n            }\r\n        }\r\n\r\n        public visitHierarchyLevel(expr: SQHierarchyLevelExpr): FieldExprPattern {\r\n            let hierarchySourceExprPattern: HierarchySourceExprPattern = expr.arg.accept(HierarchyExprPatternBuiler.instance);\r\n            if (!hierarchySourceExprPattern)\r\n                return;\r\n\r\n            let hierarchyLevel: FieldExprHierarchyLevelPattern;\r\n            if (hierarchySourceExprPattern.hierarchy) {\r\n                hierarchyLevel = {\r\n                    entity: hierarchySourceExprPattern.hierarchy.entity,\r\n                    schema: hierarchySourceExprPattern.hierarchy.schema,\r\n                    name: hierarchySourceExprPattern.hierarchy.name,\r\n                    level: expr.level,\r\n                };\r\n            }\r\n\r\n            if (hierarchySourceExprPattern.variation) {\r\n                return {\r\n                    columnHierarchyLevelVariation: {\r\n                        source: {\r\n                            entity: hierarchySourceExprPattern.variation.column.entity,\r\n                            schema: hierarchySourceExprPattern.variation.column.schema,\r\n                            name: hierarchySourceExprPattern.variation.column.name,\r\n                        },\r\n                        level: hierarchyLevel,\r\n                        variationName: hierarchySourceExprPattern.variation.variationName,\r\n                    }\r\n                };\r\n            }\r\n\r\n            return { hierarchyLevel: hierarchyLevel };\r\n        }\r\n    }\r\n\r\n    class SourceExprPatternBuilder extends DefaultSQExprVisitor<SourceExprPattern> {\r\n        public static instance: SourceExprPatternBuilder = new SourceExprPatternBuilder();\r\n\r\n        public visitEntity(expr: SQEntityExpr): SourceExprPattern {\r\n            let entityRef: FieldExprEntityItemPattern = {\r\n                schema: expr.schema,\r\n                entity: expr.entity\r\n            };\r\n            if (expr.variable)\r\n                entityRef.entityVar = expr.variable;\r\n\r\n            return { entity: entityRef };\r\n        }\r\n\r\n        public visitPropertyVariationSource(expr: SQPropertyVariationSourceExpr): SourceExprPattern {\r\n            let entityExpr = <SQEntityExpr>expr.arg;\r\n\r\n            if (entityExpr instanceof SQEntityExpr) {\r\n                let propertyVariationSource: FieldExprColumnPattern = {\r\n                    schema: entityExpr.schema,\r\n                    entity: entityExpr.entity,\r\n                    name: expr.property,\r\n                };\r\n\r\n                if (entityExpr.variable)\r\n                    propertyVariationSource.entityVar = entityExpr.variable;\r\n\r\n                return {\r\n                    variation: {\r\n                        column: propertyVariationSource,\r\n                        variationName: expr.name,\r\n                    }\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    class HierarchyExprPatternBuiler extends DefaultSQExprVisitor<HierarchySourceExprPattern> {\r\n        public static instance: HierarchyExprPatternBuiler = new HierarchyExprPatternBuiler();\r\n\r\n        public visitHierarchy(expr: SQHierarchyExpr): HierarchySourceExprPattern {\r\n            let exprPattern = expr.arg.accept(SourceExprPatternBuilder.instance);\r\n            let hierarchyRef: FieldExprHierarchyPattern;\r\n            let variationRef: FieldExprSourceVariationPattern;\r\n\r\n            if (exprPattern.variation) {\r\n                hierarchyRef = {\r\n                    name: expr.hierarchy,\r\n                    schema: exprPattern.variation.column.schema,\r\n                    entity: exprPattern.variation.column.entity,\r\n                };\r\n                variationRef = exprPattern.variation;\r\n            }\r\n            else\r\n                hierarchyRef = {\r\n                    name: expr.hierarchy,\r\n                    schema: exprPattern.entity.schema,\r\n                    entity: exprPattern.entity.entity,\r\n                };\r\n\r\n            return {\r\n                hierarchy: hierarchyRef,\r\n                variation: variationRef\r\n            };\r\n        }\r\n    }\r\n\r\n    export module FieldExprPattern {\r\n        export function hasFieldExprName(fieldExpr: FieldExprPattern): boolean {\r\n            return (fieldExpr.column ||\r\n                fieldExpr.columnAggr ||\r\n                fieldExpr.measure) !== undefined;\r\n        }\r\n\r\n        export function getPropertyName(fieldExpr: FieldExprPattern): string {\r\n            let column = (fieldExpr.column ||\r\n                fieldExpr.columnAggr ||\r\n                fieldExpr.measure);\r\n\r\n            if (column)\r\n                return column.name;\r\n        }\r\n\r\n        export function getHierarchyName(fieldExpr: FieldExprPattern): string {\r\n            let hierarchy = fieldExpr.hierarchy;\r\n            if (hierarchy)\r\n                return hierarchy.name;\r\n        }\r\n\r\n        export function getColumnRef(fieldExpr: FieldExprPattern): FieldExprPropertyPattern {\r\n            if (fieldExpr.columnHierarchyLevelVariation)\r\n                return fieldExpr.columnHierarchyLevelVariation.source;\r\n\r\n            return fieldExpr.column || fieldExpr.measure || fieldExpr.columnAggr;\r\n        }\r\n\r\n        export function getFieldExprName(fieldExpr: FieldExprPattern): string {\r\n            let name = getPropertyName(fieldExpr);\r\n\r\n            if (name)\r\n                return name;\r\n\r\n            // In case it is an entity\r\n            return toFieldExprEntityItemPattern(fieldExpr).entity;\r\n        }\r\n\r\n        export function toFieldExprEntityItemPattern(fieldExpr: FieldExprPattern): FieldExprEntityItemPattern {\r\n            let field = <FieldExprEntityItemPattern>(fieldExpr.column ||\r\n                fieldExpr.columnAggr ||\r\n                fieldExpr.entityAggr ||\r\n                fieldExpr.hierarchy ||\r\n                fieldExpr.hierarchyLevel ||\r\n                fieldExpr.hierarchyLevelAggr ||\r\n                fieldExpr.measure ||\r\n                (fieldExpr.columnHierarchyLevelVariation && fieldExpr.columnHierarchyLevelVariation.source) ||\r\n                fieldExpr); // fieldExpr for entity\r\n\r\n            return {\r\n                schema: field.schema,\r\n                entity: field.entity,\r\n                entityVar: field.entityVar,\r\n            };\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi {\r\n    export module DataViewAnalysis {\r\n        import ArrayExtensions = jsCommon.ArrayExtensions;\r\n        import QueryProjectionsByRole = powerbi.data.QueryProjectionsByRole;\r\n        import DataViewObjectDescriptors = powerbi.data.DataViewObjectDescriptors;\r\n        import DataViewObjectDefinitions = powerbi.data.DataViewObjectDefinitions;\r\n\r\n        export interface ValidateAndReshapeResult {\r\n            dataView?: DataView;\r\n            isValid: boolean;\r\n        }\r\n\r\n        export interface RoleKindByQueryRef {\r\n            [queryRef: string]: VisualDataRoleKind;\r\n        }\r\n\r\n        export interface DataViewMappingResult {\r\n            supportedMappings: DataViewMapping[];\r\n\r\n            /** A set of mapping errors if there are no supported mappings */\r\n            mappingErrors: DataViewMappingMatchError[];\r\n        }\r\n\r\n        export enum DataViewMappingMatchErrorCode {\r\n            conditionRangeTooLarge,\r\n            conditionRangeTooSmall,\r\n            conditionKindExpectedMeasure,\r\n            conditionKindExpectedGrouping,\r\n            conditionKindExpectedGroupingOrMeasure,\r\n        }\r\n\r\n        export interface DataViewMappingMatchError {\r\n            code: DataViewMappingMatchErrorCode;\r\n            roleName: string;\r\n            mappingIndex?: number;\r\n            conditionIndex?: number;\r\n        }\r\n\r\n        /** Reshapes the data view to match the provided schema if possible. If not, returns null */\r\n        export function validateAndReshape(dataView: DataView, dataViewMappings: DataViewMapping[]): ValidateAndReshapeResult {\r\n            if (!dataViewMappings || dataViewMappings.length === 0)\r\n                return { dataView: dataView, isValid: true };\r\n\r\n            if (dataView) {\r\n                for (let dataViewMapping of dataViewMappings) {\r\n                    // Keep the original when possible.\r\n                    if (supports(dataView, dataViewMapping))\r\n                        return { dataView: dataView, isValid: true };\r\n\r\n                    if (dataViewMapping.categorical && dataView.categorical)\r\n                        return reshapeCategorical(dataView, dataViewMapping);\r\n\r\n                    if (dataViewMapping.tree && dataView.tree)\r\n                        return reshapeTree(dataView, dataViewMapping.tree);\r\n\r\n                    if (dataViewMapping.single && dataView.single)\r\n                        return reshapeSingle(dataView, dataViewMapping.single);\r\n\r\n                    if (dataViewMapping.table && dataView.table)\r\n                        return reshapeTable(dataView, dataViewMapping.table);\r\n                }\r\n            }\r\n            else if (ScriptResultUtil.findScriptResult(dataViewMappings)) {\r\n                // Currently, PBI Service treats R Script Visuals as static images.\r\n                // This causes validation to fail, since in PBI service no DataView is generated, but there are DataViewMappings,\r\n                // to support the PBI Desktop scenario.\r\n                // This code will be removed once PBI Service fully supports R Script Visuals.\r\n                // VSTS: 6217994 - [R Viz] Remove temporary DataViewAnalysis validation workaround of static R Script Visual mappings\r\n                return { dataView: dataView, isValid: true };\r\n            }\r\n\r\n            return { isValid: false };\r\n        }\r\n\r\n        function reshapeCategorical(dataView: DataView, dataViewMapping: DataViewMapping): ValidateAndReshapeResult {\r\n            debug.assertValue(dataViewMapping, 'dataViewMapping');\r\n\r\n            //The functionality that used to compare categorical.values.length to schema.values doesn't apply any more, we don't want to use the same logic for re-shaping.\r\n            let categoryRoleMapping = dataViewMapping.categorical;\r\n            let categorical = dataView.categorical;\r\n            if (!categorical)\r\n                return { isValid: false };\r\n\r\n            let rowCount;\r\n            if (categoryRoleMapping.rowCount) {\r\n                rowCount = categoryRoleMapping.rowCount.supported;\r\n                if (rowCount && rowCount.max) {\r\n                    let updated: DataViewCategorical;\r\n                    let categories = categorical.categories;\r\n                    let maxRowCount = rowCount.max;\r\n                    let originalLength = undefined;\r\n                    if (categories) {\r\n                        for (let i = 0, len = categories.length; i < len; i++) {\r\n                            let category = categories[i];\r\n                            originalLength = category.values.length;\r\n                            if (maxRowCount !== undefined && originalLength > maxRowCount) {\r\n\r\n                                // Row count too large: Trim it to fit.\r\n                                let updatedCategories = ArrayExtensions.range(category.values, 0, maxRowCount - 1);\r\n\r\n                                updated = updated || { categories: [] };\r\n                                updated.categories.push({\r\n                                    source: category.source,\r\n                                    values: updatedCategories\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (categorical.values && categorical.values.length > 0 && maxRowCount) {\r\n                        if (!originalLength)\r\n                            originalLength = categorical.values[0].values.length;\r\n\r\n                        if (maxRowCount !== undefined && originalLength > maxRowCount) {\r\n                            updated = updated || {};\r\n                            updated.values = data.DataViewTransform.createValueColumns();\r\n\r\n                            for (let i = 0, len = categorical.values.length; i < len; i++) {\r\n                                let column = categorical.values[i],\r\n                                    updatedColumn: DataViewValueColumn = {\r\n                                        source: column.source,\r\n                                        values: ArrayExtensions.range(column.values, 0, maxRowCount - 1)\r\n                                    };\r\n\r\n                                if (column.min !== undefined)\r\n                                    updatedColumn.min = column.min;\r\n                                if (column.max !== undefined)\r\n                                    updatedColumn.max = column.max;\r\n                                if (column.subtotal !== undefined)\r\n                                    updatedColumn.subtotal = column.subtotal;\r\n\r\n                                updated.values.push(updatedColumn);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (updated) {\r\n                        dataView = {\r\n                            metadata: dataView.metadata,\r\n                            categorical: updated,\r\n                        };\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (supportsCategorical(dataView, dataViewMapping))\r\n                return { dataView: dataView, isValid: true };\r\n\r\n            return null;\r\n        }\r\n\r\n        function reshapeSingle(dataView: DataView, singleRoleMapping: DataViewSingleMapping): ValidateAndReshapeResult {\r\n            debug.assertValue(dataView, 'dataView');\r\n            debug.assertValue(singleRoleMapping, 'singleRoleMapping');\r\n\r\n            if (dataView.single)\r\n                return { dataView: dataView, isValid: true };\r\n\r\n            return { isValid: false };\r\n        }\r\n\r\n        function reshapeTree(dataView: DataView, treeRoleMapping: DataViewTreeMapping): ValidateAndReshapeResult {\r\n            debug.assertValue(dataView, 'dataView');\r\n            debug.assertValue(treeRoleMapping, 'treeRoleMapping');\r\n\r\n            // TODO: Need to implement the reshaping of Tree\r\n            let metadata = dataView.metadata;\r\n            if (validateRange(countGroups(metadata.columns), treeRoleMapping.depth) == null /*&& conforms(countMeasures(metadata.columns), treeRoleMapping.aggregates)*/)\r\n                return { dataView: dataView, isValid: true };\r\n\r\n            return { isValid: false };\r\n        }\r\n\r\n        function reshapeTable(dataView: DataView, tableRoleMapping: DataViewTableMapping): ValidateAndReshapeResult {\r\n            debug.assertValue(dataView, 'dataView');\r\n            debug.assertValue(tableRoleMapping, 'tableRoleMapping');\r\n\r\n            if (dataView.table)\r\n                return { dataView: dataView, isValid: true };\r\n\r\n            return { isValid: false };\r\n        }\r\n\r\n        export function countGroups(columns: DataViewMetadataColumn[]): number {\r\n            let count = 0;\r\n\r\n            for (let i = 0, len = columns.length; i < len; i++) {\r\n                if (!columns[i].isMeasure)\r\n                    ++count;\r\n            }\r\n\r\n            return count;\r\n        }\r\n\r\n        export function countMeasures(columns: DataViewMetadataColumn[]): number {\r\n            let count = 0;\r\n\r\n            for (let i = 0, len = columns.length; i < len; i++) {\r\n                if (columns[i].isMeasure)\r\n                    ++count;\r\n            }\r\n\r\n            return count;\r\n        }\r\n\r\n        /** Indicates whether the dataView conforms to the specified schema. */\r\n        export function supports(dataView: DataView, roleMapping: DataViewMapping, usePreferredDataViewSchema?: boolean): boolean {\r\n            if (!roleMapping || !dataView)\r\n                return false;\r\n\r\n            if (roleMapping.scriptResult && !supportsScriptResult(dataView.scriptResult, roleMapping.scriptResult))\r\n                return false;\r\n\r\n            if (roleMapping.categorical && !supportsCategorical(dataView, roleMapping.categorical, usePreferredDataViewSchema))\r\n                return false;\r\n\r\n            if (roleMapping.tree && !supportsTree(dataView, roleMapping.tree))\r\n                return false;\r\n\r\n            if (roleMapping.single && !supportsSingle(dataView.single, roleMapping.single))\r\n                return false;\r\n\r\n            if (roleMapping.table && !supportsTable(dataView.table, roleMapping.table, usePreferredDataViewSchema))\r\n                return false;\r\n\r\n            return true;\r\n        }\r\n\r\n        function supportsCategorical(dataView: DataView, categoryRoleMapping: DataViewCategoricalMapping, usePreferredDataViewSchema?: boolean): boolean {\r\n            debug.assertValue(categoryRoleMapping, 'categoryRoleMapping');\r\n\r\n            let dataViewCategorical = dataView.categorical;\r\n            if (!dataViewCategorical)\r\n                return false;\r\n\r\n            // TODO: Disabling this implementation isn't right.\r\n            //if (!conforms(countMeasures(dataView.metadata.columns), categoryRoleMapping.values.roles.length))\r\n            //    return false;\r\n\r\n            if (categoryRoleMapping.rowCount) {\r\n                let rowCount = categoryRoleMapping.rowCount.supported;\r\n                if (usePreferredDataViewSchema && categoryRoleMapping.rowCount.preferred)\r\n                    rowCount = categoryRoleMapping.rowCount.preferred;\r\n\r\n                if (rowCount) {\r\n                    let len: number = 0;\r\n                    if (dataViewCategorical.values && dataViewCategorical.values.length)\r\n                        len = dataViewCategorical.values[0].values.length;\r\n                    else if (dataViewCategorical.categories && dataViewCategorical.categories.length)\r\n                        len = dataViewCategorical.categories[0].values.length;\r\n\r\n                    if (validateRange(len, rowCount) != null)\r\n                        return false;\r\n                }\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        function supportsSingle(dataViewSingle: DataViewSingle, singleRoleMapping: DataViewSingleMapping): boolean {\r\n            debug.assertValue(singleRoleMapping, 'singleRoleMapping');\r\n\r\n            if (!dataViewSingle)\r\n                return false;\r\n\r\n            return true;\r\n        }\r\n\r\n        function supportsTree(dataView: DataView, treeRoleMapping: DataViewTreeMapping): boolean {\r\n            debug.assertValue(treeRoleMapping, 'treeRoleMapping');\r\n\r\n            let metadata = dataView.metadata;\r\n            return validateRange(countGroups(metadata.columns), treeRoleMapping.depth) == null;\r\n        }\r\n\r\n        function supportsTable(dataViewTable: DataViewTable, tableRoleMapping: DataViewTableMapping, usePreferredDataViewSchema?: boolean): boolean {\r\n            debug.assertValue(tableRoleMapping, 'tableRoleMapping');\r\n\r\n            if (!dataViewTable)\r\n                return false;\r\n\r\n            if (tableRoleMapping.rowCount) {\r\n                let rowCount = tableRoleMapping.rowCount.supported;\r\n                if (usePreferredDataViewSchema && tableRoleMapping.rowCount.preferred)\r\n                    rowCount = tableRoleMapping.rowCount.preferred;\r\n\r\n                if (rowCount) {\r\n                    let len: number = 0;\r\n                    if (dataViewTable.rows && dataViewTable.rows.length)\r\n                        len = dataViewTable.rows.length;\r\n\r\n                    if (validateRange(len, rowCount) != null)\r\n                        return false;\r\n                }\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        function supportsScriptResult(dataView: DataViewScriptResultData, scriptResultRoleMapping: DataViewScriptResultMapping): boolean {\r\n            debug.assertValue(scriptResultRoleMapping, 'scriptResultRoleMapping');\r\n\r\n            if (!dataView)\r\n                return false;\r\n\r\n            if (!dataView.imageBase64)\r\n                return false;\r\n\r\n            return true;\r\n        }\r\n\r\n        /** \r\n         * Determines whether the value conforms to the range in the role condition, returning undefined\r\n         * if so or an appropriate error code if not.\r\n         */\r\n        export function validateRange(value: number, roleCondition: RoleCondition, ignoreMin?: boolean): DataViewMappingMatchErrorCode {\r\n            debug.assertValue(value, 'value');\r\n\r\n            if (!roleCondition)\r\n                return;\r\n\r\n            if (!ignoreMin && roleCondition.min !== undefined && roleCondition.min > value)\r\n                return DataViewMappingMatchErrorCode.conditionRangeTooSmall;\r\n\r\n            if (roleCondition.max !== undefined && roleCondition.max < value)\r\n                return DataViewMappingMatchErrorCode.conditionRangeTooLarge;\r\n        }\r\n\r\n        /** \r\n         * Determines whether the value conforms to the kind in the role condition, returning undefined\r\n         * if so or an appropriate error code if not.\r\n         */\r\n        function validateKind(roleCondition: RoleCondition, roleName: string, projections: QueryProjectionsByRole, roleKindByQueryRef: RoleKindByQueryRef): DataViewMappingMatchErrorCode {\r\n            if (!roleCondition || roleCondition.kind === undefined) {\r\n                return;\r\n            }\r\n            let expectedKind = roleCondition.kind;\r\n            let roleCollection = projections[roleName];\r\n            if (roleCollection) {\r\n                let roleProjections = roleCollection.all();\r\n                for (let roleProjection of roleProjections) {\r\n                    if (roleKindByQueryRef[roleProjection.queryRef] !== expectedKind) {\r\n                        switch (expectedKind) {\r\n                            case VisualDataRoleKind.Measure:\r\n                                return DataViewMappingMatchErrorCode.conditionKindExpectedMeasure;\r\n                            case VisualDataRoleKind.Grouping:\r\n                                return DataViewMappingMatchErrorCode.conditionKindExpectedGrouping;\r\n                            case VisualDataRoleKind.GroupingOrMeasure:\r\n                                return DataViewMappingMatchErrorCode.conditionKindExpectedGroupingOrMeasure;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        /** Determines the appropriate DataViewMappings for the projections. */\r\n        export function chooseDataViewMappings(\r\n            projections: QueryProjectionsByRole,\r\n            mappings: DataViewMapping[],\r\n            roleKindByQueryRef: RoleKindByQueryRef,\r\n            objectDescriptors?: DataViewObjectDescriptors,\r\n            objectDefinitions?: DataViewObjectDefinitions): DataViewMappingResult {\r\n            debug.assertValue(projections, 'projections');\r\n            debug.assertValue(mappings, 'mappings');\r\n\r\n            let supportedMappings: DataViewMapping[] = [];\r\n            let errors: DataViewMappingMatchError[] = [];\r\n\r\n            for (let mappingIndex = 0, mappingCount = mappings.length; mappingIndex < mappingCount; mappingIndex++) {\r\n                let mapping = mappings[mappingIndex],\r\n                    mappingConditions = mapping.conditions,\r\n                    requiredProperties = mapping.requiredProperties;\r\n                let allPropertiesValid: boolean = areAllPropertiesValid(requiredProperties, objectDescriptors, objectDefinitions);\r\n                let conditionsMet: DataViewMappingCondition[] = [];\r\n\r\n                if (!_.isEmpty(mappingConditions)) {\r\n                    for (let conditionIndex = 0, conditionCount = mappingConditions.length; conditionIndex < conditionCount; conditionIndex++) {\r\n                        let condition = mappingConditions[conditionIndex];\r\n                        let currentConditionErrors = checkForConditionErrors(projections, condition, roleKindByQueryRef);\r\n                        if (!_.isEmpty(currentConditionErrors)) {\r\n                            for (let error of currentConditionErrors) {\r\n                                error.mappingIndex = mappingIndex;\r\n                                error.conditionIndex = conditionIndex;\r\n                                errors.push(error);\r\n                            }\r\n                        }\r\n                        else\r\n                            conditionsMet.push(condition);\r\n                    }\r\n                }\r\n                else {\r\n                    conditionsMet.push({});\r\n                }\r\n\r\n                if (!_.isEmpty(conditionsMet) && allPropertiesValid) {\r\n                    let supportedMapping = _.cloneDeep(mapping);\r\n\r\n                    let updatedConditions = _.filter(conditionsMet, (condition) => Object.keys(condition).length > 0);\r\n                    if (!_.isEmpty(updatedConditions))\r\n                        supportedMapping.conditions = updatedConditions;\r\n                    supportedMappings.push(supportedMapping);\r\n                }\r\n            }\r\n\r\n            return {\r\n                supportedMappings: ArrayExtensions.emptyToNull(supportedMappings),\r\n                mappingErrors: ArrayExtensions.emptyToNull(errors),\r\n            };\r\n        }\r\n\r\n        function checkForConditionErrors(projections: QueryProjectionsByRole, condition: DataViewMappingCondition, roleKindByQueryRef: RoleKindByQueryRef): DataViewMappingMatchError[] {\r\n            debug.assertValue(projections, 'projections');\r\n            debug.assertValue(condition, 'condition');\r\n\r\n            let conditionRoles = Object.keys(condition);\r\n            let errors: DataViewMappingMatchError[] = [];\r\n\r\n            for (let i = 0, len = conditionRoles.length; i < len; i++) {\r\n                let roleName: string = conditionRoles[i],\r\n                    isDrillable = projections[roleName] && !_.isEmpty(projections[roleName].activeProjectionRefs),\r\n                    roleCondition = condition[roleName];\r\n\r\n                let roleCount = getPropertyCount(roleName, projections, isDrillable);\r\n                let rangeError = validateRange(roleCount, roleCondition);\r\n                if (rangeError != null) {\r\n                    errors.push({\r\n                        code: rangeError,\r\n                        roleName: roleName,\r\n                    });\r\n                }\r\n                let kindError = validateKind(roleCondition, roleName, projections, roleKindByQueryRef);\r\n                if (kindError != null) {\r\n                    errors.push({\r\n                        code: kindError,\r\n                        roleName: roleName,\r\n                    });\r\n                }\r\n            }\r\n\r\n            return errors;\r\n        }\r\n\r\n        function areAllPropertiesValid(requiredProperties: DataViewObjectPropertyIdentifier[], objectDescriptors: DataViewObjectDescriptors, objectDefinitions?: DataViewObjectDefinitions): boolean {\r\n            if (_.isEmpty(requiredProperties))\r\n                return true;\r\n\r\n            if (!objectDescriptors || !objectDefinitions)\r\n                return false;\r\n\r\n            let staticEvalContext: data.IEvalContext = data.createStaticEvalContext();\r\n\r\n            return _.every(requiredProperties, (requiredProperty) => {\r\n                let objectDescriptorValue = null;\r\n                let objectDescriptorProperty = objectDescriptors[requiredProperty.objectName];\r\n                if (objectDescriptorProperty)\r\n                    objectDescriptorValue = objectDescriptorProperty.properties[requiredProperty.propertyName];\r\n                let objectDefinitionValue = DataViewObjectDefinitions.getValue(objectDefinitions, requiredProperty, null);\r\n\r\n                if (!objectDescriptorValue || !objectDefinitionValue)\r\n                    return false;\r\n\r\n                return data.DataViewObjectEvaluator.evaluateProperty(staticEvalContext, objectDescriptorValue, objectDefinitionValue);\r\n            });\r\n        }\r\n\r\n        export function getPropertyCount(roleName: string, projections: QueryProjectionsByRole, useActiveIfAvailable?: boolean): number {\r\n            debug.assertValue(roleName, 'roleName');\r\n            debug.assertValue(projections, 'projections');\r\n\r\n            let projectionsForRole = projections[roleName];\r\n            if (projectionsForRole) {\r\n                if (useActiveIfAvailable)\r\n                    return 1;\r\n                return projectionsForRole.all().length;\r\n            }\r\n\r\n            return 0;\r\n        }\r\n\r\n        export function hasSameCategoryIdentity(dataView1: DataView, dataView2: DataView): boolean {\r\n            if (dataView1\r\n                && dataView2\r\n                && dataView1.categorical\r\n                && dataView2.categorical) {\r\n                let dv1Categories = dataView1.categorical.categories;\r\n                let dv2Categories = dataView2.categorical.categories;\r\n                if (dv1Categories\r\n                    && dv2Categories\r\n                    && dv1Categories.length === dv2Categories.length) {\r\n                    for (let i = 0, len = dv1Categories.length; i < len; i++) {\r\n                        let dv1Identity = dv1Categories[i].identity;\r\n                        let dv2Identity = dv2Categories[i].identity;\r\n\r\n                        let dv1Length = getLengthOptional(dv1Identity);\r\n                        if (dv1Length !== getLengthOptional(dv2Identity))\r\n                            return false;\r\n\r\n                        for (let j = 0; j < dv1Length; j++) {\r\n                            if (!DataViewScopeIdentity.equals(dv1Identity[j], dv2Identity[j]))\r\n                                return false;\r\n                        }\r\n                    }\r\n\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        function getLengthOptional(identity: DataViewScopeIdentity[]): number {\r\n            if (identity)\r\n                return identity.length;\r\n\r\n            return 0;\r\n        }\r\n\r\n        export function areMetadataColumnsEquivalent(column1: DataViewMetadataColumn, column2: DataViewMetadataColumn): boolean {\r\n            if (!column1 && !column2)\r\n                return true;\r\n\r\n            if (!column1 || !column2)\r\n                return false;\r\n\r\n            if (column1.displayName !== column2.displayName)\r\n                return false;\r\n\r\n            if (column1.queryName !== column2.queryName)\r\n                return false;\r\n\r\n            if (column1.isMeasure !== column2.isMeasure)\r\n                return false;\r\n\r\n            if (column1.type !== column2.type)\r\n                return false;\r\n\r\n            if (column1.sort !== column2.sort)\r\n                return false;\r\n\r\n            return true;\r\n        }\r\n\r\n        /* Returns true if the metadata columns at the same positions in the array are equivalent. */\r\n        export function isMetadataEquivalent(metadata1: DataViewMetadata, metadata2: DataViewMetadata): boolean {\r\n            if (!metadata1 && !metadata2)\r\n                return true;\r\n\r\n            if (!metadata1 || !metadata2)\r\n                return false;\r\n\r\n            let previousColumnsLength = metadata1.columns.length;\r\n            let newColumnsLength = metadata2.columns.length;\r\n\r\n            if (previousColumnsLength !== newColumnsLength)\r\n                return false;\r\n\r\n            for (let i: number = 0; i < newColumnsLength; i++) {\r\n                if (!DataViewAnalysis.areMetadataColumnsEquivalent(metadata1.columns[i], metadata2.columns[i]))\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi {\r\n\r\n    export module DataViewScopeIdentity {\r\n        /** Compares the two DataViewScopeIdentity values for equality. */\r\n        export function equals(x: DataViewScopeIdentity, y: DataViewScopeIdentity, ignoreCase?: boolean): boolean {\r\n            // Normalize falsy to null\r\n            x = x || null;\r\n            y = y || null;\r\n\r\n            if (x === y)\r\n                return true;\r\n\r\n            if (!x !== !y)\r\n                return false;\r\n\r\n            debug.assertValue(x, 'x');\r\n            debug.assertValue(y, 'y');\r\n\r\n            return data.SQExpr.equals(<data.SQExpr>x.expr, <data.SQExpr>y.expr, ignoreCase);\r\n        }\r\n\r\n        export function filterFromIdentity(identities: DataViewScopeIdentity[], isNot?: boolean): data.SemanticFilter {\r\n            if (_.isEmpty(identities))\r\n                return;\r\n            \r\n            let exprs: data.SQExpr[] = [];\r\n            for (let identity of identities) {\r\n                exprs.push(<data.SQExpr>identity.expr);\r\n            }\r\n\r\n            return filterFromExprs(exprs, isNot);\r\n        }\r\n\r\n        export function filterFromExprs(orExprs: data.SQExpr[], isNot?: boolean): data.SemanticFilter {\r\n            if (_.isEmpty(orExprs))\r\n                return;\r\n\r\n            let resultExpr: data.SQExpr;\r\n            for (let orExpr of orExprs) {\r\n                let inExpr = data.ScopeIdentityExtractor.getInExpr(orExpr);\r\n                if (resultExpr)\r\n                    resultExpr = data.SQExprBuilder.or(resultExpr, inExpr);\r\n                else\r\n                    resultExpr = inExpr || orExpr;\r\n            }\r\n            \r\n            if (resultExpr) {\r\n                if (isNot)\r\n                    resultExpr = powerbi.data.SQExprBuilder.not(resultExpr);\r\n            }\r\n\r\n            return powerbi.data.SemanticFilter.fromSQExpr(resultExpr);\r\n        }\r\n    }\r\n\r\n    export module data {\r\n        import Lazy = jsCommon.Lazy;\r\n\r\n        export function createDataViewScopeIdentity(expr: SQExpr): DataViewScopeIdentity {\r\n            return new DataViewScopeIdentityImpl(expr);\r\n        }\r\n\r\n        class DataViewScopeIdentityImpl implements DataViewScopeIdentity {\r\n            private _expr: SQExpr;\r\n            private _key: Lazy<string>;\r\n\r\n            public constructor(expr: SQExpr) {\r\n                debug.assertValue(expr, 'expr');\r\n\r\n                this._expr = expr;\r\n                this._key = new Lazy(() => SQExprShortSerializer.serialize(expr));\r\n            }\r\n\r\n            public get expr(): SQExpr {\r\n                return this._expr;\r\n            }\r\n\r\n            public get key(): string {\r\n                return this._key.getValue();\r\n            }\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    import Lazy = jsCommon.Lazy;\r\n\r\n    export module DataViewScopeWildcard {\r\n        export function matches(wildcard: DataViewScopeWildcard, instance: DataViewScopeIdentity): boolean {\r\n            let instanceExprs = ScopeIdentityExtractor.getKeys(<SQExpr>instance.expr);\r\n            if (!instanceExprs)\r\n                return false;\r\n\r\n            return SQExprUtils.sequenceEqual(<SQExpr[]>wildcard.exprs, instanceExprs);\r\n        }\r\n\r\n        export function fromExprs(exprs: SQExpr[]): DataViewScopeWildcard {\r\n            return new DataViewScopeWildcardImpl(exprs);\r\n        }\r\n\r\n        class DataViewScopeWildcardImpl implements DataViewScopeWildcard {\r\n            private _exprs: SQExpr[];\r\n            private _key: Lazy<string>;\r\n\r\n            public constructor(exprs: SQExpr[]) {\r\n                debug.assertValue(exprs, 'exprs');\r\n\r\n                this._exprs = exprs;\r\n                this._key = new Lazy(() => SQExprShortSerializer.serializeArray(exprs));\r\n            }\r\n\r\n            public get exprs(): SQExpr[] {\r\n                return this._exprs;\r\n            }\r\n\r\n            public get key(): string {\r\n                return this._key.getValue();\r\n            }\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    /** Responsible for providing specific values to be used by expression and rule evaluation. */\r\n    export interface IEvalContext {\r\n        getExprValue(expr: SQExpr): PrimitiveValue;\r\n        getRoleValue(roleName: string): PrimitiveValue;\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved.\r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *\r\n *  The above copyright notice and this permission notice shall be included in\r\n *  all copies or substantial portions of the Software.\r\n *\r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    import RoleKindByQueryRef = DataViewAnalysis.RoleKindByQueryRef;\r\n\r\n    export interface DataViewRegressionRunOptions {\r\n        dataViewMappings: DataViewMapping[];\r\n        transformedDataViews: DataView[];\r\n        dataRoles: VisualDataRole[];\r\n        objectDescriptors: DataViewObjectDescriptors;\r\n        objectDefinitions: DataViewObjectDefinitions;\r\n        colorAllocatorFactory: IColorAllocatorFactory;\r\n        transformSelects: DataViewSelectTransform[];\r\n        dataView: DataView;\r\n        projectionActiveItems: DataViewProjectionActiveItems;\r\n    }\r\n\r\n    export module DataViewRegression {\r\n        // TODO VSTS 6842046: Currently we are using a constant queryName since we don't have a way to generate\r\n        // unique ones. There is a bug filed to do this by lawong, so this part will be fixed with that bug.\r\n        const regressionXQueryName: string = 'RegressionX';\r\n        export const regressionYQueryName: string = 'RegressionY';\r\n\r\n        export function run(options: DataViewRegressionRunOptions): DataView[] {\r\n            debug.assertValue(options, 'options');\r\n\r\n            let dataViewMappings: DataViewMapping[] = options.dataViewMappings;\r\n            let transformedDataViews: DataView[] = options.transformedDataViews;\r\n            let dataRoles: VisualDataRole[] = options.dataRoles;\r\n            let objectDescriptors: DataViewObjectDescriptors = options.objectDescriptors;\r\n            let objectDefinitions: DataViewObjectDefinitions = options.objectDefinitions;\r\n            let colorAllocatorFactory: IColorAllocatorFactory = options.colorAllocatorFactory;\r\n            let transformSelects: DataViewSelectTransform[] = options.transformSelects;\r\n            let projectionActiveItems = options.projectionActiveItems;\r\n            let dataView: DataView = options.dataView;\r\n\r\n            if (transformedDataViews.length === 1  && transformSelects && dataView.metadata) {\r\n                // compute linear regression line if applicable\r\n                let roleKindByQueryRef: RoleKindByQueryRef = DataViewSelectTransform.createRoleKindFromMetadata(transformSelects, dataView.metadata);\r\n                let projections: QueryProjectionsByRole = DataViewSelectTransform.projectionsFromSelects(transformSelects, projectionActiveItems);\r\n                if (!roleKindByQueryRef || !projections || !dataViewMappings || !objectDescriptors || !objectDefinitions)\r\n                    return transformedDataViews;\r\n\r\n                let applicableDataViewMappings: DataViewMapping[] = DataViewAnalysis.chooseDataViewMappings(projections, dataViewMappings, roleKindByQueryRef, objectDescriptors, objectDefinitions).supportedMappings;\r\n\r\n                if (applicableDataViewMappings) {\r\n                    let regressionDataViewMapping: DataViewMapping = _.find(applicableDataViewMappings, (dataViewMapping) => {\r\n                        return dataViewMapping.usage && dataViewMapping.usage.regression;\r\n                    });\r\n\r\n                    if (regressionDataViewMapping) {\r\n                        let regressionSource = transformedDataViews[0];\r\n                        let regressionDataView: DataView = this.linearRegressionTransform(regressionSource, dataRoles, regressionDataViewMapping, objectDescriptors, objectDefinitions, colorAllocatorFactory);\r\n\r\n                        if (regressionDataView)\r\n                            transformedDataViews.push(regressionDataView);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return transformedDataViews;\r\n        }\r\n\r\n        /**\r\n         * This function will compute the linear regression algorithm on the sourceDataView and create a new dataView.\r\n         * It works on scalar axis only.\r\n         * The algorithm is as follows\r\n         *\r\n         * 1. Find the cartesian X and Y roles and the columns that correspond to those roles\r\n         * 2. Order the X-Y value pairs by the X values\r\n         * 3. Linearly map dates to their respective times and normalize since regression cannot be directly computed on dates\r\n         * 4. Compute the actual regression:\r\n         *    i.   xBar: average of X values, yBar: average of Y values\r\n         *    ii.  ssXX: sum of squares of X values = Sum(xi - xBar)^2\r\n         *    iii. ssXY: sum of squares of X and Y values  = Sum((xi - xBar)(yi - yBar)\r\n         *    iv.  Slope: ssXY / ssXX\r\n         *    v.   Intercept: yBar - xBar * slope\r\n         * 5. Compute the X and Y points for regression line using Y = Slope * X + Intercept\r\n         * 6. Create the new dataView using the points computed above\r\n         */\r\n        export function linearRegressionTransform(\r\n            sourceDataView: DataView,\r\n            dataRoles: VisualDataRole[],\r\n            regressionDataViewMapping: DataViewMapping,\r\n            objectDescriptors: DataViewObjectDescriptors,\r\n            objectDefinitions: DataViewObjectDefinitions,\r\n            colorAllocatorFactory: IColorAllocatorFactory): DataView {\r\n            debug.assertValue(sourceDataView, 'sourceDataView');\r\n            debug.assertValue(sourceDataView.categorical, 'sourceDataView.categorical');\r\n            debug.assertValue(dataRoles, 'dataRoles');\r\n            debug.assertValue(objectDescriptors, 'objectDescriptors');\r\n            debug.assertValue(objectDefinitions, 'objectDefinitions');\r\n            debug.assertValue(colorAllocatorFactory, 'colorAllocatorFactory');\r\n\r\n            // Step 1\r\n            let xRole: string = findRoleWithCartesianAxis(CartesianRoleKind.X, dataRoles);\r\n            let yRole: string = findRoleWithCartesianAxis(CartesianRoleKind.Y, dataRoles);\r\n\r\n            if (!xRole || !yRole)\r\n                return;\r\n\r\n            let xColumn = getColumnForCategoricalRole(xRole, sourceDataView.categorical);\r\n            let yColumn = getColumnForCategoricalRole(yRole, sourceDataView.categorical);\r\n\r\n            if (!xColumn || !yColumn)\r\n                return;\r\n\r\n            let unsortedXValues = xColumn.values;\r\n            let unsortedYValues = yColumn.values;\r\n\r\n            if (_.isEmpty(unsortedXValues) || _.isEmpty(unsortedYValues))\r\n                return;\r\n\r\n            // get the data type for each column; we will have null type when dataPoints have different type or if a value is null\r\n            let xDataType: string = getDataType(unsortedXValues);\r\n            if (!xDataType)\r\n                return;\r\n            let yDataType: string = getDataType(unsortedYValues);\r\n            if (!yDataType)\r\n                return;\r\n\r\n            // Step 2\r\n            let { xValues, yValues } = sortValues(unsortedXValues, unsortedYValues);\r\n            let minCategoryValue = xValues[0];\r\n            let maxCategoryValue = xValues[xValues.length - 1];\r\n\r\n            // Step 3\r\n            if (xDataType === 'Date')\r\n                xValues = normalizeDateValues(xValues);\r\n\r\n            // Step 4\r\n            let { slope, intercept } = computeRegressionLine(xValues, yValues);\r\n\r\n            // Step 5\r\n            let minXValue = xValues[0];\r\n            let maxXValue = xValues[xValues.length - 1];\r\n\r\n            let newCategories = [minCategoryValue, maxCategoryValue];\r\n            let newValues = [minXValue * slope + intercept, maxXValue * slope + intercept];\r\n\r\n            // Step 6\r\n            let regressionDataView: DataView = createRegressionDataView(xColumn, yColumn, newCategories, newValues, sourceDataView, regressionDataViewMapping, objectDescriptors, objectDefinitions, colorAllocatorFactory);\r\n\r\n            return regressionDataView;\r\n        }\r\n\r\n        function findRoleWithCartesianAxis(cartesianRole: CartesianRoleKind, dataRoles: VisualDataRole[]): string {\r\n            debug.assertValue(cartesianRole, 'cartesianRole');\r\n            debug.assertValue(dataRoles, 'dataRoles');\r\n\r\n            for (let dataRole of dataRoles) {\r\n                if (dataRole.cartesianKind === cartesianRole)\r\n                    return dataRole.name;\r\n            }\r\n        }\r\n\r\n        function getColumnForCategoricalRole(roleName: string, categorical: DataViewCategorical): DataViewCategoryColumn | DataViewValueColumn {\r\n            debug.assertValue(roleName, 'roleName');\r\n            debug.assertValue(categorical, 'categorical');\r\n            debug.assertValue(categorical.categories, 'categorical.categories');\r\n            debug.assertValue(categorical.values, 'categorical.values');\r\n\r\n            let categoryColumn = getRoleFromColumn(roleName, categorical.categories);\r\n            if (categoryColumn)\r\n                return categoryColumn;\r\n\r\n            // Regression is not supported for multiple series yet, so return null column back\r\n            if (categorical.values.source)\r\n                return null;\r\n\r\n            let valueColumn = getRoleFromColumn(roleName, categorical.values);\r\n            if (valueColumn)\r\n                return valueColumn;\r\n\r\n            return null;\r\n        }\r\n\r\n        function getRoleFromColumn(roleName: string, columns: DataViewCategoricalColumn[] | DataViewValueColumn[]): DataViewCategoryColumn | DataViewValueColumn {\r\n            debug.assertValue(roleName, 'roleName');\r\n            debug.assertValue(columns, 'columns');\r\n\r\n            return _.find(columns, (column) => {\r\n                return column.source.roles[roleName];\r\n            });\r\n        }\r\n\r\n        function getDataType(values: any[]): string {\r\n            if (_.isEmpty(values) || values[0] == null)\r\n                return;\r\n\r\n            let dataType: string = typeof values[0];\r\n\r\n            if (_.some(values, (value) => value === null || typeof value !== dataType))\r\n                return;\r\n\r\n            return dataType;\r\n        }\r\n\r\n        function sortValues(unsortedXValues: any[], unsortedYValues: any[]): { xValues: any[], yValues: any[] } {\r\n            debug.assertValue(unsortedXValues, 'unsortedXValues');\r\n            debug.assertValue(unsortedYValues, 'unsortedYValues');\r\n\r\n            let zippedValues = _.zip(unsortedXValues, unsortedYValues);\r\n            let sortedValues = _.sortBy(zippedValues, (valuePair) => {\r\n                return valuePair[0];\r\n            });\r\n            let [xValues, yValues] = _.unzip(sortedValues);\r\n            return {\r\n                xValues: xValues,\r\n                yValues: yValues\r\n            };\r\n        }\r\n\r\n        function normalizeDateValues(xValues: any[]): number[] {\r\n            debug.assertValue(xValues, 'xValues');\r\n\r\n            let initialTime = (<Date>xValues[0]).getTime();\r\n            for (let i = 0; i < xValues.length; i++) {\r\n                xValues[i] = (<Date>xValues[i]).getTime() - initialTime;\r\n            }\r\n            return xValues;\r\n        }\r\n\r\n        function computeRegressionLine(xValues: number[], yValues: number[]): { slope: number, intercept: number } {\r\n            debug.assertValue(xValues, 'xValues');\r\n            debug.assertValue(yValues, 'yValues');\r\n\r\n            let xBar = _.sum(xValues) / xValues.length;\r\n            let yBar = _.sum(yValues) / yValues.length;\r\n\r\n            let ssXX = _.chain(xValues)\r\n                .map((x) => {\r\n                    return (x - xBar) ** 2;\r\n                })\r\n                .sum();\r\n\r\n            let ssXY = _.chain(xValues)\r\n                .map((x, i) => {\r\n                    return (x - xBar) * (yValues[i] - yBar);\r\n                })\r\n                .sum();\r\n\r\n            let slope = ssXY / ssXX;\r\n            let intercept = yBar - (xBar * slope);\r\n\r\n            return {\r\n                slope: slope,\r\n                intercept: intercept\r\n            };\r\n        }\r\n\r\n        function createRegressionDataView(\r\n            xColumn: DataViewCategoryColumn | DataViewValueColumn,\r\n            yColumn: DataViewCategoryColumn | DataViewValueColumn,\r\n            newCategories: any[],\r\n            newValues: any[],\r\n            sourceDataView: DataView,\r\n            regressionDataViewMapping: DataViewMapping,\r\n            objectDescriptors: DataViewObjectDescriptors,\r\n            objectDefinitions: DataViewObjectDefinitions,\r\n            colorAllocatorFactory: IColorAllocatorFactory): DataView {\r\n            debug.assertValue(xColumn, 'xColumn');\r\n            debug.assertValue(yColumn, 'yColumn');\r\n            debug.assertValue(newCategories, 'newCategories');\r\n            debug.assertValue(newValues, 'newValues');\r\n            debug.assertValue(sourceDataView, 'sourceDataView');\r\n            debug.assertValue(objectDescriptors, 'objectDescriptors');\r\n            debug.assertValue(objectDefinitions, 'objectDefinitions');\r\n            debug.assertValue(colorAllocatorFactory, 'colorAllocatorFactory');\r\n\r\n            let xRole: string = (<DataViewRoleForMapping>regressionDataViewMapping.categorical.categories).for.in;\r\n            let yRole: string = (<DataViewRoleForMapping>regressionDataViewMapping.categorical.values).for.in;\r\n            let categoricalRoles: { [name: string]: boolean } = {};\r\n            categoricalRoles[xRole] = true;\r\n            let valueRoles: { [name: string]: boolean } = {};\r\n            valueRoles[yRole] = true;\r\n\r\n            let regressionDataView: DataView = createCategoricalDataViewBuilder()\r\n                .withCategories([{\r\n                    source: {\r\n                        displayName: xColumn.source.displayName,\r\n                        queryName: regressionXQueryName,\r\n                        type: xColumn.source.type,\r\n                        isMeasure: xColumn.source.isMeasure,\r\n                        roles: categoricalRoles\r\n                    },\r\n                    values: newCategories\r\n                }])\r\n                .withValues({\r\n                    columns: [{\r\n                        source: {\r\n                            displayName: yColumn.source.displayName,\r\n                            queryName: regressionYQueryName,\r\n                            type: yColumn.source.type,\r\n                            isMeasure: yColumn.source.isMeasure,\r\n                            roles: valueRoles\r\n                        },\r\n                        values: newValues\r\n                    }]\r\n                })\r\n                .build();\r\n            DataViewTransform.transformObjects(regressionDataView, data.StandardDataViewKinds.Categorical, objectDescriptors, objectDefinitions, [], colorAllocatorFactory);\r\n            return regressionDataView;\r\n        }\r\n    }\r\n}\r\n","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved.\r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *\r\n *  The above copyright notice and this permission notice shall be included in\r\n *  all copies or substantial portions of the Software.\r\n *\r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    import RoleKindByQueryRef = DataViewAnalysis.RoleKindByQueryRef;\r\n\r\n    export interface DataViewSelectTransform {\r\n        displayName?: string;\r\n        queryName?: string;\r\n        format?: string;\r\n        type?: ValueType;\r\n        roles?: { [roleName: string]: boolean };\r\n        kpi?: DataViewKpiColumnMetadata;\r\n        sort?: SortDirection;\r\n        expr?: SQExpr;\r\n        discourageAggregationAcrossGroups?: boolean;\r\n\r\n        /** Describes the default value applied to a column, if any. */\r\n        defaultValue?: DefaultValueDefinition;\r\n    }\r\n\r\n    export module DataViewSelectTransform {\r\n        /** Convert selection info to projections */\r\n        export function projectionsFromSelects(selects: DataViewSelectTransform[], projectionActiveItems: DataViewProjectionActiveItems): QueryProjectionsByRole {\r\n            debug.assertAnyValue(selects, \"selects\");\r\n            debug.assertAnyValue(projectionActiveItems, \"projectionActiveItems\");\r\n\r\n            let projections: QueryProjectionsByRole = {};\r\n            for (let select of selects) {\r\n                let roles = select.roles;\r\n                if (!roles)\r\n                    continue;\r\n\r\n                for (let roleName in roles) {\r\n                    if (roles[roleName]) {\r\n                        let qp = projections[roleName];\r\n                        if (!qp)\r\n                            qp = projections[roleName] = new QueryProjectionCollection([]);\r\n                        qp.all().push({ queryRef: select.queryName });\r\n\r\n                        if (projectionActiveItems && projectionActiveItems[roleName])\r\n                            qp.activeProjectionRefs = projectionActiveItems[roleName];\r\n                    }\r\n                }\r\n            }\r\n\r\n            return projections;\r\n        }\r\n\r\n        /** Use selections and metadata to fashion query role kinds */\r\n        export function createRoleKindFromMetadata(selects: DataViewSelectTransform[], metadata: DataViewMetadata): RoleKindByQueryRef {\r\n            let roleKindByQueryRef: DataViewAnalysis.RoleKindByQueryRef = {};\r\n            for (let column of metadata.columns) {\r\n                if ((!column.index && column.index !== 0) || column.index < 0 || column.index >= selects.length)\r\n                    continue;\r\n\r\n                let select = selects[column.index];\r\n                if (select) {\r\n                    let queryRef = select.queryName;\r\n                    if (queryRef && roleKindByQueryRef[queryRef] === undefined) {\r\n                        roleKindByQueryRef[queryRef] = column.isMeasure ? VisualDataRoleKind.Measure : VisualDataRoleKind.Grouping;\r\n                    }\r\n                }\r\n            }\r\n            return roleKindByQueryRef;\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    export interface ICategoricalEvalContext extends IEvalContext {\r\n        setCurrentRowIndex(index: number): void;\r\n    }\r\n\r\n    export function createCategoricalEvalContext(dataViewCategorical: DataViewCategorical): ICategoricalEvalContext {\r\n        return new CategoricalEvalContext(dataViewCategorical);\r\n    }\r\n\r\n    class CategoricalEvalContext implements ICategoricalEvalContext {\r\n        private dataView: DataViewCategorical;\r\n        private columnsByRole: { [name: string]: DataViewCategoricalColumn };\r\n        private index: number;\r\n\r\n        constructor(dataView: DataViewCategorical) {\r\n            debug.assertValue(dataView, 'dataView');\r\n\r\n            this.dataView = dataView;\r\n            this.columnsByRole = {};\r\n        }\r\n\r\n        public getExprValue(expr: SQExpr): PrimitiveValue {\r\n            return;\r\n        }\r\n\r\n        public getRoleValue(roleName: string): PrimitiveValue {\r\n            let columnsByRole = this.columnsByRole;\r\n            let column = columnsByRole[roleName];\r\n            if (!column)\r\n                column = columnsByRole[roleName] = findRuleInputColumn(this.dataView, roleName);\r\n            \r\n            if (!column)\r\n                return;\r\n\r\n            let index = this.index;\r\n            if (index != null)\r\n                return column.values[this.index];\r\n        }\r\n\r\n        public setCurrentRowIndex(index: number): void {\r\n            debug.assertValue(index, 'index');\r\n\r\n            this.index = index;\r\n        }\r\n    }\r\n\r\n    function findRuleInputColumn(dataViewCategorical: DataViewCategorical, inputRole: string): DataViewCategoricalColumn {\r\n        debug.assertValue(dataViewCategorical, 'dataViewCategorical');\r\n\r\n        return findRuleInputInColumns(dataViewCategorical.values, inputRole) ||\r\n            findRuleInputInColumns(dataViewCategorical.categories, inputRole);\r\n    }\r\n\r\n    function findRuleInputInColumns(columns: DataViewCategoricalColumn[], inputRole: string): DataViewCategoricalColumn {\r\n        debug.assertAnyValue(columns, 'columns');\r\n\r\n        if (!columns)\r\n            return;\r\n\r\n        for (let column of columns) {\r\n            let roles = column.source.roles;\r\n            if (!roles || !roles[inputRole])\r\n                continue;\r\n\r\n            return column;\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    import SQExpr = powerbi.data.SQExpr;\r\n\r\n    export interface ITableEvalContext extends IEvalContext {\r\n        setCurrentRowIndex(index: number): void;\r\n    }\r\n\r\n    export function createTableEvalContext(dataViewTable: DataViewTable, selectTransforms: DataViewSelectTransform[]): ITableEvalContext {\r\n        return new TableEvalContext(dataViewTable, selectTransforms);\r\n    }\r\n\r\n    class TableEvalContext implements ITableEvalContext {\r\n        private dataView: DataViewTable;\r\n        private rowIdx: number;\r\n        private selectTransforms: DataViewSelectTransform[];\r\n\r\n        constructor(dataView: DataViewTable, selectTransforms: DataViewSelectTransform[]) {\r\n            debug.assertValue(dataView, 'dataView');\r\n            debug.assertValue(selectTransforms, 'selectTransforms');\r\n\r\n            this.dataView = dataView;\r\n            this.selectTransforms = selectTransforms;\r\n        }\r\n\r\n        public getExprValue(expr: SQExpr): PrimitiveValue {\r\n            debug.assertValue(expr, 'expr');\r\n\r\n            let rowIdx = this.rowIdx;\r\n            if (rowIdx == null)\r\n                return;\r\n\r\n            return getExprValueFromTable(expr, this.selectTransforms, this.dataView, rowIdx);\r\n        }\r\n\r\n        public getRoleValue(roleName: string): PrimitiveValue {\r\n            return;\r\n        }\r\n\r\n        public setCurrentRowIndex(index: number): void {\r\n            debug.assertValue(index, 'index');\r\n\r\n            this.rowIdx = index;\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    export class RuleEvaluation {\r\n        // NOTE: even though this class has no behaviour, we still use a class to facilitate instanceof checks.\r\n\r\n        public evaluate(evalContext: IEvalContext): any {\r\n            debug.assertFail('Abstract method RuleEvaluation.evaluate not implemented.');\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    export class ColorRuleEvaluation extends RuleEvaluation {\r\n        private inputRole: string;\r\n        private allocator: IColorAllocator;\r\n\r\n        constructor(inputRole: string, allocator: IColorAllocator) {\r\n            debug.assertValue(inputRole, 'inputRole');\r\n            debug.assertValue(allocator, 'allocator');\r\n\r\n            super();\r\n            this.inputRole = inputRole;\r\n            this.allocator = allocator;\r\n        }\r\n\r\n        public evaluate(evalContext: IEvalContext): any {\r\n            debug.assertValue(evalContext, 'evalContext');\r\n\r\n            let value: any = evalContext.getRoleValue(this.inputRole);\r\n            if (value !== undefined)\r\n                return this.allocator.color(value);\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data.utils {\r\n    import inherit = Prototype.inherit;\r\n    import inheritSingle = Prototype.inheritSingle;\r\n\r\n    export module DataViewMatrixUtils {\r\n\r\n        /**\r\n         * Invokes the specified callback once per descendent leaf node of the specified matrixNode, with an optional \r\n         * index parameter in the callback that is the 0-based index of the particular leaf node in the context of this \r\n         * forEachLeafNode(...) invocation.\r\n         */\r\n        export function forEachLeafNode(matrixNode: DataViewMatrixNode, callback: (leafNode: DataViewMatrixNode, index?: number) => void): void {\r\n            debug.assertValue(matrixNode, 'matrixNode');\r\n            debug.assertValue(callback, 'callback');\r\n\r\n            forEachLeafNodeRecursive(matrixNode, 0, callback);\r\n        }\r\n\r\n        function forEachLeafNodeRecursive(matrixNode: DataViewMatrixNode, nextIndex: number, callback: (leafNode: DataViewMatrixNode, index?: number) => void): number {\r\n            debug.assertValue(matrixNode, 'matrixNode');\r\n            debug.assertValue(callback, 'callback');\r\n\r\n            if (_.isEmpty(matrixNode.children)) {\r\n                callback(matrixNode, nextIndex);\r\n                nextIndex++;\r\n            }\r\n            else {\r\n                let children = matrixNode.children;\r\n                for (var i = 0, len = children.length; i < len; i++) {\r\n                    var nextChild = children[i];\r\n                    if (nextChild) {\r\n                        nextIndex = forEachLeafNodeRecursive(nextChild, nextIndex, callback);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return nextIndex;\r\n        }\r\n\r\n        /**\r\n         * Returned an object tree where each node and its children property are inherited from the specified node \r\n         * hierarchy, from the root down to the nodes at the specified deepestLevelToInherit, inclusively.\r\n         *\r\n         * The inherited nodes at level === deepestLevelToInherit will NOT get an inherited version of children array \r\n         * property, i.e. its children property is the same array object referenced in the input node's object tree.\r\n         *\r\n         * @param node The input node with the hierarchy object tree.\r\n         * @param deepestLevelToInherit The highest level for a node to get inherited. See DataViewMatrixNode.level property.\r\n         * @param useInheritSingle If true, then a node will get inherited in the returned object tree only if it is \r\n         * not already an inherited object. Same goes for the node's children property.  This is useful for creating \r\n         * \"visual DataView\" objects from \"query DataView\" objects, as object inheritance is the mechanism for \r\n         * \"visual DataView\" to override properties in \"query DataView\", and that \"query DataView\" never contains \r\n         * inherited objects.\r\n         */\r\n        export function inheritMatrixNodeHierarchy(\r\n            node: DataViewMatrixNode,\r\n            deepestLevelToInherit: number,\r\n            useInheritSingle: boolean): DataViewMatrixNode {\r\n            debug.assertValue(node, 'node');\r\n            debug.assert(deepestLevelToInherit >= 0, 'deepestLevelToInherit >= 0');\r\n            debug.assertValue(useInheritSingle, 'useInheritSingle');\r\n\r\n            let returnNode = node;\r\n\r\n            // Note: The level property of DataViewMatrix.rows.root and DataViewMatrix.columns.root are always undefined.\r\n            // Also, in a matrix with multiple column grouping fields and multiple value fields, the DataViewMatrixNode\r\n            // for the Grand Total column in the column hierarchy will have children nodes where level > (parent.level + 1):\r\n            //  {\r\n            //    \"level\": 0,\r\n            //    \"isSubtotal\": true,\r\n            //    \"children\": [\r\n            //      { \"level\": 2, \"isSubtotal\": true },\r\n            //      { \"level\": 2, \"levelSourceIndex\": 1, \"isSubtotal\": true }\r\n            //    ]\r\n            //  }\r\n            let isRootNode = _.isUndefined(node.level);\r\n            let shouldInheritCurrentNode = isRootNode || (node.level <= deepestLevelToInherit);\r\n            if (shouldInheritCurrentNode) {\r\n                let inheritFunc = useInheritSingle ? inheritSingle : inherit;\r\n                let inheritedNode: DataViewMatrixNode = inheritFunc(node);\r\n\r\n                let shouldInheritChildNodes = isRootNode || (node.level < deepestLevelToInherit);\r\n                if (shouldInheritChildNodes && !_.isEmpty(node.children)) {\r\n                    inheritedNode.children = inheritFunc(node.children); // first, make an inherited array\r\n                    for (let i = 0, ilen = inheritedNode.children.length; i < ilen; i++) {\r\n                        inheritedNode.children[i] =\r\n                            inheritMatrixNodeHierarchy(inheritedNode.children[i], deepestLevelToInherit, useInheritSingle);\r\n                    }\r\n                }\r\n\r\n                returnNode = inheritedNode;\r\n            }\r\n\r\n            return returnNode;\r\n        }\r\n    }\r\n} ","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data.utils {\r\n    export module DataViewMetadataColumnUtils {\r\n\r\n        export interface MetadataColumnAndProjectionIndex {\r\n            /**\r\n            * A metadata column taken from a source collection, e.g. DataViewHierarchyLevel.sources, DataViewMatrix.valueSources...\r\n            */\r\n            metadataColumn: DataViewMetadataColumn;\r\n\r\n            /**\r\n             * The index of this.metadataColumn in its sources collection.\r\n             *\r\n             * E.g.1 This can be the value of the property DataViewMatrixGroupValue.levelSourceIndex which is the index of this.metadataColumn in DataViewHierarchyLevel.sources.\r\n             * E.g.2 This can be the value of the property DataViewMatrixNodeValue.valueSourceIndex which refer to columns in DataViewMatrix.valueSources.\r\n             */\r\n            sourceIndex: number;\r\n\r\n            /**\r\n            * The index of this.metadataColumn in the projection ordering of a given role.\r\n            */\r\n            projectionOrderIndex: number;\r\n        }\r\n\r\n        /**\r\n         * Returns true iff the specified metadataColumn is assigned to the specified targetRole.\r\n         */\r\n        export function isForRole(metadataColumn: DataViewMetadataColumn, targetRole: string): boolean {\r\n            debug.assertValue(metadataColumn, 'metadataColumn');\r\n            debug.assertValue(targetRole, 'targetRole');\r\n\r\n            let roles = metadataColumn.roles;\r\n            return roles && roles[targetRole];\r\n        }\r\n\r\n        /**\r\n         * Joins each column in the specified columnSources with projection ordering index into a wrapper object.\r\n         *\r\n         * Note: In order for this function to reliably calculate the \"source index\" of a particular column, the \r\n         * specified columnSources must be a non-filtered array of column sources from the DataView, such as\r\n         * the DataViewHierarchyLevel.sources and DataViewMatrix.valueSources array properties.\r\n         *\r\n         * @param columnSources E.g. DataViewHierarchyLevel.sources, DataViewMatrix.valueSources...\r\n         * @param projection The projection ordering.  It must contain an ordering for the specified role.\r\n         * @param role The role for getting the relevant projection ordering, as well as for filtering out the irrevalent columns in columnSources.\r\n         */\r\n        export function joinMetadataColumnsAndProjectionOrder(\r\n            columnSources: DataViewMetadataColumn[],\r\n            projection: DataViewProjectionOrdering,\r\n            role: string): MetadataColumnAndProjectionIndex[] {\r\n            debug.assertAnyValue(columnSources, 'columnSources');\r\n            debug.assert(_.all(columnSources, column => _.isNumber(column.index)),\r\n                'pre-condition: Every value in columnSources must already have its Select Index property initialized.');\r\n            debug.assertNonEmpty(projection[role], 'projection[role]');\r\n            debug.assert(_.all(columnSources, column => !isForRole(column, role) || _.contains(projection[role], column.index)),\r\n                'pre-condition: The projection order for the specified role must contain the Select Index of every column with matching role in the specified columnSources.');\r\n\r\n            let jointResult: MetadataColumnAndProjectionIndex[] = [];\r\n\r\n            if (!_.isEmpty(columnSources)) {\r\n                let projectionOrderSelectIndices = projection[role];\r\n                let selectIndexToProjectionIndexMap: { [selectIndex: number]: number } = {};\r\n                for (let i = 0, ilen = projectionOrderSelectIndices.length; i < ilen; i++) {\r\n                    let selectIndex = projectionOrderSelectIndices[i];\r\n                    selectIndexToProjectionIndexMap[selectIndex] = i;\r\n                }\r\n\r\n                for (let j = 0, jlen = columnSources.length; j < jlen; j++) {\r\n                    var column = columnSources[j];\r\n                    if (isForRole(column, role)) {\r\n                        let jointColumnInfo: MetadataColumnAndProjectionIndex = {\r\n                            metadataColumn: column,\r\n                            sourceIndex: j,\r\n                            projectionOrderIndex: selectIndexToProjectionIndexMap[column.index]\r\n                        };\r\n\r\n                        jointResult.push(jointColumnInfo);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return jointResult;\r\n        }\r\n    }\r\n} ","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    import ArrayNamedItems = jsCommon.ArrayNamedItems;\r\n\r\n    export class ConceptualSchema {\r\n        public entities: ArrayNamedItems<ConceptualEntity>;\r\n        public capabilities: ConceptualCapabilities;\r\n\r\n        /** Indicates whether the user can edit this ConceptualSchema.  This is used to enable/disable model authoring UX. */\r\n        public canEdit: boolean;\r\n\r\n        public findProperty(entityName: string, propertyName: string): ConceptualProperty {\r\n            let entity = this.entities.withName(entityName);\r\n            if (!entity || _.isEmpty(entity.properties))\r\n                return;\r\n\r\n            return entity.properties.withName(propertyName);\r\n        }\r\n\r\n        public findHierarchy(entityName: string, name: string): ConceptualHierarchy {\r\n            let entity = this.entities.withName(entityName);\r\n            if (!entity || _.isEmpty(entity.hierarchies))\r\n                return;\r\n\r\n            return entity.hierarchies.withName(name);\r\n        }\r\n\r\n        public findHierarchyByVariation(\r\n            variationEntityName: string,\r\n            variationColumnName: string,\r\n            variationName: string,\r\n            hierarchyName: string): ConceptualHierarchy {\r\n\r\n            let variationEntity = this.entities.withName(variationEntityName);\r\n            if (!variationEntity || _.isEmpty(variationEntity.properties))\r\n                return;\r\n\r\n            let variationProperty = variationEntity.properties.withName(variationColumnName);\r\n            if (!variationProperty)\r\n                return;\r\n\r\n            let variationColumn = variationProperty.column;\r\n            if (!variationColumn || _.isEmpty(variationColumn.variations))\r\n                return;\r\n\r\n            let variation = variationColumn.variations.withName(variationName);\r\n            if (variation) {\r\n                let targetEntity = variation.navigationProperty ? variation.navigationProperty.targetEntity : variationEntity;\r\n                if (!targetEntity || _.isEmpty(targetEntity.hierarchies))\r\n                    return;\r\n\r\n                return targetEntity.hierarchies.withName(hierarchyName);\r\n            }\r\n        }\r\n\r\n        /**\r\n        * Returns the first property of the entity whose kpi is tied to kpiProperty\r\n        */\r\n        public findPropertyWithKpi(entityName: string, kpiProperty: ConceptualProperty): ConceptualProperty {\r\n            debug.assertValue(kpiProperty, 'kpiProperty');\r\n\r\n            let entity = this.entities.withName(entityName);\r\n            if (!entity || _.isEmpty(entity.properties))\r\n                return;\r\n\r\n            for (let prop of entity.properties) {\r\n                if (prop &&\r\n                    prop.measure &&\r\n                    prop.measure.kpi &&\r\n                    (prop.measure.kpi.status === kpiProperty || prop.measure.kpi.goal === kpiProperty))\r\n                    return prop;\r\n            }\r\n\r\n            return;\r\n        }\r\n    }\r\n\r\n    export interface ConceptualCapabilities {\r\n        discourageQueryAggregateUsage: boolean;\r\n        normalizedFiveStateKpiRange: boolean;\r\n        supportsMedian: boolean;\r\n        supportsPercentile: boolean;\r\n    }\r\n\r\n    export interface ConceptualPropertyItemContainer {\r\n        properties: ArrayNamedItems<ConceptualProperty>;\r\n        hierarchies?: ArrayNamedItems<ConceptualHierarchy>;\r\n        displayFolders?: ArrayNamedItems<ConceptualDisplayFolder>;\r\n    }\r\n\r\n    export interface ConceptualPropertyItem {\r\n        name: string;\r\n        displayName: string;\r\n        hidden?: boolean;\r\n    }\r\n\r\n    export interface ConceptualEntity extends ConceptualPropertyItemContainer {\r\n        name: string;\r\n        displayName: string;\r\n        visibility?: ConceptualVisibility;\r\n        calculated?: boolean;\r\n        queryable?: ConceptualQueryableState;\r\n        navigationProperties?: ArrayNamedItems<ConceptualNavigationProperty>;\r\n    }\r\n\r\n    export interface ConceptualDisplayFolder extends ConceptualPropertyItem, ConceptualPropertyItemContainer {\r\n    }\r\n\r\n    export interface ConceptualProperty extends ConceptualPropertyItem {\r\n        type: ValueType;\r\n        kind: ConceptualPropertyKind;\r\n        format?: string;\r\n        column?: ConceptualColumn;\r\n        queryable?: ConceptualQueryableState;\r\n        measure?: ConceptualMeasure;\r\n        kpiValue?: ConceptualProperty;\r\n    }\r\n\r\n    export interface ConceptualHierarchy extends ConceptualPropertyItem {\r\n        levels: ArrayNamedItems<ConceptualHierarchyLevel>;\r\n    }\r\n\r\n    export interface ConceptualHierarchyLevel extends ConceptualPropertyItem {\r\n        column: ConceptualProperty;\r\n    }\r\n\r\n    export interface ConceptualNavigationProperty {\r\n        name: string;\r\n        isActive: boolean;\r\n        sourceColumn?: ConceptualColumn;\r\n        targetEntity: ConceptualEntity;\r\n        sourceMultiplicity: ConceptualMultiplicity;\r\n        targetMultiplicity: ConceptualMultiplicity;\r\n    }\r\n\r\n    export interface ConceptualVariationSource {\r\n        name: string;\r\n        isDefault: boolean;\r\n        navigationProperty?: ConceptualNavigationProperty;\r\n        defaultHierarchy?: ConceptualHierarchy;\r\n        defaultProperty?: ConceptualProperty;\r\n    }\r\n\r\n    export interface ConceptualColumn {\r\n        defaultAggregate?: ConceptualDefaultAggregate;\r\n        keys?: ArrayNamedItems<ConceptualProperty>;\r\n        idOnEntityKey?: boolean;\r\n        calculated?: boolean;\r\n        defaultValue?: SQConstantExpr;\r\n        variations?: ArrayNamedItems<ConceptualVariationSource>;\r\n        aggregateBehavior?: ConceptualAggregateBehavior;\r\n    }\r\n\r\n    export interface ConceptualMeasure {\r\n        kpi?: ConceptualPropertyKpi;\r\n    }\r\n\r\n    export interface ConceptualPropertyKpi {\r\n        statusMetadata: DataViewKpiColumnMetadata;\r\n        trendMetadata?: DataViewKpiColumnMetadata;\r\n        status?: ConceptualProperty;\r\n        goal?: ConceptualProperty;\r\n        trend?: ConceptualProperty;\r\n    }\r\n\r\n    export const enum ConceptualVisibility {\r\n        Visible = 0,\r\n        Hidden = 1,\r\n        ShowAsVariationsOnly = 2,\r\n        IsPrivate = 4,\r\n    }\r\n\r\n    export const enum ConceptualQueryableState {\r\n        Queryable = 0,\r\n        Error = 1,\r\n    }\r\n\r\n    export const enum ConceptualMultiplicity {\r\n        ZeroOrOne = 0,\r\n        One = 1,\r\n        Many = 2,\r\n    }\r\n\r\n    export const enum ConceptualPropertyKind {\r\n        Column,\r\n        Measure,\r\n        Kpi,\r\n    }\r\n\r\n    export const enum ConceptualDefaultAggregate {\r\n        Default,\r\n        None,\r\n        Sum,\r\n        Count,\r\n        Min,\r\n        Max,\r\n        Average,\r\n        DistinctCount,\r\n    }\r\n\r\n    // TODO: Remove this (replaced by ValueType)\r\n    export enum ConceptualDataCategory {\r\n        None,\r\n        Address,\r\n        City,\r\n        Company,\r\n        Continent,\r\n        Country,\r\n        County,\r\n        Date,\r\n        Image,\r\n        ImageUrl,\r\n        Latitude,\r\n        Longitude,\r\n        Organization,\r\n        Place,\r\n        PostalCode,\r\n        Product,\r\n        StateOrProvince,\r\n        WebUrl,\r\n    }\r\n\r\n    export const enum ConceptualAggregateBehavior {\r\n        Default,\r\n        DiscourageAcrossGroups,\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi {\r\n    import ArrayNamedItems = jsCommon.ArrayNamedItems;\r\n    import StringExtensions = jsCommon.StringExtensions;\r\n    import FederatedConceptualSchema = powerbi.data.FederatedConceptualSchema;\r\n    import DefaultSQExprVisitor = powerbi.data.DefaultSQExprVisitor;\r\n    import SQArithmeticExpr = powerbi.data.SQArithmeticExpr;\r\n    import SQEntityExpr = powerbi.data.SQEntityExpr;\r\n    import SQExprConverter = powerbi.data.SQExprConverter;\r\n    import SQAggregationExpr = powerbi.data.SQAggregationExpr;\r\n    import SQColumnRefExpr = powerbi.data.SQColumnRefExpr;\r\n    import SQMeasureRefExpr = powerbi.data.SQMeasureRefExpr;\r\n    import SQPropRefExpr = powerbi.data.SQPropRefExpr;\r\n    import SQHierarchyLevelExpr = powerbi.data.SQHierarchyLevelExpr;\r\n    import SQHierarchyExpr = powerbi.data.SQHierarchyExpr;\r\n    import FieldExprPattern = powerbi.data.FieldExprPattern;\r\n    import QueryProjectionsByRole = data.QueryProjectionsByRole;\r\n\r\n    export interface ScriptResult {\r\n        source: string;\r\n        provider: string;\r\n    }\r\n\r\n    export module ScriptResultUtil {\r\n\r\n        export function findScriptResult(dataViewMappings: DataViewMapping[] | data.CompiledDataViewMapping[]): DataViewScriptResultMapping | data.CompiledDataViewScriptResultMapping {\r\n            if (dataViewMappings && dataViewMappings.length === 1) {\r\n                return dataViewMappings[0].scriptResult;\r\n            }\r\n\r\n            return undefined;\r\n        }\r\n\r\n        export function extractScriptResult(dataViewMappings: data.CompiledDataViewMapping[]): ScriptResult {\r\n            let scriptResult = findScriptResult(dataViewMappings);\r\n            if (scriptResult) {\r\n                let objects = dataViewMappings[0].metadata.objects;\r\n                let source: string = DataViewObjects.getValue<string>(objects, scriptResult.script.source);\r\n                let provider: string = DataViewObjects.getValue<string>(objects, scriptResult.script.provider);\r\n                return {\r\n                    source: source,\r\n                    provider: provider\r\n                };\r\n            }\r\n\r\n            return undefined;\r\n        }\r\n\r\n        export function extractScriptResultFromVisualConfig(dataViewMappings: DataViewMapping[], objects: powerbi.data.DataViewObjectDefinitions): ScriptResult {\r\n            let scriptResult = findScriptResult(dataViewMappings);\r\n            if (scriptResult && objects) {\r\n                let scriptSource = <data.SQConstantExpr>data.DataViewObjectDefinitions.getValue(objects, scriptResult.script.source, null);\r\n                let provider = <data.SQConstantExpr>data.DataViewObjectDefinitions.getValue(objects, scriptResult.script.provider, null);\r\n                return {\r\n                    source: scriptSource ? scriptSource.value : null,\r\n                    provider: provider ? provider.value : null\r\n                };\r\n            }\r\n\r\n            return undefined;\r\n        }\r\n\r\n        export function getScriptInput(projections: QueryProjectionsByRole, selects: ArrayNamedItems<data.NamedSQExpr>, schema: FederatedConceptualSchema): data.ScriptInput {\r\n            let scriptInput: data.ScriptInput = {\r\n                VariableName: \"dataset\",\r\n                Columns: []\r\n            };\r\n\r\n            // Go over all the projections, and create an input column according to the order\r\n            // of the projections (including duplicate expressions)\r\n            if (projections && selects && !_.isEmpty(selects)) {\r\n                let scriptInputColumnNames: string[] = [];\r\n                let scriptInputColumns: data.ScriptInputColumn[] = [];\r\n                for (let role in projections) {\r\n                    for (let projection of projections[role].all()) {\r\n                        let select = selects.withName(projection.queryRef);\r\n                        if (select) {\r\n                            let scriptInputColumn = <data.ScriptInputColumn>{\r\n                                QueryName: select.name,\r\n                                Name: select.expr.accept(new ScriptInputColumnNameVisitor(schema))\r\n                            };\r\n\r\n                            scriptInputColumns.push(scriptInputColumn);\r\n                            scriptInputColumnNames.push(scriptInputColumn.Name);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Make sure the names of the columns are unique\r\n                scriptInputColumnNames = StringExtensions.ensureUniqueNames(scriptInputColumnNames);\r\n\r\n                // Update the names of the columns\r\n                for (let i = 0; i < scriptInputColumnNames.length; i++) {\r\n                    let scriptInputColumn = scriptInputColumns[i];\r\n                    scriptInputColumn.Name = scriptInputColumnNames[i];\r\n                }\r\n\r\n                scriptInput.Columns = scriptInputColumns;\r\n            }\r\n\r\n            return scriptInput;\r\n        }\r\n\r\n        class ScriptInputColumnNameVisitor extends DefaultSQExprVisitor<string>\r\n        {\r\n            private federatedSchema: FederatedConceptualSchema;\r\n\r\n            constructor(federatedSchema: FederatedConceptualSchema) {\r\n                super();\r\n                this.federatedSchema = federatedSchema;\r\n            }\r\n\r\n            public visitEntity(expr: SQEntityExpr): string {\r\n                return expr.entity;\r\n            }\r\n\r\n            public visitColumnRef(expr: SQColumnRefExpr): string {\r\n                return ScriptInputColumnNameVisitor.getNameForProperty(expr, this.federatedSchema);\r\n            }\r\n\r\n            public visitMeasureRef(expr: SQMeasureRefExpr): string {\r\n                return ScriptInputColumnNameVisitor.getNameForProperty(expr, this.federatedSchema);\r\n            }\r\n\r\n            public visitAggr(expr: SQAggregationExpr): string {\r\n                return ScriptInputColumnNameVisitor.getNameForAggregate(expr, this.federatedSchema);\r\n            }\r\n\r\n            public visitHierarchy(expr: SQHierarchyExpr): string {\r\n                return ScriptInputColumnNameVisitor.getNameForHierarchy(expr, this.federatedSchema);\r\n            }\r\n\r\n            public visitHierarchyLevel(expr: SQHierarchyLevelExpr): string {\r\n                return ScriptInputColumnNameVisitor.getNameForHierarchyLevel(expr, this.federatedSchema);\r\n            }\r\n\r\n            public visitArithmetic(expr: SQArithmeticExpr): string {\r\n                return powerbi.data.getArithmeticOperatorName(expr.operator) + '__' + expr.left.accept(this) + '_' +  expr.right.accept(this) + '__';\r\n            }\r\n\r\n            public static getNameForProperty(expr: SQPropRefExpr, federatedSchema: FederatedConceptualSchema): string {\r\n                debug.assertValue(expr, 'expr');\r\n\r\n                let fieldExpr = SQExprConverter.asFieldPattern(expr);\r\n                let fieldExprItem = fieldExpr.column || fieldExpr.measure;\r\n\r\n                let schema = federatedSchema.schema(fieldExprItem.schema),\r\n                    property = schema.findProperty(fieldExprItem.entity, fieldExprItem.name);\r\n\r\n                if (property)\r\n                    return property.name;\r\n            }\r\n\r\n            public static getNameForAggregate(expr: SQAggregationExpr, federatedSchema: FederatedConceptualSchema): string {\r\n                debug.assertValue(expr, 'expr');\r\n\r\n                let field = SQExprConverter.asFieldPattern(expr);\r\n                let fieldAggregate = field.columnAggr || field.entityAggr;\r\n                let entity = federatedSchema\r\n                    .schema(fieldAggregate.schema)\r\n                    .entities\r\n                    .withName(fieldAggregate.entity);\r\n\r\n                if (!entity)\r\n                    return;\r\n\r\n                let backingProperty = entity.properties.withName(FieldExprPattern.getFieldExprName(field));\r\n\r\n                return backingProperty.name;\r\n            }\r\n\r\n            public static getNameForHierarchy(expr: SQHierarchyExpr, federatedScheam: FederatedConceptualSchema): string {\r\n                let fieldExpr = SQExprConverter.asFieldPattern(expr);\r\n                let fieldExprItem = fieldExpr.hierarchy;\r\n\r\n                if (fieldExprItem) {\r\n                    let schema = federatedScheam.schema(fieldExprItem.schema),\r\n                        hierarchy = schema.findHierarchy(fieldExprItem.entity, fieldExprItem.name);\r\n\r\n                    if (hierarchy)\r\n                        return hierarchy.name;\r\n                }\r\n            }\r\n\r\n            public static getNameForHierarchyLevel(expr: SQHierarchyLevelExpr, federatedScheam: FederatedConceptualSchema): string {\r\n                debug.assertValue(expr, 'expr');\r\n\r\n                let field = SQExprConverter.asFieldPattern(expr);\r\n                if (field.columnHierarchyLevelVariation) {\r\n                    return ScriptInputColumnNameVisitor.getVariationLevelName(expr, federatedScheam);\r\n                }\r\n\r\n                /*Hierarchies are not supported yet*/\r\n            }\r\n\r\n            private static getVariationLevelName(expr: SQHierarchyLevelExpr, federatedSchema: FederatedConceptualSchema): string {\r\n                debug.assertValue(expr, 'expr');\r\n\r\n                let field = SQExprConverter.asFieldPattern(expr);\r\n                let fieldEntity = FieldExprPattern.toFieldExprEntityItemPattern(field);\r\n\r\n                if (field.columnHierarchyLevelVariation) {\r\n                    let prop = federatedSchema.schema(fieldEntity.schema).findProperty(fieldEntity.entity, field.columnHierarchyLevelVariation.source.name);\r\n                    if (!prop)\r\n                        return;\r\n\r\n                    let variations = prop.column.variations;\r\n                    for (let variation of variations)\r\n                        if (variation.name === field.columnHierarchyLevelVariation.variationName)\r\n                            for (let level of variation.defaultHierarchy.levels)\r\n                                if (level.name === field.columnHierarchyLevelVariation.level.level)\r\n                                    return level.column.name;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data.segmentation {\r\n\r\n    export interface DataViewTableSegment extends DataViewTable {\r\n        /** \r\n         * Index of the last item that had a merge flag in the underlying data.\r\n         * We assume merge flags are not random but adjacent to each other. \r\n         */\r\n        lastMergeIndex?: number;\r\n    }\r\n\r\n    export interface DataViewTreeSegmentNode extends DataViewTreeNode {\r\n        /** Indicates whether the node is a duplicate of a node from a previous segment. */\r\n        isMerge?: boolean;\r\n    }\r\n\r\n    export interface DataViewCategoricalSegment extends DataViewCategorical {\r\n        /** \r\n         * Index of the last item that had a merge flag in the underlying data.\r\n         * We assume merge flags are not random but adjacent to each other. \r\n         */\r\n        lastMergeIndex?: number;\r\n    }\r\n\r\n    export interface DataViewMatrixSegmentNode extends DataViewMatrixNode {\r\n        /**\r\n         * Index of the last item that had a merge flag in the underlying data.\r\n         * We assume merge flags are not random but adjacent to each other. \r\n         */\r\n        isMerge?: boolean;\r\n    }\r\n\r\n    export module DataViewMerger {\r\n\r\n        export function mergeDataViews(source: DataView, segment: DataView): void {\r\n\r\n            if (!DataViewAnalysis.isMetadataEquivalent(source.metadata, segment.metadata)) {\r\n                debug.assertFail(\"Cannot merge data views with different metadata columns\");\r\n            }\r\n\r\n            // The last segment is complete. We mark the source as complete.\r\n            if (!segment.metadata.segment)\r\n                delete source.metadata.segment;\r\n\r\n            if (source.table && segment.table)\r\n                mergeTables(source.table, <DataViewTableSegment>segment.table);\r\n\r\n            if (source.categorical && segment.categorical)\r\n                mergeCategorical(source.categorical, <DataViewCategoricalSegment>segment.categorical);\r\n\r\n            // Tree cannot support subtotals hence we can get into situations\r\n            // where a node has no children in one segment and more than 1 child\r\n            // in another segment.\r\n            if (source.tree && segment.tree)\r\n                mergeTreeNodes(source.tree.root, segment.tree.root, true /*allowDifferentStructure*/);\r\n\r\n            if (source.matrix && segment.matrix)\r\n                mergeTreeNodes(source.matrix.rows.root, segment.matrix.rows.root, false /*allowDifferentStructure*/);\r\n        }\r\n\r\n        /** Note: Public for testability */\r\n        export function mergeTables(source: DataViewTable, segment: DataViewTableSegment): void {\r\n            debug.assertValue(source, 'source');\r\n            debug.assertValue(segment, 'segment');\r\n\r\n            if (segment.rows.length === 0)\r\n                return;\r\n\r\n            merge(source.rows, segment.rows, segment.lastMergeIndex + 1);\r\n        }\r\n\r\n        /**\r\n         * Merge categories values and identities\r\n         * \r\n         * Note: Public for testability \r\n         */\r\n        export function mergeCategorical(source: DataViewCategorical, segment: DataViewCategoricalSegment): void {\r\n            debug.assertValue(source, 'source');\r\n            debug.assertValue(segment, 'segment');\r\n\r\n            // Merge categories values and identities\r\n            if (source.categories && segment.categories) {\r\n                let segmentCategoriesLength = segment.categories.length;\r\n                debug.assert(source.categories.length === segmentCategoriesLength, \"Source and segment categories have different lengths.\");\r\n\r\n                for (let categoryIndex: number = 0; categoryIndex < segmentCategoriesLength; categoryIndex++) {\r\n                    let segmentCategory = segment.categories[categoryIndex];\r\n                    let sourceCategory = source.categories[categoryIndex];\r\n\r\n                    debug.assert(DataViewAnalysis.areMetadataColumnsEquivalent(sourceCategory.source, segmentCategory.source), \"Source and segment category have different sources.\");\r\n\r\n                    if (!sourceCategory.values && segmentCategory.values) {\r\n                        sourceCategory.values = [];\r\n                        debug.assert(!sourceCategory.identity, \"Source category is missing values but has identities.\");\r\n                    }\r\n\r\n                    if (segmentCategory.values) {\r\n                        merge(sourceCategory.values, segmentCategory.values, segment.lastMergeIndex + 1);\r\n                    }\r\n\r\n                    if (!sourceCategory.identity && segmentCategory.identity) {\r\n                        sourceCategory.identity = [];\r\n                    }\r\n\r\n                    if (segmentCategory.identity) {\r\n                        merge(sourceCategory.identity, segmentCategory.identity, segment.lastMergeIndex + 1);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Merge values for each value column\r\n            if (source.values && segment.values) {\r\n                let segmentValuesLength = segment.values.length;\r\n                debug.assert(source.values.length === segmentValuesLength, \"Source and segment values have different lengths.\");\r\n\r\n                for (let valueIndex: number = 0; valueIndex < segmentValuesLength; valueIndex++) {\r\n                    let segmentValue = segment.values[valueIndex];\r\n                    let sourceValue = source.values[valueIndex];\r\n\r\n                    debug.assert(jsCommon.JsonComparer.equals(sourceValue.source, segmentValue.source), \"Source and segment value have different sources.\");\r\n\r\n                    if (!sourceValue.values && segmentValue.values) {\r\n                        sourceValue.values = [];\r\n                    }\r\n\r\n                    if (segmentValue.values) {\r\n                        merge(sourceValue.values, segmentValue.values, segment.lastMergeIndex + 1);\r\n                    }\r\n\r\n                    if (segmentValue.highlights) {\r\n                        merge(sourceValue.highlights, segmentValue.highlights, segment.lastMergeIndex + 1);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Merges the segment array starting at the specified index into the source array \r\n         * and returns the segment slice that wasn't merged.\r\n         * The segment array is spliced up to specified index in the process.\r\n         */\r\n        function merge(source: any[], segment: any[], index?: number): any[] {\r\n            if (index >= segment.length)\r\n                return segment;\r\n\r\n            let result: any[] = [];\r\n            if (index !== undefined)\r\n                result = segment.splice(0, index);\r\n\r\n            Array.prototype.push.apply(source, segment);\r\n\r\n            return result;\r\n        }\r\n\r\n        /** Note: Public for testability */\r\n        export function mergeTreeNodes(sourceRoot: DataViewTreeNode, segmentRoot: DataViewTreeNode, allowDifferentStructure: boolean): void {\r\n            debug.assertValue(sourceRoot, 'sourceRoot');\r\n            debug.assertValue(segmentRoot, 'segmentRoot');\r\n\r\n            if (!segmentRoot.children || segmentRoot.children.length === 0)\r\n                return;\r\n\r\n            if (allowDifferentStructure && (!sourceRoot.children || sourceRoot.children.length === 0)) {\r\n                sourceRoot.children = segmentRoot.children;\r\n                return;\r\n            }\r\n\r\n            debug.assert(sourceRoot.children && sourceRoot.children.length >= 0,\r\n                \"Source tree has different structure than segment.\");\r\n\r\n            let firstAppendIndex = findFirstAppendIndex(segmentRoot.children);\r\n            let lastSourceChild = sourceRoot.children[sourceRoot.children.length - 1];\r\n            let mergedChildren = merge(sourceRoot.children, segmentRoot.children, firstAppendIndex);\r\n\r\n            if (mergedChildren.length > 0)\r\n                mergeTreeNodes(lastSourceChild, mergedChildren[mergedChildren.length - 1], allowDifferentStructure);\r\n        }\r\n\r\n        function findFirstAppendIndex(children: DataViewTreeNode[]): number {\r\n            if (children.length === 0)\r\n                return 0;\r\n\r\n            let i: number = 0;\r\n            for (; i < children.length; i++) {\r\n                let childSegment: DataViewTreeSegmentNode = <DataViewTreeSegmentNode>children[i];\r\n                if (!childSegment.isMerge)\r\n                    break;\r\n            }\r\n\r\n            return i;\r\n        }\r\n    }\r\n} ","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    import ArrayExtensions = jsCommon.ArrayExtensions;\r\n\r\n    /** Rewrites an expression tree, including all descendant nodes. */\r\n    export class SQExprRewriter implements ISQExprVisitor<SQExpr>, IFillRuleDefinitionVisitor<LinearGradient2Definition, LinearGradient3Definition> {\r\n        public visitColumnRef(expr: SQColumnRefExpr): SQExpr {\r\n            let origArg = expr.source,\r\n                rewrittenArg = origArg.accept(this);\r\n\r\n            if (origArg === rewrittenArg)\r\n                return expr;\r\n\r\n            return new SQColumnRefExpr(rewrittenArg, expr.ref);\r\n        }\r\n\r\n        public visitMeasureRef(expr: SQMeasureRefExpr): SQExpr {\r\n            let origArg = expr.source,\r\n                rewrittenArg = origArg.accept(this);\r\n\r\n            if (origArg === rewrittenArg)\r\n                return expr;\r\n\r\n            return new SQMeasureRefExpr(rewrittenArg, expr.ref);\r\n        }\r\n\r\n        public visitAggr(expr: SQAggregationExpr): SQExpr {\r\n            let origArg = expr.arg,\r\n                rewrittenArg = origArg.accept(this);\r\n\r\n            if (origArg === rewrittenArg)\r\n                return expr;\r\n\r\n            return new SQAggregationExpr(rewrittenArg, expr.func);\r\n        }\r\n\r\n        public visitHierarchy(expr: SQHierarchyExpr): SQExpr {\r\n            let origArg = expr.arg,\r\n                rewrittenArg = origArg.accept(this);\r\n\r\n            if (origArg === rewrittenArg)\r\n                return expr;\r\n\r\n            return new SQHierarchyExpr(rewrittenArg, expr.hierarchy);\r\n        }\r\n\r\n        public visitHierarchyLevel(expr: SQHierarchyLevelExpr): SQExpr {\r\n            let origArg = expr.arg,\r\n                rewrittenArg = origArg.accept(this);\r\n\r\n            if (origArg === rewrittenArg)\r\n                return expr;\r\n\r\n            return new SQHierarchyLevelExpr(rewrittenArg, expr.level);\r\n        }\r\n\r\n        public visitPropertyVariationSource(expr: SQPropertyVariationSourceExpr): SQExpr {\r\n            let origArg = expr.arg,\r\n                rewrittenArg = origArg.accept(this);\r\n\r\n            if (origArg === rewrittenArg)\r\n                return expr;\r\n\r\n            return new SQPropertyVariationSourceExpr(rewrittenArg, expr.name, expr.property);\r\n        }\r\n\r\n        public visitEntity(expr: SQEntityExpr): SQExpr {\r\n            return expr;\r\n        }\r\n\r\n        public visitAnd(orig: SQAndExpr): SQExpr {\r\n            let origLeft = orig.left,\r\n                rewrittenLeft = origLeft.accept(this),\r\n                origRight = orig.right,\r\n                rewrittenRight = origRight.accept(this);\r\n\r\n            if (origLeft === rewrittenLeft && origRight === rewrittenRight)\r\n                return orig;\r\n\r\n            return new SQAndExpr(rewrittenLeft, rewrittenRight);\r\n        }\r\n\r\n        public visitBetween(orig: SQBetweenExpr): SQExpr {\r\n            let origArg = orig.arg,\r\n                rewrittenArg = origArg.accept(this),\r\n                origLower = orig.lower,\r\n                rewrittenLower = origLower.accept(this),\r\n                origUpper = orig.upper,\r\n                rewrittenUpper = origUpper.accept(this);\r\n\r\n            if (origArg === rewrittenArg && origLower === rewrittenLower && origUpper === rewrittenUpper)\r\n                return orig;\r\n\r\n            return new SQBetweenExpr(rewrittenArg, rewrittenLower, rewrittenUpper);\r\n        }\r\n\r\n        public visitIn(orig: SQInExpr): SQExpr {\r\n            let origArgs = orig.args,\r\n                rewrittenArgs = this.rewriteAll(origArgs),\r\n                origValues: SQExpr[][] = orig.values,\r\n                rewrittenValues: SQExpr[][];\r\n\r\n            for (let i = 0, len = origValues.length; i < len; i++) {\r\n                let origValueTuple = origValues[i],\r\n                    rewrittenValueTuple = this.rewriteAll(origValueTuple);\r\n\r\n                if (origValueTuple !== rewrittenValueTuple && !rewrittenValues)\r\n                    rewrittenValues = ArrayExtensions.take(origValues, i);\r\n\r\n                if (rewrittenValues)\r\n                    rewrittenValues.push(rewrittenValueTuple);\r\n            }\r\n\r\n            if (origArgs === rewrittenArgs && !rewrittenValues)\r\n                return orig;\r\n\r\n            return new SQInExpr(rewrittenArgs, rewrittenValues || origValues);\r\n        }\r\n\r\n        private rewriteAll(origExprs: SQExpr[]): SQExpr[] {\r\n            debug.assertValue(origExprs, 'origExprs');\r\n\r\n            let rewrittenResult: SQExpr[];\r\n            for (let i = 0, len = origExprs.length; i < len; i++) {\r\n                let origExpr = origExprs[i],\r\n                    rewrittenExpr = origExpr.accept(this);\r\n\r\n                if (origExpr !== rewrittenExpr && !rewrittenResult)\r\n                    rewrittenResult = ArrayExtensions.take(origExprs, i);\r\n\r\n                if (rewrittenResult)\r\n                    rewrittenResult.push(rewrittenExpr);\r\n            }\r\n\r\n            return rewrittenResult || origExprs;\r\n        }\r\n\r\n        public visitOr(orig: SQOrExpr): SQExpr {\r\n            let origLeft = orig.left,\r\n                rewrittenLeft = origLeft.accept(this),\r\n                origRight = orig.right,\r\n                rewrittenRight = origRight.accept(this);\r\n\r\n            if (origLeft === rewrittenLeft && origRight === rewrittenRight)\r\n                return orig;\r\n\r\n            return new SQOrExpr(rewrittenLeft, rewrittenRight);\r\n        }\r\n\r\n        public visitCompare(orig: SQCompareExpr): SQExpr {\r\n            let origLeft = orig.left,\r\n                rewrittenLeft = origLeft.accept(this),\r\n                origRight = orig.right,\r\n                rewrittenRight = origRight.accept(this);\r\n\r\n            if (origLeft === rewrittenLeft && origRight === rewrittenRight)\r\n                return orig;\r\n\r\n            return new SQCompareExpr(orig.comparison, rewrittenLeft, rewrittenRight);\r\n        }\r\n\r\n        public visitContains(orig: SQContainsExpr): SQExpr {\r\n            let origLeft = orig.left,\r\n                rewrittenLeft = origLeft.accept(this),\r\n                origRight = orig.right,\r\n                rewrittenRight = origRight.accept(this);\r\n\r\n            if (origLeft === rewrittenLeft && origRight === rewrittenRight)\r\n                return orig;\r\n\r\n            return new SQContainsExpr(rewrittenLeft, rewrittenRight);\r\n        }\r\n\r\n        public visitExists(orig: SQExistsExpr): SQExpr {\r\n            let origArg = orig.arg,\r\n                rewrittenArg = origArg.accept(this);\r\n\r\n            if (origArg === rewrittenArg)\r\n                return orig;\r\n\r\n            return new SQExistsExpr(rewrittenArg);\r\n        }\r\n\r\n        public visitNot(orig: SQNotExpr): SQExpr {\r\n            let origArg = orig.arg,\r\n                rewrittenArg = origArg.accept(this);\r\n\r\n            if (origArg === rewrittenArg)\r\n                return orig;\r\n\r\n            return new SQNotExpr(rewrittenArg);\r\n        }\r\n\r\n        public visitStartsWith(orig: SQStartsWithExpr): SQExpr {\r\n            let origLeft = orig.left,\r\n                rewrittenLeft = origLeft.accept(this),\r\n                origRight = orig.right,\r\n                rewrittenRight = origRight.accept(this);\r\n\r\n            if (origLeft === rewrittenLeft && origRight === rewrittenRight)\r\n                return orig;\r\n\r\n            return new SQStartsWithExpr(rewrittenLeft, rewrittenRight);\r\n        }\r\n\r\n        public visitConstant(expr: SQConstantExpr): SQExpr {\r\n            return expr;\r\n        }\r\n\r\n        public visitDateSpan(orig: SQDateSpanExpr): SQExpr {\r\n            let origArg = orig.arg,\r\n                rewrittenArg = origArg.accept(this);\r\n\r\n            if (origArg === rewrittenArg)\r\n                return orig;\r\n\r\n            return new SQDateSpanExpr(orig.unit, rewrittenArg);\r\n        }\r\n\r\n        public visitDateAdd(orig: SQDateAddExpr): SQExpr {\r\n            let origArg = orig.arg,\r\n                rewrittenArg = origArg.accept(this);\r\n\r\n            if (origArg === rewrittenArg)\r\n                return orig;\r\n\r\n            return new SQDateAddExpr(orig.unit, orig.amount, rewrittenArg);\r\n        }\r\n\r\n        public visitNow(orig: SQNowExpr): SQExpr {\r\n            return orig;\r\n        }\r\n\r\n        public visitDefaultValue(orig: SQDefaultValueExpr): SQExpr {\r\n            return orig;\r\n        }\r\n\r\n        public visitAnyValue(orig: SQAnyValueExpr): SQExpr {\r\n            return orig;\r\n        }\r\n\r\n        public visitArithmetic(orig: SQArithmeticExpr): SQExpr {\r\n            let origLeft = orig.left,\r\n                rewrittenLeft = origLeft.accept(this),\r\n                origRight = orig.right,\r\n                rewrittenRight = origRight.accept(this);\r\n\r\n            if (origLeft === rewrittenLeft && origRight === rewrittenRight)\r\n                return orig;\r\n\r\n            return new SQArithmeticExpr(rewrittenLeft, rewrittenRight, orig.operator);\r\n        }\r\n\r\n        public visitFillRule(orig: SQFillRuleExpr): SQExpr {\r\n            let origInput = orig.input,\r\n                rewrittenInput = origInput.accept(this);\r\n\r\n            let origRule = orig.rule;\r\n\r\n            let origGradient2 = origRule.linearGradient2,\r\n                rewrittenGradient2 = origGradient2;\r\n            if (origGradient2) {\r\n                rewrittenGradient2 = this.visitLinearGradient2(origGradient2);\r\n            }\r\n\r\n            let origGradient3 = origRule.linearGradient3,\r\n                rewrittenGradient3 = origGradient3;\r\n            if (origGradient3) {\r\n                rewrittenGradient3 = this.visitLinearGradient3(origGradient3);\r\n            }\r\n\r\n            if (origInput !== rewrittenInput ||\r\n                origGradient2 !== rewrittenGradient2 ||\r\n                origGradient3 !== rewrittenGradient3) {\r\n                let rewrittenRule: FillRuleDefinition = {};\r\n                if (rewrittenGradient2)\r\n                    rewrittenRule.linearGradient2 = rewrittenGradient2;\r\n                if (rewrittenGradient3)\r\n                    rewrittenRule.linearGradient3 = rewrittenGradient3;\r\n\r\n                return new SQFillRuleExpr(rewrittenInput, rewrittenRule);\r\n            }\r\n\r\n            return orig;\r\n        }\r\n\r\n        public visitLinearGradient2(origGradient2: LinearGradient2Definition): LinearGradient2Definition {\r\n            debug.assertValue(origGradient2, 'origGradient2');\r\n\r\n            let origMin = origGradient2.min,\r\n                rewrittenMin = this.visitFillRuleStop(origMin),\r\n                origMax = origGradient2.max,\r\n                rewrittenMax = this.visitFillRuleStop(origMax);\r\n\r\n            if (origMin !== rewrittenMin || origMax !== rewrittenMax) {\r\n                return {\r\n                    min: rewrittenMin,\r\n                    max: rewrittenMax,\r\n                };\r\n            }\r\n\r\n            return origGradient2;\r\n        }\r\n\r\n        public visitLinearGradient3(origGradient3: LinearGradient3Definition): LinearGradient3Definition {\r\n            debug.assertValue(origGradient3, 'origGradient3');\r\n\r\n            let origMin = origGradient3.min,\r\n                rewrittenMin = this.visitFillRuleStop(origMin),\r\n                origMid = origGradient3.mid,\r\n                rewrittenMid = this.visitFillRuleStop(origMid),\r\n                origMax = origGradient3.max,\r\n                rewrittenMax = this.visitFillRuleStop(origMax);\r\n\r\n            if (origMin !== rewrittenMin || origMid !== rewrittenMid || origMax !== rewrittenMax) {\r\n                return {\r\n                    min: rewrittenMin,\r\n                    mid: rewrittenMid,\r\n                    max: rewrittenMax,\r\n                };\r\n            }\r\n\r\n            return origGradient3;\r\n        }\r\n\r\n        private visitFillRuleStop(stop: RuleColorStopDefinition): RuleColorStopDefinition {\r\n            debug.assertValue(stop, 'stop');\r\n\r\n            let origColor = stop.color,\r\n                rewrittenColor = stop.color.accept(this);\r\n\r\n            let origValue = stop.value,\r\n                rewrittenValue = origValue;\r\n            if (origValue)\r\n                rewrittenValue = origValue.accept(this);\r\n\r\n            if (origColor !== rewrittenColor || origValue !== rewrittenValue) {\r\n                let rewrittenStop: RuleColorStopDefinition = {\r\n                    color: rewrittenColor\r\n                };\r\n\r\n                if (rewrittenValue)\r\n                    rewrittenStop.value = rewrittenValue;\r\n\r\n                return rewrittenStop;\r\n            }\r\n\r\n            return stop;\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    /** Responsible for writing equality comparisons against a field to an SQInExpr. */\r\n    export module EqualsToInRewriter {\r\n        export function run(expr: SQExpr): SQExpr {\r\n            debug.assertValue(expr, 'expr');\r\n\r\n            return expr.accept(new Rewriter());\r\n        }\r\n\r\n        class Rewriter extends SQExprRewriter {\r\n            private current: InBuilder;\r\n\r\n            constructor() {\r\n                super();\r\n            }\r\n\r\n            public visitCompare(expr: SQCompareExpr): SQExpr {\r\n                if (expr.comparison !== QueryComparisonKind.Equal)\r\n                    return this.visitUnsupported(expr);\r\n                if (!this.isSupported(expr.left) || !this.isSupported(expr.right))\r\n                    return this.visitUnsupported(expr);\r\n\r\n                let leftIsComparand = this.isComparand(expr.left);\r\n                let rightIsComparand = this.isComparand(expr.right);\r\n                if (leftIsComparand === rightIsComparand)\r\n                    return this.visitUnsupported(expr);\r\n\r\n                let operand: SQExpr = leftIsComparand\r\n                    ? expr.left\r\n                    : expr.right;\r\n                let value: SQExpr = leftIsComparand\r\n                    ? expr.right\r\n                    : expr.left;\r\n\r\n                let current = this.current;\r\n                if (!current) {\r\n                    return SQExprBuilder.inExpr([operand], [[value]]);\r\n                }\r\n\r\n                current.add(operand, value);\r\n\r\n                return expr;\r\n            }\r\n\r\n            public visitOr(expr: SQOrExpr): SQExpr {\r\n                if (!this.isSupported(expr.left) || !this.isSupported(expr.right))\r\n                    return this.visitUnsupported(expr);\r\n\r\n                let current: InBuilder;\r\n                if (!this.current) {\r\n                    current = this.current = new InBuilder();\r\n                }\r\n\r\n                expr.left.accept(this);\r\n                expr.right.accept(this);\r\n\r\n                if (current) {\r\n                    this.current = null;\r\n                    return current.complete() || expr;\r\n                }\r\n\r\n                return expr;\r\n            }\r\n\r\n            public visitAnd(expr: SQAndExpr): SQExpr {\r\n                if (!this.isSupported(expr.left) || !this.isSupported(expr.right))\r\n                    return this.visitUnsupported(expr);\r\n\r\n                let current = this.current;\r\n                if (current) {\r\n                    // NOTE: Composite keys are not supported by this algorithm.\r\n                    current.cancel();\r\n                    return expr;\r\n                }\r\n\r\n                return super.visitAnd(expr);\r\n            }\r\n\r\n            private visitUnsupported(expr: SQExpr): SQExpr {\r\n                let current = this.current;\r\n                if (current)\r\n                    current.cancel();\r\n\r\n                return expr;\r\n            }\r\n\r\n            private isSupported(expr: SQExpr): boolean {\r\n                debug.assertValue(expr, 'expr');\r\n\r\n                return expr instanceof SQCompareExpr\r\n                    || expr instanceof SQColumnRefExpr\r\n                    || expr instanceof SQConstantExpr\r\n                    || expr instanceof SQHierarchyLevelExpr\r\n                    || expr instanceof SQOrExpr\r\n                    || expr instanceof SQAndExpr;\r\n            }\r\n\r\n            private isComparand(expr: SQExpr): boolean {\r\n                return expr instanceof SQColumnRefExpr\r\n                    || expr instanceof SQHierarchyLevelExpr;\r\n            }\r\n        }\r\n\r\n        class InBuilder {\r\n            private operand: SQExpr;\r\n            private values: SQExpr[];\r\n            private cancelled: boolean;\r\n\r\n            public add(operand: SQExpr, value: SQExpr): void {\r\n                debug.assertValue(operand, 'operand');\r\n                debug.assertValue(value, 'value');\r\n\r\n                if (this.cancelled)\r\n                    return;\r\n\r\n                if (this.operand && !SQExpr.equals(operand, this.operand)) {\r\n                    this.cancel();\r\n                    return;\r\n                }\r\n\r\n                this.operand = operand;\r\n\r\n                let values = this.values;\r\n                if (!values)\r\n                    values = this.values = [];\r\n\r\n                values.push(value);\r\n            }\r\n\r\n            public cancel(): void {\r\n                this.cancelled = true;\r\n            }\r\n\r\n            public complete(): SQInExpr {\r\n                if (this.cancelled || !this.operand)\r\n                    return;\r\n\r\n                return SQExprBuilder.inExpr([this.operand], _.map(this.values, v => [v]));\r\n            }\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n\r\n    export interface FilterValueScopeIdsContainer {\r\n            isNot: boolean;\r\n            scopeIds: DataViewScopeIdentity[];\r\n        }\r\n\r\n    export module SQExprConverter {\r\n        export function asScopeIdsContainer(filter: SemanticFilter, fieldSQExprs: SQExpr[]): FilterValueScopeIdsContainer {\r\n            debug.assertValue(filter, 'filter');\r\n            debug.assertValue(fieldSQExprs, 'fieldSQExprs');\r\n            debug.assert(fieldSQExprs.length > 0, 'There should be at least 1 field expression.');\r\n\r\n            let filterItems = filter.conditions();\r\n            debug.assert(filterItems.length === 1, 'There should be exactly 1 filter expression.');\r\n            let filterItem = filterItems[0];\r\n            if (filterItem) {\r\n                let visitor = new FilterScopeIdsCollectorVisitor(fieldSQExprs);\r\n                if (filterItem.accept(visitor))\r\n                    return visitor.getResult();\r\n            }\r\n        }\r\n\r\n        /** Gets a comparand value from the given DataViewScopeIdentity. */\r\n        export function getFirstComparandValue(identity: DataViewScopeIdentity): any {\r\n            debug.assertValue(identity, 'identity');\r\n\r\n            let comparandExpr = (<SQExpr>identity.expr).accept(new FindComparandVisitor());\r\n            if (comparandExpr)\r\n                return comparandExpr.value;\r\n        }\r\n    }\r\n\r\n    /** Collect filter values from simple semantic filter that is similar to 'is any of' or 'is not any of', getResult() returns a collection of scopeIds.**/\r\n    class FilterScopeIdsCollectorVisitor extends DefaultSQExprVisitor<boolean>{\r\n        private isRoot: boolean;\r\n        private isNot: boolean;\r\n        private keyExprsCount: number;\r\n        private valueExprs: SQExpr[];\r\n        private fieldExprs: SQExpr[];\r\n\r\n        constructor(fieldSQExprs:SQExpr[]) {\r\n            super();\r\n            this.isRoot = true;\r\n            this.isNot = false;\r\n            this.keyExprsCount = null;\r\n            this.valueExprs = [];\r\n\r\n            // Need to drop the entitylet before create the scopeIdentity. The ScopeIdentity created on the client is used to\r\n            // compare the ScopeIdentity came from the server. But server doesn't have the entity variable concept, so we will\r\n            // need to drop it in order to use JsonComparer.\r\n            this.fieldExprs = [];\r\n            for (let field of fieldSQExprs) {\r\n                this.fieldExprs.push(SQExprBuilder.removeEntityVariables(field));\r\n            }\r\n        }\r\n\r\n        public getResult(): FilterValueScopeIdsContainer {\r\n            debug.assert(this.fieldExprs.length > 0, 'fieldExprs has at least one fieldExpr');            \r\n\r\n            let valueExprs = this.valueExprs,\r\n                scopeIds: DataViewScopeIdentity[] = [];\r\n            let valueCount: number = this.keyExprsCount || 1;\r\n\r\n            for (let startIndex = 0, endIndex = valueCount, len = valueExprs.length; startIndex < len && endIndex <= len;) {\r\n                let values = valueExprs.slice(startIndex, endIndex);\r\n                let scopeId = FilterScopeIdsCollectorVisitor.getScopeIdentity(this.fieldExprs, values);\r\n\r\n                if (!jsCommon.ArrayExtensions.isInArray(scopeIds, scopeId, DataViewScopeIdentity.equals))\r\n                    scopeIds.push(scopeId);\r\n\r\n                startIndex += valueCount;\r\n                endIndex += valueCount;\r\n            }\r\n\r\n            return {\r\n                isNot: this.isNot,\r\n                scopeIds: scopeIds,\r\n            };\r\n        }\r\n\r\n        private static getScopeIdentity(fieldExprs: SQExpr[], valueExprs: SQExpr[]): DataViewScopeIdentity {\r\n            debug.assert(valueExprs.length > 0, 'valueExprs has at least one valueExpr');\r\n            debug.assert(valueExprs.length === fieldExprs.length, 'fieldExpr and valueExpr count should match');\r\n\r\n            let compoundSQExpr: SQExpr;\r\n            for (let i = 0, len = fieldExprs.length; i < len; i++) {\r\n                let equalsExpr = SQExprBuilder.equal(fieldExprs[i], valueExprs[i]);\r\n                if (!compoundSQExpr)\r\n                    compoundSQExpr = equalsExpr;\r\n                else\r\n                    compoundSQExpr = SQExprBuilder.and(compoundSQExpr, equalsExpr);\r\n            }\r\n\r\n            return createDataViewScopeIdentity(compoundSQExpr);\r\n        }\r\n\r\n        public visitOr(expr: SQOrExpr): boolean {\r\n            if (this.keyExprsCount !== null)\r\n                return this.unsupportedSQExpr();\r\n\r\n            this.isRoot = false;\r\n            return expr.left.accept(this) && expr.right.accept(this);\r\n        }\r\n\r\n        public visitNot(expr: SQNotExpr): boolean {\r\n            if (!this.isRoot)\r\n                return this.unsupportedSQExpr();\r\n\r\n            this.isNot = true;\r\n            return expr.arg.accept(this);\r\n        }\r\n\r\n        public visitConstant(expr: SQConstantExpr): boolean {\r\n            if (this.isRoot && expr.type.primitiveType === PrimitiveType.Null)\r\n                return this.unsupportedSQExpr();\r\n\r\n            this.valueExprs.push(expr);            \r\n            return true;\r\n        }\r\n\r\n        public visitCompare(expr: SQCompareExpr): boolean {\r\n            if (this.keyExprsCount !== null)\r\n                return this.unsupportedSQExpr();\r\n\r\n            this.isRoot = false;\r\n\r\n            if (expr.comparison !== QueryComparisonKind.Equal)\r\n                return this.unsupportedSQExpr();\r\n\r\n            return expr.left.accept(this) && expr.right.accept(this);\r\n        }\r\n\r\n        public visitIn(expr: SQInExpr): boolean {\r\n            this.keyExprsCount = 0;\r\n            let result: boolean;\r\n            this.isRoot = false;\r\n            for (let arg of expr.args) {\r\n                result = arg.accept(this);\r\n                if (!result)\r\n                    return this.unsupportedSQExpr();\r\n\r\n                this.keyExprsCount++;\r\n            }\r\n\r\n            if (this.keyExprsCount !== this.fieldExprs.length)\r\n                return this.unsupportedSQExpr();\r\n\r\n            let values = expr.values;\r\n            for (let valueTuple of values) {\r\n                let jlen = valueTuple.length;\r\n                debug.assert(jlen === this.keyExprsCount, \"keys count and values count should match\");\r\n\r\n                for (let value of valueTuple) {\r\n                    result = value.accept(this);\r\n                    if (!result)\r\n                        return this.unsupportedSQExpr();\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        public visitColumnRef(expr: SQColumnRefExpr): boolean {\r\n            if (this.isRoot)\r\n                return this.unsupportedSQExpr();\r\n\r\n            let fixedExpr = SQExprBuilder.removeEntityVariables(expr);\r\n            if (this.keyExprsCount !== null)\r\n                return SQExpr.equals(this.fieldExprs[this.keyExprsCount], fixedExpr);\r\n\r\n            return SQExpr.equals(this.fieldExprs[0], fixedExpr);\r\n        }\r\n\r\n        public visitDefaultValue(expr: SQDefaultValueExpr): boolean {\r\n            if (this.isRoot || this.keyExprsCount !== null)\r\n                return this.unsupportedSQExpr();\r\n\r\n            this.valueExprs.push(expr);\r\n            return true;\r\n        }\r\n\r\n        public visitAnyValue(expr: SQAnyValueExpr): boolean {\r\n            if (this.isRoot || this.keyExprsCount !== null)\r\n                return this.unsupportedSQExpr();\r\n\r\n            this.valueExprs.push(expr);\r\n            return true;\r\n        }\r\n\r\n        public visitDefault(expr: SQExpr): boolean {\r\n            return this.unsupportedSQExpr();\r\n        }\r\n\r\n        private unsupportedSQExpr(): boolean {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    class FindComparandVisitor extends DefaultSQExprVisitor<SQConstantExpr> {\r\n        public visitAnd(expr: SQAndExpr): SQConstantExpr {\r\n            return expr.left.accept(this) || expr.right.accept(this);\r\n        }\r\n\r\n        public visitCompare(expr: SQCompareExpr): SQConstantExpr {\r\n            if (expr.comparison === QueryComparisonKind.Equal) {\r\n                if (expr.right instanceof SQConstantExpr)\r\n                    return <SQConstantExpr>expr.right;\r\n                if (expr.left instanceof SQConstantExpr)\r\n                    return <SQConstantExpr>expr.left;\r\n            }\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    import ArrayExtensions = jsCommon.ArrayExtensions;\r\n\r\n    /** Recognizes DataViewScopeIdentity expression trees to extract comparison keys. */\r\n    export module ScopeIdentityExtractor {\r\n        export function getKeys(expr: SQExpr): SQExpr[] {\r\n            let extractor = new ScopeIdExtractorImpl();\r\n            expr.accept(extractor);\r\n\r\n            if (extractor.malformed)\r\n                return null;\r\n\r\n            return ArrayExtensions.emptyToNull(extractor.keys);\r\n        }\r\n\r\n        export function getInExpr(expr: SQExpr): SQInExpr{\r\n            let extractor = new ScopeIdExtractorImpl();\r\n            expr.accept(extractor);\r\n\r\n            if (extractor.malformed)\r\n                return;\r\n            \r\n            let keys = ArrayExtensions.emptyToNull(extractor.keys);\r\n            let keyValues = ArrayExtensions.emptyToNull(extractor.values);\r\n\r\n            if (keys && keyValues)\r\n                return data.SQExprBuilder.inExpr(keys, [keyValues]);\r\n        }\r\n\r\n        /**\r\n         * Recognizes expressions of the form:\r\n         * 1) Equals(ColRef, Constant)\r\n         * 2) And(Equals(ColRef1, Constant1), Equals(ColRef2, Constant2))\r\n         * or And(And(Equals(ColRef1, Constant1), Equals(ColRef2, Constant2)), Equals(ColRef3, Constant3)) etc..\r\n         */\r\n        class ScopeIdExtractorImpl extends DefaultSQExprVisitor<void> {\r\n            public keys: SQExpr[] = [];\r\n            public values: SQConstantExpr[] = [];\r\n            public malformed: boolean;\r\n\r\n            public visitAnd(expr: SQAndExpr): void {\r\n                expr.left.accept(this);\r\n                expr.right.accept(this);\r\n            }\r\n\r\n            public visitCompare(expr: SQCompareExpr): void {\r\n                if (expr.comparison !== QueryComparisonKind.Equal) {\r\n                    this.visitDefault(expr);\r\n                    return;\r\n                }\r\n                debug.assert(expr.left instanceof SQExpr && expr.right instanceof SQConstantExpr, 'invalid compare expr operands');\r\n                expr.left.accept(this);\r\n                expr.right.accept(this);\r\n            }\r\n\r\n            public visitColumnRef(expr: SQColumnRefExpr): void {\r\n                this.keys.push(expr);\r\n            }\r\n\r\n            public visitHierarchyLevel(expr: SQHierarchyLevelExpr): void {\r\n                this.keys.push(expr);\r\n            }\r\n\r\n            public visitConstant(expr: SQConstantExpr): void {\r\n                this.values.push(expr);\r\n            }\r\n\r\n            public visitArithmetic(expr: SQArithmeticExpr): void {\r\n                this.keys.push(expr);\r\n            }\r\n\r\n            public visitDefault(expr: SQExpr): void {\r\n                this.malformed = true;\r\n            }\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    export module PrimitiveValueEncoding {\r\n        const SingleQuoteRegex = /'/g;\r\n\r\n        export function decimal(value: number): string {\r\n            debug.assertValue(value, 'value');\r\n\r\n            return value + 'M';\r\n        }\r\n\r\n        export function double(value: number): string {\r\n            debug.assertValue(value, 'value');\r\n\r\n            return value + 'D';\r\n        }\r\n\r\n        export function integer(value: number): string {\r\n            debug.assertValue(value, 'value');\r\n\r\n            return value + 'L';\r\n        }\r\n\r\n        export function dateTime(value: Date): string {\r\n            debug.assertValue(value, 'value');\r\n\r\n            // Currently, server doesn't support timezone. All date time data on the server don't have time zone information.\r\n            // So, when we construct a dateTime object on the client, we will need to ignor user's time zone and force it to be UTC time.\r\n            // When we subtract the timeZone offset, the date time object will remain the same value as you entered but dropped the local timeZone.\r\n            let date = new Date(value.getTime() - (value.getTimezoneOffset() * 60000));\r\n            let dateTimeString = date.toISOString();\r\n\r\n            // If it ends with Z, we want to get rid of it, because with trailing Z, it will assume the dateTime is UTC, but we don't want any timeZone information, so\r\n            // we will drop it.\r\n            // Also, we need to add Prefix and Suffix to match the dsr value format for dateTime object.\r\n            if (jsCommon.StringExtensions.endsWith(dateTimeString, 'Z'))\r\n                dateTimeString = dateTimeString.substr(0, dateTimeString.length - 1);\r\n            return \"datetime'\" + dateTimeString + \"'\";\r\n        }\r\n\r\n        export function text(value: string): string {\r\n            debug.assertValue(value, 'value');\r\n\r\n            return \"'\" + value.replace(SingleQuoteRegex, \"''\") + \"'\";\r\n        }\r\n\r\n        export function nullEncoding(): string {\r\n            return 'null';\r\n        }\r\n\r\n        export function boolean(value: boolean): string {\r\n            return value ? 'true' : 'false';\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n\r\n    export module SQHierarchyExprUtils {\r\n        export function getConceptualHierarchyLevelFromExpr(\r\n            conceptualSchema: FederatedConceptualSchema,\r\n            fieldExpr: FieldExprPattern): ConceptualHierarchyLevel {\r\n            let fieldExprItem = FieldExprPattern.toFieldExprEntityItemPattern(fieldExpr);\r\n            let hierarchyLevel = fieldExpr.hierarchyLevel || fieldExpr.hierarchyLevelAggr;\r\n            if (hierarchyLevel)\r\n                return SQHierarchyExprUtils.getConceptualHierarchyLevel(\r\n                    conceptualSchema,\r\n                    fieldExprItem.schema,\r\n                    fieldExprItem.entity,\r\n                    hierarchyLevel.name,\r\n                    hierarchyLevel.level);\r\n        }\r\n\r\n        export function getConceptualHierarchyLevel(\r\n            conceptualSchema: FederatedConceptualSchema,\r\n            schemaName: string,\r\n            entity: string,\r\n            hierarchy: string,\r\n            hierarchyLevel: string): ConceptualHierarchyLevel {\r\n\r\n            let schema = conceptualSchema.schema(schemaName);\r\n            let conceptualHierarchy = schema.findHierarchy(entity, hierarchy);\r\n            if (conceptualHierarchy) {\r\n                return conceptualHierarchy.levels.withName(hierarchyLevel);\r\n            }\r\n        }\r\n\r\n        export function getConceptualHierarchy(sqExpr: SQExpr, federatedSchema: FederatedConceptualSchema): ConceptualHierarchy {\r\n            if (sqExpr instanceof SQHierarchyExpr) {\r\n                let hierarchy = <SQHierarchyExpr>sqExpr;\r\n\r\n                if (sqExpr.arg instanceof SQEntityExpr) {\r\n                    let entityExpr = <SQEntityExpr>sqExpr.arg;\r\n                    return federatedSchema\r\n                        .schema(entityExpr.schema)\r\n                        .findHierarchy(entityExpr.entity, hierarchy.hierarchy);\r\n                } else if (sqExpr.arg instanceof SQPropertyVariationSourceExpr) {\r\n                    let variationExpr = <SQPropertyVariationSourceExpr>sqExpr.arg;\r\n                    let sourceEntityExpr = <SQEntityExpr>variationExpr.arg;\r\n                    return federatedSchema\r\n                        .schema(sourceEntityExpr.schema)\r\n                        .findHierarchyByVariation(sourceEntityExpr.entity, variationExpr.property, variationExpr.name, hierarchy.hierarchy);\r\n                }\r\n            }\r\n        }\r\n\r\n        export function expandExpr(schema: FederatedConceptualSchema, expr: SQExpr, suppressHierarchyLevelExpansion?: boolean): SQExpr | SQExpr[] {\r\n            return SQExprHierarchyToHierarchyLevelConverter.convert(expr, schema) ||\r\n                SQExprVariationConverter.expand(expr, schema) ||\r\n                // If we are calling expandExpr from suppressHierarchyLevelExpansion, we should not expand the hierarchylevels\r\n                (!suppressHierarchyLevelExpansion && SQExprHierarchyLevelConverter.expand(expr, schema)) ||\r\n                expr;\r\n        }\r\n\r\n        export function isHierarchyOrVariation(schema: FederatedConceptualSchema, expr: SQExpr): boolean {\r\n            if (expr instanceof SQHierarchyExpr || expr instanceof SQHierarchyLevelExpr)\r\n                return true;\r\n\r\n            let conceptualProperty = expr.getConceptualProperty(schema);\r\n            if (conceptualProperty) {\r\n                let column = conceptualProperty.column;\r\n                if (column && column.variations && column.variations.length > 0)\r\n                    return true;\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        // Return column reference expression for hierarchy level expression.\r\n        export function getSourceVariationExpr(hierarchyLevelExpr: data.SQHierarchyLevelExpr): SQColumnRefExpr {\r\n            let fieldExprPattern: data.FieldExprPattern = data.SQExprConverter.asFieldPattern(hierarchyLevelExpr);\r\n            if (fieldExprPattern.columnHierarchyLevelVariation) {\r\n                let entity: data.SQExpr = SQExprBuilder.entity(fieldExprPattern.columnHierarchyLevelVariation.source.schema, fieldExprPattern.columnHierarchyLevelVariation.source.entity);\r\n\r\n                return SQExprBuilder.columnRef(entity, fieldExprPattern.columnHierarchyLevelVariation.source.name);\r\n            }\r\n        }\r\n\r\n        // Return hierarchy expression for hierarchy level expression.\r\n        export function getSourceHierarchy(hierarchyLevelExpr: data.SQHierarchyLevelExpr): SQHierarchyExpr {\r\n            let fieldExprPattern: data.FieldExprPattern = data.SQExprConverter.asFieldPattern(hierarchyLevelExpr);\r\n            let hierarchyLevel = fieldExprPattern.hierarchyLevel;\r\n            if (hierarchyLevel) {\r\n                let entity: data.SQExpr = SQExprBuilder.entity(hierarchyLevel.schema, hierarchyLevel.entity, hierarchyLevel.entityVar);\r\n                return SQExprBuilder.hierarchy(entity, hierarchyLevel.name);\r\n            }\r\n        }\r\n\r\n        export function getHierarchySourceAsVariationSource(hierarchyLevelExpr: SQHierarchyLevelExpr): SQPropertyVariationSourceExpr {\r\n\r\n            // Make sure the hierarchy level source is a hierarchy\r\n            if (!(hierarchyLevelExpr.arg instanceof SQHierarchyExpr))\r\n                return;\r\n                        \r\n            // Check if the hierarchy source if a variation\r\n            let hierarchyRef = <SQHierarchyExpr>hierarchyLevelExpr.arg;\r\n            if (hierarchyRef.arg instanceof SQPropertyVariationSourceExpr)\r\n                return <SQPropertyVariationSourceExpr>hierarchyRef.arg;\r\n        }\r\n\r\n        /**\r\n        * Returns true if firstExpr and secondExpr are levels in the same hierarchy and firstExpr is before secondExpr in allLevels.\r\n        */\r\n        export function areHierarchyLevelsOrdered(allLevels: SQHierarchyLevelExpr[], firstExpr: SQExpr, secondExpr: SQExpr): boolean {\r\n\r\n            // Validate that both items hierarchy levels\r\n            if (!(firstExpr instanceof SQHierarchyLevelExpr) || !(secondExpr instanceof SQHierarchyLevelExpr))\r\n                return false;\r\n\r\n            let firstLevel = <SQHierarchyLevelExpr>firstExpr;\r\n            let secondLevel = <SQHierarchyLevelExpr>secondExpr;\r\n\r\n            // Validate that both items belong to the same hierarchy\r\n            if (!SQExpr.equals(firstLevel.arg, secondLevel.arg))\r\n                return false;\r\n\r\n            // Determine the order\r\n            let firstIndex = SQExprUtils.indexOfExpr(allLevels, firstLevel);\r\n            let secondIndex = SQExprUtils.indexOfExpr(allLevels, secondLevel);\r\n\r\n            return firstIndex !== -1 && secondIndex !== -1 && firstIndex < secondIndex;\r\n        }\r\n\r\n        /**\r\n         * Given an ordered set of levels and an ordered subset of those levels, returns the index where\r\n         * expr should be inserted into the subset to maintain the correct order.\r\n         */\r\n        export function getInsertionIndex(allLevels: SQHierarchyLevelExpr[], orderedSubsetOfLevels: SQHierarchyLevelExpr[], expr: SQHierarchyLevelExpr): number {\r\n\r\n            let insertIndex = 0;\r\n\r\n            // Loop through the supplied levels until the insertion would no longer be in the correct order\r\n            while (insertIndex < orderedSubsetOfLevels.length &&\r\n                areHierarchyLevelsOrdered(allLevels, orderedSubsetOfLevels[insertIndex], expr)) {\r\n                insertIndex++;\r\n            }\r\n\r\n            return insertIndex;\r\n        }\r\n    }\r\n\r\n    export module SQExprHierarchyToHierarchyLevelConverter {\r\n        export function convert(sqExpr: SQExpr, federatedSchema: FederatedConceptualSchema): SQExpr[] {\r\n            debug.assertValue(sqExpr, 'sqExpr');\r\n            debug.assertValue(federatedSchema, 'federatedSchema');\r\n\r\n            if (sqExpr instanceof SQHierarchyExpr) {\r\n                let hierarchyExpr = <SQHierarchyExpr>sqExpr;\r\n\r\n                let conceptualHierarchy = SQHierarchyExprUtils.getConceptualHierarchy(hierarchyExpr, federatedSchema);\r\n                if (conceptualHierarchy)\r\n                    return _.map(conceptualHierarchy.levels, hierarchyLevel => SQExprBuilder.hierarchyLevel(sqExpr, hierarchyLevel.name));\r\n            }\r\n        }\r\n    }\r\n\r\n    module SQExprHierarchyLevelConverter {\r\n        export function expand(expr: SQExpr, schema: FederatedConceptualSchema): SQExpr[] {\r\n            debug.assertValue(expr, 'sqExpr');\r\n            debug.assertValue(schema, 'federatedSchema');\r\n            let exprs: SQExpr[] = [];\r\n\r\n            if (expr instanceof SQHierarchyLevelExpr) {\r\n                let fieldExpr = SQExprConverter.asFieldPattern(expr);\r\n                if (fieldExpr.hierarchyLevel) {\r\n                    let fieldExprItem = FieldExprPattern.toFieldExprEntityItemPattern(fieldExpr);\r\n                    let hierarchy = schema\r\n                        .schema(fieldExprItem.schema)\r\n                        .findHierarchy(fieldExprItem.entity, fieldExpr.hierarchyLevel.name);\r\n\r\n                    if (hierarchy) {\r\n                        let hierarchyLevels = hierarchy.levels;\r\n                        for (let hierarchyLevel of hierarchyLevels) {\r\n                            if (hierarchyLevel.name === fieldExpr.hierarchyLevel.level) {\r\n                                exprs.push(expr);\r\n                                break;\r\n                            }\r\n                            else\r\n                                exprs.push(\r\n                                    SQExprBuilder.hierarchyLevel(\r\n                                        SQExprBuilder.hierarchy(\r\n                                            SQExprBuilder.entity(fieldExprItem.schema, fieldExprItem.entity, fieldExprItem.entityVar),\r\n                                            hierarchy.name),\r\n                                        hierarchyLevel.name)\r\n                                );\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (!_.isEmpty(exprs))\r\n                return exprs;\r\n        }\r\n    }\r\n\r\n    module SQExprVariationConverter {\r\n        export function expand(expr: SQExpr, schema: FederatedConceptualSchema): SQExpr[] {\r\n            debug.assertValue(expr, 'sqExpr');\r\n            debug.assertValue(schema, 'federatedSchema');\r\n\r\n            let exprs: SQExpr[];\r\n            let conceptualProperty = expr.getConceptualProperty(schema);\r\n\r\n            if (conceptualProperty) {\r\n                let column = conceptualProperty.column;\r\n                if (column && column.variations && column.variations.length > 0) {\r\n                    let variations = column.variations;\r\n\r\n                    // for SU11, we support only one variation\r\n                    debug.assert(variations.length === 1, \"variations.length\");\r\n                    let variation = variations[0];\r\n\r\n                    let fieldExpr = SQExprConverter.asFieldPattern(expr);\r\n                    let fieldExprItem = FieldExprPattern.toFieldExprEntityItemPattern(fieldExpr);\r\n\r\n                    exprs = [];\r\n                    if (variation.defaultHierarchy) {\r\n                        let hierarchyExpr = SQExprBuilder.hierarchy(\r\n                            SQExprBuilder.propertyVariationSource(\r\n                                SQExprBuilder.entity(fieldExprItem.schema, fieldExprItem.entity, fieldExprItem.entityVar),\r\n                                variation.name, conceptualProperty.name),\r\n                            variation.defaultHierarchy.name);\r\n\r\n                        for (let level of variation.defaultHierarchy.levels)\r\n                            exprs.push(SQExprBuilder.hierarchyLevel(hierarchyExpr, level.name));\r\n                    }\r\n                }\r\n            }\r\n\r\n            return exprs;\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    // A group can consist of either a single expression, or a collection of hierarchy expressions\r\n    export interface SQExprGroup {\r\n        expr: SQExpr;\r\n        children: SQHierarchyLevelExpr[];\r\n\r\n        /** Index of expression in the query. */\r\n        selectQueryIndex: number;\r\n    };\r\n\r\n    export module SQExprGroupUtils {\r\n        /** Group all projections. Eacch group can consist of either a single property, or a collection of hierarchy items. */\r\n        export function groupExprs(schema: FederatedConceptualSchema, exprs: SQExpr[]): SQExprGroup[] {\r\n            let groups: SQExprGroup[] = [];\r\n            for (let i = 0, len = exprs.length; i < len; i++) {\r\n                let expr = exprs[i];\r\n                debug.assertValue(expr, \"Expression not found\");\r\n\r\n                if (!(expr instanceof SQHierarchyLevelExpr)) {\r\n                    groups.push({ expr: expr, children: null, selectQueryIndex: i });\r\n                }\r\n                else {\r\n                    addChildToGroup(schema, groups, expr, i);\r\n                }\r\n            }\r\n\r\n            return groups;\r\n        }\r\n\r\n        function addChildToGroup(\r\n            schema: FederatedConceptualSchema,\r\n            groups: SQExprGroup[],\r\n            expr: SQHierarchyLevelExpr,\r\n            selectQueryIndex: number): void {\r\n\r\n            // shouldAddExpressionToNewGroup is used to control whether we should add the passed expr to \r\n            // a new Group or to the last Group\r\n            let shouldAddExpressionToNewGroup = true;\r\n            let exprSource = SQHierarchyExprUtils.getSourceVariationExpr(expr) || SQHierarchyExprUtils.getSourceHierarchy(expr);\r\n            let lastGroup = _.last(groups);\r\n\r\n            // The relevant group is always the last added. If it has the same source hierarchy,\r\n            // and is properly ordered within that hierarchy, we will need to add to this group.\r\n            if (lastGroup && lastGroup.children && SQExpr.equals(lastGroup.expr, exprSource)) {\r\n                let expandedExpr = SQHierarchyExprUtils.expandExpr(schema, expr.arg);\r\n                if (expandedExpr instanceof Array) {\r\n                    let allHierarchyLevels = <SQHierarchyLevelExpr[]>expandedExpr;\r\n                    shouldAddExpressionToNewGroup = !SQHierarchyExprUtils.areHierarchyLevelsOrdered(allHierarchyLevels, _.last(lastGroup.children), expr);\r\n                }\r\n            }\r\n\r\n            if (shouldAddExpressionToNewGroup)\r\n                // Use the Sourcevariation as the expression for the group.\r\n                groups.push({ expr: exprSource, children: [expr], selectQueryIndex: selectQueryIndex });\r\n            else {\r\n                debug.assertValue(lastGroup, 'There should be a group to add the variation to');\r\n                debug.assertValue(lastGroup.children, 'The group should have children to add the variation to');\r\n                lastGroup.children.push(expr);\r\n            }\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    import StringExtensions = jsCommon.StringExtensions;\r\n\r\n    /** Represents an immutable expression within a SemanticQuery. */\r\n    export abstract class SQExpr implements ISQExpr {\r\n        private _kind: SQExprKind;\r\n\r\n        constructor(kind: SQExprKind) {\r\n            debug.assertValue(kind, 'kind');\r\n\r\n            this._kind = kind;\r\n        }\r\n\r\n        public static equals(x: SQExpr, y: SQExpr, ignoreCase?: boolean): boolean {\r\n            return SQExprEqualityVisitor.run(x, y, ignoreCase);\r\n        }\r\n      \r\n        public validate(schema: FederatedConceptualSchema, errors?: SQExprValidationError[]): SQExprValidationError[] {\r\n            let validator = new SQExprValidationVisitor(schema, errors);\r\n            this.accept(validator);\r\n            return validator.errors;\r\n        }\r\n\r\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\r\n            debug.assertFail('abstract method');\r\n            return;\r\n        }\r\n\r\n        public get kind(): SQExprKind {\r\n            return this._kind;\r\n        }\r\n\r\n        public static isColumn(expr: SQExpr): expr is SQColumnRefExpr {\r\n            debug.assertValue(expr, 'expr');\r\n\r\n            return expr.kind === SQExprKind.ColumnRef;\r\n        }\r\n\r\n        public static isConstant(expr: SQExpr): expr is SQConstantExpr {\r\n            debug.assertValue(expr, 'expr');\r\n\r\n            return expr.kind === SQExprKind.Constant;\r\n        }\r\n\r\n        public static isEntity(expr: SQExpr): expr is SQEntityExpr {\r\n            debug.assertValue(expr, 'expr');\r\n\r\n            return expr.kind === SQExprKind.Entity;\r\n        }\r\n\r\n        public static isHierarchy(expr: SQExpr): expr is SQHierarchyExpr {\r\n            debug.assertValue(expr, 'expr');\r\n\r\n            return expr.kind === SQExprKind.Hierarchy;\r\n        }\r\n\r\n        public static isHierarchyLevel(expr: SQExpr): expr is SQHierarchyLevelExpr {\r\n            debug.assertValue(expr, 'expr');\r\n\r\n            return expr.kind === SQExprKind.HierarchyLevel;\r\n        }\r\n\r\n        public getMetadata(federatedSchema: FederatedConceptualSchema): SQExprMetadata {\r\n            debug.assertValue(federatedSchema, 'federatedSchema');\r\n\r\n            let field = SQExprConverter.asFieldPattern(this);\r\n            if (!field)\r\n                return;\r\n\r\n            if (field.column || field.columnAggr || field.measure)\r\n                return this.getMetadataForProperty(field, federatedSchema);\r\n\r\n            if (field.hierarchyLevel || field.hierarchyLevelAggr)\r\n                return this.getMetadataForHierarchyLevel(field, federatedSchema);\r\n\r\n            if (field.columnHierarchyLevelVariation)\r\n                return this.getMetadataForVariation(field, federatedSchema);\r\n\r\n            return SQExpr.getMetadataForEntity(field, federatedSchema);\r\n        }\r\n\r\n        public getDefaultAggregate(federatedSchema: FederatedConceptualSchema, forceAggregation: boolean = false): QueryAggregateFunction {\r\n            debug.assertValue(federatedSchema, 'federatedSchema');\r\n\r\n            let property = this.getConceptualProperty(federatedSchema) || this.getHierarchyLevelConceptualProperty(federatedSchema);\r\n            if (!property)\r\n                return;\r\n\r\n            let aggregate: QueryAggregateFunction;\r\n\r\n            if (property && property.kind === ConceptualPropertyKind.Column) {\r\n                let propertyDefaultAggregate = property.column ? property.column.defaultAggregate : null;\r\n\r\n                if ((property.type.integer || property.type.numeric) &&\r\n                    propertyDefaultAggregate !== ConceptualDefaultAggregate.None) {\r\n                    aggregate = defaultAggregateToQueryAggregateFunction(propertyDefaultAggregate);\r\n                    if (aggregate === undefined)\r\n                        aggregate = defaultAggregateForDataType(property.type);\r\n                }\r\n\r\n                // If we haven't found an appropriate aggregate, and want to force aggregation anyway, \r\n                // aggregate on CountNonNull.\r\n                if (aggregate === undefined && forceAggregation) {\r\n                    aggregate = QueryAggregateFunction.CountNonNull;\r\n                }\r\n            }\r\n\r\n            return aggregate;\r\n        }\r\n\r\n        /** Return the SQExpr[] of group on columns if it has group on keys otherwise return the SQExpr of the column.*/\r\n        public getKeyColumns(schema: FederatedConceptualSchema): SQExpr[] {\r\n            let columnRefExpr = SQExprColumnRefInfoVisitor.getColumnRefSQExpr(schema, this);\r\n            if (!columnRefExpr)\r\n                return;\r\n\r\n            let keySQExprs: SQExpr[] = [];\r\n            let keys = this.getPropertyKeys(schema);\r\n            if (keys && keys.length > 0) {\r\n                for (let i = 0, len = keys.length; i < len; i++) {\r\n                    keySQExprs.push(SQExprBuilder.columnRef(columnRefExpr.source, keys[i].name));\r\n                }\r\n            }\r\n            else\r\n                keySQExprs.push(columnRefExpr);\r\n\r\n            return keySQExprs;\r\n        }\r\n\r\n        /** Returns a value indicating whether the expression would group on keys other than itself.*/\r\n        public hasGroupOnKeys(schema: FederatedConceptualSchema): boolean {\r\n            let columnRefExpr = SQExprColumnRefInfoVisitor.getColumnRefSQExpr(schema, this);\r\n            if (!columnRefExpr)\r\n                return;\r\n            let keys = this.getPropertyKeys(schema);\r\n\r\n            if (!keys || keys.length < 1)\r\n                return false;\r\n\r\n            if (keys.length > 1)\r\n                return true;\r\n\r\n            let keySqExpr = SQExprBuilder.columnRef(columnRefExpr.source, keys[0].name);\r\n            return !SQExpr.equals(keySqExpr, this);\r\n        }\r\n\r\n        private getPropertyKeys(schema: FederatedConceptualSchema): jsCommon.ArrayNamedItems<ConceptualProperty> {\r\n            let property = this.getConceptualProperty(schema) || this.getHierarchyLevelConceptualProperty(schema);\r\n            if (!property)\r\n                return;\r\n\r\n            return property.column ? property.column.keys : undefined;\r\n        }\r\n\r\n        public getConceptualProperty(federatedSchema: FederatedConceptualSchema): ConceptualProperty {\r\n            let field = SQExprConverter.asFieldPattern(this);\r\n            if (!field)\r\n                return;\r\n\r\n            let fieldExprItem = FieldExprPattern.toFieldExprEntityItemPattern(field);\r\n            let propertyName = FieldExprPattern.getPropertyName(field);\r\n\r\n            if (propertyName)\r\n                return federatedSchema\r\n                    .schema(fieldExprItem.schema)\r\n                    .findProperty(fieldExprItem.entity, propertyName);\r\n        }\r\n\r\n        public getTargetEntityForVariation(federatedSchema: FederatedConceptualSchema, variationName: string): string {\r\n            let property = this.getConceptualProperty(federatedSchema);\r\n            if (property && property.column && !_.isEmpty(property.column.variations)) {\r\n                let variations = property.column.variations;\r\n                for (let variation of variations)\r\n                    if (variation.name === variationName)\r\n                        return variation.navigationProperty.targetEntity.name;\r\n            }\r\n        }\r\n\r\n        private getHierarchyLevelConceptualProperty(federatedSchema: FederatedConceptualSchema): ConceptualProperty {\r\n            let field = SQExprConverter.asFieldPattern(this);\r\n            if (!field)\r\n                return;\r\n\r\n            let fieldExprHierachyLevel = field.hierarchyLevel || field.hierarchyLevelAggr;\r\n            if (fieldExprHierachyLevel) {\r\n                let fieldExprEntity = FieldExprPattern.toFieldExprEntityItemPattern(field);\r\n\r\n                let hierarchy = federatedSchema\r\n                    .schema(fieldExprEntity.schema)\r\n                    .findHierarchy(fieldExprEntity.entity, fieldExprHierachyLevel.name);\r\n\r\n                if (hierarchy) {\r\n                    let hierarchyLevel = hierarchy.levels.withName(fieldExprHierachyLevel.level);\r\n                    if (hierarchyLevel)\r\n                        return hierarchyLevel.column;\r\n                }\r\n            }\r\n        }\r\n\r\n        private getMetadataForVariation(field: data.FieldExprPattern, federatedSchema: FederatedConceptualSchema): SQExprMetadata {\r\n            debug.assertValue(field, 'field');\r\n            debug.assertValue(federatedSchema, 'federatedSchema');\r\n\r\n            let columnHierarchyLevelVariation = field.columnHierarchyLevelVariation;\r\n            let fieldExprItem = FieldExprPattern.toFieldExprEntityItemPattern(field);\r\n            let sourceProperty = federatedSchema\r\n                .schema(fieldExprItem.schema)\r\n                .findProperty(fieldExprItem.entity, columnHierarchyLevelVariation.source.name);\r\n\r\n            if (sourceProperty && sourceProperty.column && sourceProperty.column.variations) {\r\n                for (let variation of sourceProperty.column.variations) {\r\n                    if (variation.defaultHierarchy && variation.defaultHierarchy.levels) {\r\n                        for (let level of variation.defaultHierarchy.levels) {\r\n                            if (level.name === columnHierarchyLevelVariation.level.level) {\r\n                                let property = level.column;\r\n                                return {\r\n                                    kind: (property.kind === ConceptualPropertyKind.Measure) ? FieldKind.Measure : FieldKind.Column,\r\n                                    type: property.type,\r\n                                    format: property.format,\r\n                                    idOnEntityKey: property.column ? property.column.idOnEntityKey : false,\r\n                                    defaultAggregate: property.column ? property.column.defaultAggregate : null\r\n                                };\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        private getMetadataForHierarchyLevel(field: FieldExprPattern, federatedSchema: FederatedConceptualSchema): SQExprMetadata {\r\n            debug.assertValue(field, 'field');\r\n            debug.assertValue(federatedSchema, 'federatedSchema');\r\n\r\n            let property = this.getHierarchyLevelConceptualProperty(federatedSchema);\r\n            if (!property)\r\n                return;\r\n\r\n            return this.getPropertyMetadata(field, property);\r\n        }\r\n\r\n        private getPropertyMetadata(field: FieldExprPattern, property: ConceptualProperty): SQExprMetadata {\r\n            let format = property.format;\r\n            let type = property.type;\r\n            let columnAggregate = field.columnAggr || field.hierarchyLevelAggr;\r\n\r\n            if (columnAggregate) {\r\n                switch (columnAggregate.aggregate) {\r\n                    case QueryAggregateFunction.Count:\r\n                    case QueryAggregateFunction.CountNonNull:\r\n                        type = ValueType.fromExtendedType(ExtendedType.Integer);\r\n                        format = undefined;\r\n                        break;\r\n                    case QueryAggregateFunction.Avg:\r\n                        if (type.integer)\r\n                            type = ValueType.fromExtendedType(ExtendedType.Double);\r\n                        break;\r\n                }\r\n            }\r\n\r\n            return {\r\n                kind: (property.kind === ConceptualPropertyKind.Measure || (columnAggregate && columnAggregate.aggregate !== undefined)) ? FieldKind.Measure : FieldKind.Column,\r\n                type: type,\r\n                format: format,\r\n                idOnEntityKey: property.column ? property.column.idOnEntityKey : false,\r\n                aggregate: columnAggregate ? columnAggregate.aggregate : undefined,\r\n                defaultAggregate: property.column ? property.column.defaultAggregate : null\r\n            };\r\n        }\r\n\r\n        private getMetadataForProperty(field: FieldExprPattern, federatedSchema: FederatedConceptualSchema): SQExprMetadata {\r\n            debug.assertValue(field, 'field');\r\n            debug.assertValue(federatedSchema, 'federatedSchema');\r\n\r\n            let property = this.getConceptualProperty(federatedSchema);\r\n            if (!property)\r\n                return;\r\n\r\n            return this.getPropertyMetadata(field, property);\r\n        }\r\n\r\n        private static getMetadataForEntity(field: FieldExprPattern, federatedSchema: FederatedConceptualSchema): SQExprMetadata {\r\n            debug.assertValue(field, 'field');\r\n            debug.assertValue(federatedSchema, 'federatedSchema');\r\n\r\n            let fieldExprItem = FieldExprPattern.toFieldExprEntityItemPattern(field);\r\n            let entity = federatedSchema\r\n                .schema(fieldExprItem.schema)\r\n                .entities\r\n                .withName(fieldExprItem.entity);\r\n\r\n            if (!entity)\r\n                return;\r\n            \r\n            // We only support count and countnonnull for entity.\r\n            if (field.entityAggr) {\r\n                switch (field.entityAggr.aggregate) {\r\n                    case QueryAggregateFunction.Count:\r\n                    case QueryAggregateFunction.CountNonNull:\r\n                        return {\r\n                            kind: FieldKind.Measure,\r\n                            type: ValueType.fromExtendedType(ExtendedType.Integer),\r\n                            format: undefined,\r\n                            idOnEntityKey: false,\r\n                            aggregate: field.entityAggr.aggregate\r\n                        };\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    export const enum SQExprKind {\r\n        Entity,\r\n        ColumnRef,\r\n        MeasureRef,\r\n        Aggregation,\r\n        PropertyVariationSource,\r\n        Hierarchy,\r\n        HierarchyLevel,\r\n        And,\r\n        Between,\r\n        In,\r\n        Or,\r\n        Contains,\r\n        Compare,\r\n        StartsWith,\r\n        Exists,\r\n        Not,\r\n        Constant,\r\n        DateSpan,\r\n        DateAdd,\r\n        Now,\r\n        AnyValue,\r\n        DefaultValue,\r\n        Arithmetic,\r\n        FillRule,\r\n    }\r\n\r\n    export interface SQExprMetadata {\r\n        kind: FieldKind;\r\n        type: ValueType;\r\n        format?: string;\r\n        idOnEntityKey?: boolean;\r\n        aggregate?: QueryAggregateFunction;\r\n        defaultAggregate?: ConceptualDefaultAggregate;\r\n    }\r\n\r\n    export const enum FieldKind {\r\n        /** Indicates the field references a column, which evaluates to a distinct set of values (e.g., Year, Name, SalesQuantity, etc.). */\r\n        Column,\r\n\r\n        /** Indicates the field references a measure, which evaluates to a single value (e.g., SalesYTD, Sum(Sales), etc.). */\r\n        Measure,\r\n    }\r\n\r\n    /** Note: Exported for testability */\r\n    export function defaultAggregateForDataType(type: ValueType): QueryAggregateFunction {\r\n        if (type.integer || type.numeric)\r\n            return QueryAggregateFunction.Sum;\r\n\r\n        return QueryAggregateFunction.Count;\r\n    }\r\n\r\n    /** Note: Exported for testability */\r\n    export function defaultAggregateToQueryAggregateFunction(aggregate: ConceptualDefaultAggregate): QueryAggregateFunction {\r\n        switch (aggregate) {\r\n            case ConceptualDefaultAggregate.Average:\r\n                return QueryAggregateFunction.Avg;\r\n            case ConceptualDefaultAggregate.Count:\r\n                return QueryAggregateFunction.CountNonNull;\r\n            case ConceptualDefaultAggregate.DistinctCount:\r\n                return QueryAggregateFunction.Count;\r\n            case ConceptualDefaultAggregate.Max:\r\n                return QueryAggregateFunction.Max;\r\n            case ConceptualDefaultAggregate.Min:\r\n                return QueryAggregateFunction.Min;\r\n            case ConceptualDefaultAggregate.Sum:\r\n                return QueryAggregateFunction.Sum;\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n\r\n    export class SQEntityExpr extends SQExpr {\r\n        public schema: string;\r\n        public entity: string;\r\n        public variable: string;\r\n\r\n        constructor(schema: string, entity: string, variable?: string) {\r\n            debug.assertValue(entity, 'entity');\r\n\r\n            super(SQExprKind.Entity);\r\n            this.schema = schema;\r\n            this.entity = entity;\r\n            if (variable)\r\n                this.variable = variable;\r\n        }\r\n\r\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\r\n            return visitor.visitEntity(this, arg);\r\n        }\r\n    }\r\n\r\n    export class SQArithmeticExpr extends SQExpr {\r\n        public left: SQExpr;\r\n        public right: SQExpr;\r\n        public operator: ArithmeticOperatorKind;\r\n\r\n        constructor(left: SQExpr, right: SQExpr, operator: ArithmeticOperatorKind) {\r\n            debug.assertValue(left, 'left');\r\n            debug.assertValue(right, 'right');\r\n            debug.assertValue(operator, 'operator');\r\n\r\n            super(SQExprKind.Arithmetic);\r\n            this.left = left;\r\n            this.right = right;\r\n            this.operator = operator;\r\n        }\r\n\r\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\r\n            return visitor.visitArithmetic(this, arg);\r\n        }\r\n    }\r\n\r\n    export abstract class SQPropRefExpr extends SQExpr {\r\n        public ref: string;\r\n        public source: SQExpr;\r\n\r\n        constructor(kind: SQExprKind, source: SQExpr, ref: string) {\r\n            debug.assertValue(kind, 'kind');\r\n            debug.assertValue(source, 'source');\r\n            debug.assertValue(ref, 'ref');\r\n\r\n            super(kind);\r\n            this.source = source;\r\n            this.ref = ref;\r\n        }\r\n    }\r\n\r\n    export class SQColumnRefExpr extends SQPropRefExpr {\r\n        constructor(source: SQExpr, ref: string) {\r\n            super(SQExprKind.ColumnRef, source, ref);\r\n        }\r\n\r\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\r\n            return visitor.visitColumnRef(this, arg);\r\n        }\r\n    }\r\n\r\n    export class SQMeasureRefExpr extends SQPropRefExpr {\r\n        constructor(source: SQExpr, ref: string) {\r\n            super(SQExprKind.MeasureRef, source, ref);\r\n        }\r\n\r\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\r\n            return visitor.visitMeasureRef(this, arg);\r\n        }\r\n    }\r\n\r\n    export class SQAggregationExpr extends SQExpr {\r\n        public arg: SQExpr;\r\n        public func: QueryAggregateFunction;\r\n\r\n        constructor(arg: SQExpr, func: QueryAggregateFunction) {\r\n            debug.assertValue(arg, 'arg');\r\n            debug.assertValue(func, 'func');\r\n\r\n            super(SQExprKind.Aggregation);\r\n            this.arg = arg;\r\n            this.func = func;\r\n        }\r\n\r\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\r\n            return visitor.visitAggr(this, arg);\r\n        }\r\n    }\r\n\r\n    export class SQPropertyVariationSourceExpr extends SQExpr {\r\n        public arg: SQExpr;\r\n        public name: string;\r\n        public property: string;\r\n\r\n        constructor(arg: SQExpr, name: string, property: string) {\r\n            debug.assertValue(arg, 'arg');\r\n            debug.assertValue(name, 'name');\r\n            debug.assertValue(property, 'property');\r\n\r\n            super(SQExprKind.PropertyVariationSource);\r\n            this.arg = arg;\r\n            this.name = name;\r\n            this.property = property;\r\n        }\r\n\r\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\r\n            return visitor.visitPropertyVariationSource(this, arg);\r\n        }\r\n    }\r\n\r\n    export class SQHierarchyExpr extends SQExpr {\r\n        public arg: SQExpr;\r\n        public hierarchy: string;\r\n\r\n        constructor(arg: SQExpr, hierarchy: string) {\r\n            debug.assertValue(arg, 'arg');\r\n            debug.assertValue(hierarchy, 'hierarchy');\r\n\r\n            super(SQExprKind.Hierarchy);\r\n            this.arg = arg;\r\n            this.hierarchy = hierarchy;\r\n        }\r\n\r\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\r\n            return visitor.visitHierarchy(this, arg);\r\n        }\r\n    }\r\n\r\n    export class SQHierarchyLevelExpr extends SQExpr {\r\n        public arg: SQExpr;\r\n        public level: string;\r\n\r\n        constructor(arg: SQExpr, level: string) {\r\n            debug.assertValue(arg, 'arg');\r\n            debug.assertValue(level, 'level');\r\n\r\n            super(SQExprKind.HierarchyLevel);\r\n            this.arg = arg;\r\n            this.level = level;\r\n        }\r\n\r\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\r\n            return visitor.visitHierarchyLevel(this, arg);\r\n        }\r\n    }\r\n\r\n    export class SQAndExpr extends SQExpr {\r\n        left: SQExpr;\r\n        right: SQExpr;\r\n\r\n        constructor(left: SQExpr, right: SQExpr) {\r\n            debug.assertValue(left, 'left');\r\n            debug.assertValue(right, 'right');\r\n\r\n            super(SQExprKind.And);\r\n            this.left = left;\r\n            this.right = right;\r\n        }\r\n\r\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\r\n            return visitor.visitAnd(this, arg);\r\n        }\r\n    }\r\n\r\n    export class SQBetweenExpr extends SQExpr {\r\n        arg: SQExpr;\r\n        lower: SQExpr;\r\n        upper: SQExpr;\r\n\r\n        constructor(arg: SQExpr, lower: SQExpr, upper: SQExpr) {\r\n            debug.assertValue(arg, 'arg');\r\n            debug.assertValue(lower, 'lower');\r\n            debug.assertValue(upper, 'upper');\r\n\r\n            super(SQExprKind.Between);\r\n            this.arg = arg;\r\n            this.lower = lower;\r\n            this.upper = upper;\r\n        }\r\n\r\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\r\n            return visitor.visitBetween(this, arg);\r\n        }\r\n    }\r\n\r\n    export class SQInExpr extends SQExpr {\r\n        args: SQExpr[];\r\n        values: SQExpr[][];\r\n\r\n        constructor(args: SQExpr[], values: SQExpr[][]) {\r\n            debug.assertValue(args, 'args');\r\n            debug.assertValue(values, 'values');\r\n\r\n            super(SQExprKind.In);\r\n            this.args = args;\r\n            this.values = values;\r\n        }\r\n\r\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\r\n            return visitor.visitIn(this, arg);\r\n        }\r\n    }\r\n\r\n    export class SQOrExpr extends SQExpr {\r\n        left: SQExpr;\r\n        right: SQExpr;\r\n\r\n        constructor(left: SQExpr, right: SQExpr) {\r\n            debug.assertValue(left, 'left');\r\n            debug.assertValue(right, 'right');\r\n\r\n            super(SQExprKind.Or);\r\n            this.left = left;\r\n            this.right = right;\r\n        }\r\n\r\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\r\n            return visitor.visitOr(this, arg);\r\n        }\r\n    }\r\n\r\n    export class SQCompareExpr extends SQExpr {\r\n        comparison: QueryComparisonKind;\r\n        left: SQExpr;\r\n        right: SQExpr;\r\n\r\n        constructor(comparison: QueryComparisonKind, left: SQExpr, right: SQExpr) {\r\n            debug.assertValue(comparison, 'kind');\r\n            debug.assertValue(left, 'left');\r\n            debug.assertValue(right, 'right');\r\n\r\n            super(SQExprKind.Compare);\r\n            this.comparison = comparison;\r\n            this.left = left;\r\n            this.right = right;\r\n        }\r\n\r\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\r\n            return visitor.visitCompare(this, arg);\r\n        }\r\n    }\r\n\r\n    export class SQContainsExpr extends SQExpr {\r\n        left: SQExpr;\r\n        right: SQExpr;\r\n\r\n        constructor(left: SQExpr, right: SQExpr) {\r\n            debug.assertValue(left, 'left');\r\n            debug.assertValue(right, 'right');\r\n\r\n            super(SQExprKind.Contains);\r\n            this.left = left;\r\n            this.right = right;\r\n        }\r\n\r\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\r\n            return visitor.visitContains(this, arg);\r\n        }\r\n    }\r\n\r\n    export class SQStartsWithExpr extends SQExpr {\r\n        left: SQExpr;\r\n        right: SQExpr;\r\n\r\n        constructor(left: SQExpr, right: SQExpr) {\r\n            debug.assertValue(left, 'left');\r\n            debug.assertValue(right, 'right');\r\n\r\n            super(SQExprKind.StartsWith);\r\n            this.left = left;\r\n            this.right = right;\r\n        }\r\n\r\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\r\n            return visitor.visitStartsWith(this, arg);\r\n        }\r\n    }\r\n\r\n    export class SQExistsExpr extends SQExpr {\r\n        arg: SQExpr;\r\n\r\n        constructor(arg: SQExpr) {\r\n            debug.assertValue(arg, 'arg');\r\n\r\n            super(SQExprKind.Exists);\r\n            this.arg = arg;\r\n        }\r\n\r\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\r\n            return visitor.visitExists(this, arg);\r\n        }\r\n    }\r\n\r\n    export class SQNotExpr extends SQExpr {\r\n        arg: SQExpr;\r\n\r\n        constructor(arg: SQExpr) {\r\n            debug.assertValue(arg, 'arg');\r\n\r\n            super(SQExprKind.Not);\r\n            this.arg = arg;\r\n        }\r\n\r\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\r\n            return visitor.visitNot(this, arg);\r\n        }\r\n    }\r\n\r\n    export class SQConstantExpr extends SQExpr implements ISQConstantExpr {\r\n        public type: ValueType;\r\n\r\n        /** The native JavaScript representation of the value. */\r\n        public value: any;\r\n\r\n        /** The string encoded, lossless representation of the value. */\r\n        public valueEncoded: string;\r\n\r\n        constructor(type: ValueType, value: any, valueEncoded: string) {\r\n            debug.assertValue(type, 'type');\r\n\r\n            super(SQExprKind.Constant);\r\n            this.type = type;\r\n            this.value = value;\r\n            this.valueEncoded = valueEncoded;\r\n        }\r\n\r\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\r\n            return visitor.visitConstant(this, arg);\r\n        }\r\n\r\n        public getMetadata(federatedSchema: FederatedConceptualSchema): SQExprMetadata {\r\n            debug.assertValue(federatedSchema, 'federatedSchema');\r\n\r\n            return {\r\n                // Returning Measure as the kind for a SQConstantExpr is slightly ambiguous allowing the return object to conform to SQEXprMetadata.\r\n                // A getType or similiar function in the future would be more appropriate. \r\n                kind: FieldKind.Measure,\r\n                type: this.type,\r\n            };\r\n        }\r\n    }\r\n\r\n    export class SQDateSpanExpr extends SQExpr {\r\n        public unit: TimeUnit;\r\n        public arg: SQExpr;\r\n\r\n        constructor(unit: TimeUnit, arg: SQExpr) {\r\n            debug.assertValue(unit, 'unit');\r\n            debug.assertValue(arg, 'arg');\r\n\r\n            super(SQExprKind.DateSpan);\r\n            this.unit = unit;\r\n            this.arg = arg;\r\n        }\r\n\r\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\r\n            return visitor.visitDateSpan(this, arg);\r\n        }\r\n    }\r\n\r\n    export class SQDateAddExpr extends SQExpr {\r\n        public unit: TimeUnit;\r\n        public amount: number;\r\n        public arg: SQExpr;\r\n\r\n        constructor(unit: TimeUnit, amount: number, arg: SQExpr) {\r\n            debug.assertValue(unit, 'unit');\r\n            debug.assertValue(amount, 'amount');\r\n            debug.assertValue(arg, 'arg');\r\n\r\n            super(SQExprKind.DateAdd);\r\n            this.unit = unit;\r\n            this.arg = arg;\r\n            this.amount = amount;\r\n        }\r\n\r\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\r\n            return visitor.visitDateAdd(this, arg);\r\n        }\r\n    }\r\n\r\n    export class SQNowExpr extends SQExpr {\r\n        constructor() {\r\n            super(SQExprKind.Now);\r\n        }\r\n\r\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\r\n            return visitor.visitNow(this, arg);\r\n        }\r\n    }\r\n\r\n    export class SQDefaultValueExpr extends SQExpr {\r\n        constructor() {\r\n            super(SQExprKind.DefaultValue);\r\n        }\r\n\r\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\r\n            return visitor.visitDefaultValue(this, arg);\r\n        }\r\n    }\r\n\r\n    export class SQAnyValueExpr extends SQExpr {\r\n        constructor() {\r\n            super(SQExprKind.AnyValue);\r\n        }\r\n\r\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\r\n            return visitor.visitAnyValue(this, arg);\r\n        }\r\n    }\r\n\r\n    export class SQFillRuleExpr extends SQExpr {\r\n        public input: SQExpr;\r\n        public rule: FillRuleDefinition;\r\n\r\n        constructor(\r\n            input: SQExpr,\r\n            fillRule: FillRuleDefinition) {\r\n            debug.assertValue(input, 'input');\r\n            debug.assertValue(fillRule, 'fillRule');\r\n\r\n            super(SQExprKind.FillRule);\r\n            this.input = input;\r\n            this.rule = fillRule;\r\n        }\r\n\r\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\r\n            return visitor.visitFillRule(this, arg);\r\n        }\r\n    }\r\n\r\n    /** Provides utilities for creating & manipulating expressions. */\r\n    export module SQExprBuilder {\r\n        export function entity(schema: string, entity: string, variable?: string): SQEntityExpr {\r\n            return new SQEntityExpr(schema, entity, variable);\r\n        }\r\n\r\n        export function columnRef(source: SQExpr, prop: string): SQColumnRefExpr {\r\n            return new SQColumnRefExpr(source, prop);\r\n        }\r\n\r\n        export function measureRef(source: SQExpr, prop: string): SQMeasureRefExpr {\r\n            return new SQMeasureRefExpr(source, prop);\r\n        }\r\n\r\n        export function aggregate(source: SQExpr, aggregate: QueryAggregateFunction): SQAggregationExpr {\r\n            return new SQAggregationExpr(source, aggregate);\r\n        }\r\n\r\n        export function hierarchy(source: SQExpr, hierarchy: string): SQHierarchyExpr {\r\n            return new SQHierarchyExpr(source, hierarchy);\r\n        }\r\n\r\n        export function propertyVariationSource(source: SQExpr, name: string, property: string): SQPropertyVariationSourceExpr {\r\n            return new SQPropertyVariationSourceExpr(source, name, property);\r\n        }\r\n\r\n        export function hierarchyLevel(source: SQExpr, level: string): SQHierarchyLevelExpr {\r\n            return new SQHierarchyLevelExpr(source, level);\r\n        }\r\n\r\n        export function and(left: SQExpr, right: SQExpr): SQExpr {\r\n            if (!left)\r\n                return right;\r\n            if (!right)\r\n                return left;\r\n\r\n            return new SQAndExpr(left, right);\r\n        }\r\n\r\n        export function between(arg: SQExpr, lower: SQExpr, upper: SQExpr): SQBetweenExpr {\r\n            return new SQBetweenExpr(arg, lower, upper);\r\n        }\r\n\r\n        export function inExpr(args: SQExpr[], values: SQExpr[][]): SQInExpr {\r\n            return new SQInExpr(args, values);\r\n        }\r\n\r\n        export function or(left: SQExpr, right: SQExpr): SQExpr {\r\n            if (!left)\r\n                return right;\r\n            if (!right)\r\n                return left;\r\n            if (left instanceof SQInExpr && right instanceof SQInExpr) {\r\n                let inExpr = tryUseInExprs(<SQInExpr>left, <SQInExpr>right);\r\n                if (inExpr)\r\n                    return inExpr;\r\n            }\r\n\r\n            return new SQOrExpr(left, right);\r\n        }\r\n\r\n        function tryUseInExprs(left: SQInExpr, right: SQInExpr): SQInExpr {\r\n            if (!left.args || !right.args)\r\n                return;\r\n\r\n            let leftArgLen = left.args.length;\r\n            let rightArgLen = right.args.length;\r\n            if (leftArgLen !== rightArgLen)\r\n                return;\r\n\r\n            for (let i = 0; i < leftArgLen; ++i) {\r\n                if (!SQExpr.equals(left.args[i], right.args[i]))\r\n                    return;\r\n            }\r\n\r\n            let combinedValues = left.values.concat(right.values);\r\n            return SQExprBuilder.inExpr(left.args, combinedValues);\r\n        }\r\n\r\n        export function compare(kind: QueryComparisonKind, left: SQExpr, right: SQExpr): SQCompareExpr {\r\n            return new SQCompareExpr(kind, left, right);\r\n        }\r\n\r\n        export function contains(left: SQExpr, right: SQExpr): SQContainsExpr {\r\n            return new SQContainsExpr(left, right);\r\n        }\r\n\r\n        export function exists(arg: SQExpr): SQExistsExpr {\r\n            return new SQExistsExpr(arg);\r\n        }\r\n\r\n        export function equal(left: SQExpr, right: SQExpr): SQCompareExpr {\r\n            return compare(QueryComparisonKind.Equal, left, right);\r\n        }\r\n\r\n        export function not(arg: SQExpr): SQNotExpr {\r\n            return new SQNotExpr(arg);\r\n        }\r\n\r\n        export function startsWith(left: SQExpr, right: SQExpr): SQStartsWithExpr {\r\n            return new SQStartsWithExpr(left, right);\r\n        }\r\n\r\n        export function nullConstant(): SQConstantExpr {\r\n            return new SQConstantExpr(\r\n                ValueType.fromExtendedType(ExtendedType.Null),\r\n                null,\r\n                PrimitiveValueEncoding.nullEncoding());\r\n        }\r\n\r\n        export function now(): SQNowExpr {\r\n            return new SQNowExpr();\r\n        }\r\n\r\n        export function defaultValue(): SQDefaultValueExpr {\r\n            return new SQDefaultValueExpr();\r\n        }\r\n\r\n        export function anyValue(): SQAnyValueExpr {\r\n            return new SQAnyValueExpr();\r\n        }\r\n\r\n        export function boolean(value: boolean): SQConstantExpr {\r\n            return new SQConstantExpr(\r\n                ValueType.fromExtendedType(ExtendedType.Boolean),\r\n                value,\r\n                PrimitiveValueEncoding.boolean(value));\r\n        }\r\n\r\n        export function dateAdd(unit: TimeUnit, amount: number, arg: SQExpr): SQDateAddExpr {\r\n            return new SQDateAddExpr(unit, amount, arg);\r\n        }\r\n\r\n        export function dateTime(value: Date, valueEncoded?: string): SQConstantExpr {\r\n            if (valueEncoded === undefined)\r\n                valueEncoded = PrimitiveValueEncoding.dateTime(value);\r\n\r\n            return new SQConstantExpr(ValueType.fromExtendedType(ExtendedType.DateTime), value, valueEncoded);\r\n        }\r\n\r\n        export function dateSpan(unit: TimeUnit, arg: SQExpr): SQDateSpanExpr {\r\n            return new SQDateSpanExpr(unit, arg);\r\n        }\r\n\r\n        export function decimal(value: number, valueEncoded?: string): SQConstantExpr {\r\n            if (valueEncoded === undefined)\r\n                valueEncoded = PrimitiveValueEncoding.decimal(value);\r\n\r\n            return new SQConstantExpr(ValueType.fromExtendedType(ExtendedType.Decimal), value, valueEncoded);\r\n        }\r\n\r\n        export function double(value: number, valueEncoded?: string): SQConstantExpr {\r\n            if (valueEncoded === undefined)\r\n                valueEncoded = PrimitiveValueEncoding.double(value);\r\n\r\n            return new SQConstantExpr(ValueType.fromExtendedType(ExtendedType.Double), value, valueEncoded);\r\n        }\r\n\r\n        export function integer(value: number, valueEncoded?: string): SQConstantExpr {\r\n            if (valueEncoded === undefined)\r\n                valueEncoded = PrimitiveValueEncoding.integer(value);\r\n\r\n            return new SQConstantExpr(ValueType.fromExtendedType(ExtendedType.Integer), value, valueEncoded);\r\n        }\r\n\r\n        export function text(value: string, valueEncoded?: string): SQConstantExpr {\r\n            debug.assert(!valueEncoded || valueEncoded === PrimitiveValueEncoding.text(value), 'Incorrect encoded value specified.');\r\n\r\n            return new SQConstantExpr(\r\n                ValueType.fromExtendedType(ExtendedType.Text),\r\n                value,\r\n                valueEncoded || PrimitiveValueEncoding.text(value));\r\n        }\r\n\r\n        /** Returns an SQExpr that evaluates to the constant value. */\r\n        export function typedConstant(value: PrimitiveValue, type: ValueTypeDescriptor): SQConstantExpr {\r\n            if (value == null)\r\n                return nullConstant();\r\n\r\n            if (_.isBoolean(value)) {\r\n                return boolean(<boolean>value);\r\n            }\r\n\r\n            if (_.isString(value)) {\r\n                return text(<string>value);\r\n            }\r\n\r\n            if (_.isNumber(value)) {\r\n                if (type.integer && Double.isInteger(<number>value))\r\n                    return integer(<number>value);\r\n\r\n                return double(<number>value);\r\n            }\r\n\r\n            if (value instanceof Date) {\r\n                return dateTime(value);\r\n            }\r\n        }\r\n\r\n        export function arithmetic(left: SQExpr, right: SQExpr, operator: ArithmeticOperatorKind): SQExpr {\r\n            return new SQArithmeticExpr(left, right, operator);\r\n        }\r\n\r\n        export function setAggregate(expr: SQExpr, aggregate: QueryAggregateFunction): SQExpr {\r\n            return SQExprChangeAggregateRewriter.rewrite(expr, aggregate);\r\n        }\r\n\r\n        export function removeAggregate(expr: SQExpr): SQExpr {\r\n            return SQExprRemoveAggregateRewriter.rewrite(expr);\r\n        }\r\n\r\n        export function removeEntityVariables(expr: SQExpr): SQExpr {\r\n            return SQExprRemoveEntityVariablesRewriter.rewrite(expr);\r\n        }\r\n\r\n        export function createExprWithAggregate(\r\n            expr: SQExpr,\r\n            schema: FederatedConceptualSchema,\r\n            aggregateNonNumericFields: boolean,\r\n            preferredAggregate?: QueryAggregateFunction): SQExpr {\r\n\r\n            debug.assertValue(expr, 'expr');\r\n            debug.assertValue(expr, 'schema');\r\n\r\n            let aggregate: QueryAggregateFunction;\r\n            if (preferredAggregate != null && SQExprUtils.isSupportedAggregate(expr, schema, preferredAggregate)) {\r\n                aggregate = preferredAggregate;\r\n            }\r\n            else {\r\n                aggregate = expr.getDefaultAggregate(schema, aggregateNonNumericFields);\r\n            }\r\n            if (aggregate !== undefined)\r\n                expr = SQExprBuilder.aggregate(expr, aggregate);\r\n\r\n            return expr;\r\n        }\r\n\r\n        export function fillRule(expr: SQExpr, rule: FillRuleDefinition): SQFillRuleExpr {\r\n            debug.assertValue(expr, 'expr');\r\n            debug.assertValue(rule, 'rule');\r\n\r\n            return new SQFillRuleExpr(expr, rule);\r\n    }\r\n    }\r\n\r\n    /** Provides utilities for obtaining information about expressions. */\r\n    export module SQExprInfo {\r\n        export function getAggregate(expr: SQExpr): QueryAggregateFunction {\r\n            return SQExprAggregateInfoVisitor.getAggregate(expr);\r\n        }\r\n    }\r\n\r\n    class SQExprEqualityVisitor implements ISQExprVisitorWithArg<boolean, SQExpr>, IFillRuleDefinitionVisitor<boolean, boolean> {\r\n        private static instance: SQExprEqualityVisitor = new SQExprEqualityVisitor(/* ignoreCase */ false);\r\n        private static ignoreCaseInstance: SQExprEqualityVisitor = new SQExprEqualityVisitor(true);\r\n        private ignoreCase: boolean;\r\n\r\n        public static run(x: SQExpr, y: SQExpr, ignoreCase?: boolean): boolean {\r\n            // Normalize falsy to null\r\n            x = x || null;\r\n            y = y || null;\r\n\r\n            if (x === y)\r\n                return true;\r\n\r\n            if (!x !== !y)\r\n                return false;\r\n\r\n            debug.assertValue(x, 'x');\r\n            debug.assertValue(y, 'y');\r\n            if (ignoreCase)\r\n                return x.accept(SQExprEqualityVisitor.ignoreCaseInstance, y);\r\n\r\n            return x.accept(SQExprEqualityVisitor.instance, y);\r\n        }\r\n\r\n        constructor(ignoreCase: boolean) {\r\n            this.ignoreCase = ignoreCase;\r\n        }\r\n\r\n        public visitColumnRef(expr: SQColumnRefExpr, comparand: SQColumnRefExpr): boolean {\r\n            return comparand instanceof SQColumnRefExpr &&\r\n                expr.ref === (<SQColumnRefExpr>comparand).ref &&\r\n                this.equals(expr.source, (<SQColumnRefExpr>comparand).source);\r\n        }\r\n\r\n        public visitMeasureRef(expr: SQMeasureRefExpr, comparand: SQMeasureRefExpr): boolean {\r\n            return comparand instanceof SQMeasureRefExpr &&\r\n                expr.ref === (<SQMeasureRefExpr>comparand).ref &&\r\n                this.equals(expr.source, (<SQMeasureRefExpr>comparand).source);\r\n        }\r\n\r\n        public visitAggr(expr: SQAggregationExpr, comparand: SQExpr): boolean {\r\n            return comparand instanceof SQAggregationExpr &&\r\n                expr.func === (<SQAggregationExpr>comparand).func &&\r\n                this.equals(expr.arg, (<SQAggregationExpr>comparand).arg);\r\n        }\r\n\r\n        public visitHierarchy(expr: SQHierarchyExpr, comparand: SQHierarchyExpr): boolean {\r\n            return comparand instanceof SQHierarchyExpr &&\r\n                expr.hierarchy === comparand.hierarchy &&\r\n                this.equals(expr.arg, comparand.arg);\r\n        }\r\n\r\n        public visitHierarchyLevel(expr: SQHierarchyLevelExpr, comparand: SQHierarchyLevelExpr): boolean {\r\n            return comparand instanceof SQHierarchyLevelExpr &&\r\n                expr.level === comparand.level &&\r\n                this.equals(expr.arg, comparand.arg);\r\n        }\r\n\r\n        public visitPropertyVariationSource(expr: SQPropertyVariationSourceExpr, comparand: SQPropertyVariationSourceExpr): boolean {\r\n            return comparand instanceof SQPropertyVariationSourceExpr &&\r\n                expr.name === comparand.name &&\r\n                expr.property === comparand.property &&\r\n                this.equals(expr.arg, comparand.arg);\r\n        }\r\n\r\n        public visitBetween(expr: SQBetweenExpr, comparand: SQExpr): boolean {\r\n            return comparand instanceof SQBetweenExpr &&\r\n                this.equals(expr.arg, (<SQBetweenExpr>comparand).arg) &&\r\n                this.equals(expr.lower, (<SQBetweenExpr>comparand).lower) &&\r\n                this.equals(expr.upper, (<SQBetweenExpr>comparand).upper);\r\n        }\r\n\r\n        public visitIn(expr: SQInExpr, comparand: SQExpr): boolean {\r\n            if (!(comparand instanceof SQInExpr) || !this.equalsAll(expr.args, (<SQInExpr>comparand).args))\r\n                return false;\r\n\r\n            let values = expr.values,\r\n                compareValues = (<SQInExpr>comparand).values;\r\n            if (values.length !== compareValues.length)\r\n                return false;\r\n\r\n            for (let i = 0, len = values.length; i < len; i++) {\r\n                if (!this.equalsAll(values[i], compareValues[i]))\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        public visitEntity(expr: SQEntityExpr, comparand: SQExpr): boolean {\r\n            return comparand instanceof SQEntityExpr &&\r\n                expr.schema === (<SQEntityExpr>comparand).schema &&\r\n                expr.entity === (<SQEntityExpr>comparand).entity &&\r\n                this.optionalEqual(expr.variable, (<SQEntityExpr>comparand).variable);\r\n        }\r\n\r\n        public visitAnd(expr: SQAndExpr, comparand: SQExpr): boolean {\r\n            return comparand instanceof SQAndExpr &&\r\n                this.equals(expr.left, (<SQAndExpr>comparand).left) &&\r\n                this.equals(expr.right, (<SQAndExpr>comparand).right);\r\n        }\r\n\r\n        public visitOr(expr: SQOrExpr, comparand: SQExpr): boolean {\r\n            return comparand instanceof SQOrExpr &&\r\n                this.equals(expr.left, (<SQOrExpr>comparand).left) &&\r\n                this.equals(expr.right, (<SQOrExpr>comparand).right);\r\n        }\r\n\r\n        public visitCompare(expr: SQCompareExpr, comparand: SQExpr): boolean {\r\n            return comparand instanceof SQCompareExpr &&\r\n                expr.comparison === (<SQCompareExpr>comparand).comparison &&\r\n                this.equals(expr.left, (<SQCompareExpr>comparand).left) &&\r\n                this.equals(expr.right, (<SQCompareExpr>comparand).right);\r\n        }\r\n\r\n        public visitContains(expr: SQContainsExpr, comparand: SQExpr): boolean {\r\n            return comparand instanceof SQContainsExpr &&\r\n                this.equals(expr.left, (<SQContainsExpr>comparand).left) &&\r\n                this.equals(expr.right, (<SQContainsExpr>comparand).right);\r\n        }\r\n\r\n        public visitDateSpan(expr: SQDateSpanExpr, comparand: SQExpr): boolean {\r\n            return comparand instanceof SQDateSpanExpr &&\r\n                expr.unit === (<SQDateSpanExpr>comparand).unit &&\r\n                this.equals(expr.arg, (<SQDateSpanExpr>comparand).arg);\r\n        }\r\n\r\n        public visitDateAdd(expr: SQDateAddExpr, comparand: SQExpr): boolean {\r\n            return comparand instanceof SQDateAddExpr &&\r\n                expr.unit === (<SQDateAddExpr>comparand).unit &&\r\n                expr.amount === (<SQDateAddExpr>comparand).amount &&\r\n                this.equals(expr.arg, (<SQDateAddExpr>comparand).arg);\r\n        }\r\n\r\n        public visitExists(expr: SQExistsExpr, comparand: SQExpr): boolean {\r\n            return comparand instanceof SQExistsExpr &&\r\n                this.equals(expr.arg, (<SQExistsExpr>comparand).arg);\r\n        }\r\n\r\n        public visitNot(expr: SQNotExpr, comparand: SQExpr): boolean {\r\n            return comparand instanceof SQNotExpr &&\r\n                this.equals(expr.arg, (<SQNotExpr>comparand).arg);\r\n        }\r\n\r\n        public visitNow(expr: SQNowExpr, comparand: SQExpr): boolean {\r\n            return comparand instanceof SQNowExpr;\r\n        }\r\n\r\n        public visitDefaultValue(expr: SQDefaultValueExpr, comparand: SQExpr): boolean {\r\n            return comparand instanceof SQDefaultValueExpr;\r\n        }\r\n\r\n        public visitAnyValue(expr: SQAnyValueExpr, comparand: SQExpr): boolean {\r\n            return comparand instanceof SQAnyValueExpr;\r\n        }\r\n\r\n        public visitStartsWith(expr: SQStartsWithExpr, comparand: SQExpr): boolean {\r\n            return comparand instanceof SQStartsWithExpr &&\r\n                this.equals(expr.left, (<SQStartsWithExpr>comparand).left) &&\r\n                this.equals(expr.right, (<SQStartsWithExpr>comparand).right);\r\n        }\r\n\r\n        public visitConstant(expr: SQConstantExpr, comparand: SQExpr): boolean {\r\n            if (comparand instanceof SQConstantExpr && expr.type === (<SQConstantExpr>comparand).type)\r\n                return expr.type.text && this.ignoreCase ?\r\n                    StringExtensions.equalIgnoreCase(expr.valueEncoded, (<SQConstantExpr>comparand).valueEncoded) :\r\n                    expr.valueEncoded === (<SQConstantExpr>comparand).valueEncoded;\r\n\r\n            return false;\r\n        }\r\n\r\n        public visitFillRule(expr: SQFillRuleExpr, comparand: SQExpr): boolean {\r\n            if (comparand instanceof SQFillRuleExpr && this.equals(expr.input, comparand.input)) {\r\n                let leftRule = expr.rule,\r\n                    rightRule = comparand.rule;\r\n\r\n                if (leftRule === rightRule)\r\n                    return true;\r\n\r\n                let leftLinearGradient2 = leftRule.linearGradient2,\r\n                    rightLinearGradient2 = rightRule.linearGradient2;\r\n                if (leftLinearGradient2 && rightLinearGradient2) {\r\n                    return this.visitLinearGradient2(leftLinearGradient2, rightLinearGradient2);\r\n                }\r\n\r\n                let leftLinearGradient3 = leftRule.linearGradient3,\r\n                    rightLinearGradient3 = rightRule.linearGradient3;\r\n                if (leftLinearGradient3 && rightLinearGradient3) {\r\n                    return this.visitLinearGradient3(leftLinearGradient3, rightLinearGradient3);\r\n                }\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        public visitLinearGradient2(left2: LinearGradient2Definition, right2: LinearGradient2Definition): boolean {\r\n            debug.assertValue(left2, 'left2');\r\n            debug.assertValue(right2, 'right2');\r\n\r\n            return this.equalsFillRuleStop(left2.min, right2.min) &&\r\n                this.equalsFillRuleStop(left2.max, right2.max);\r\n        }\r\n\r\n        public visitLinearGradient3(left3: LinearGradient3Definition, right3: LinearGradient3Definition): boolean {\r\n            debug.assertValue(left3, 'left3');\r\n            debug.assertValue(right3, 'right3');\r\n\r\n            return this.equalsFillRuleStop(left3.min, right3.min) &&\r\n                this.equalsFillRuleStop(left3.mid, right3.mid) &&\r\n                this.equalsFillRuleStop(left3.max, right3.max);\r\n        }\r\n\r\n        private equalsFillRuleStop(stop1: RuleColorStopDefinition, stop2: RuleColorStopDefinition): boolean {\r\n            debug.assertValue(stop1, 'stop1');\r\n            debug.assertValue(stop2, 'stop2');\r\n\r\n            if (!this.equals(stop1.color, stop2.color))\r\n            return false;\r\n            \r\n            if (!stop1.value)\r\n                return stop1.value === stop2.value;\r\n\r\n            return this.equals(stop1.value, stop2.value);\r\n        }\r\n\r\n        public visitArithmetic(expr: SQArithmeticExpr, comparand: SQExpr): boolean {\r\n            return comparand instanceof SQArithmeticExpr &&\r\n                expr.operator === (<SQArithmeticExpr>comparand).operator &&\r\n                this.equals(expr.left, (<SQArithmeticExpr>comparand).left) &&\r\n                this.equals(expr.right, (<SQArithmeticExpr>comparand).right);\r\n        }\r\n\r\n        private optionalEqual(x: string, y: string) {\r\n            // Only check equality if both values are specified.\r\n            if (x && y)\r\n                return x === y;\r\n\r\n            return true;\r\n        }\r\n\r\n        private equals(x: SQExpr, y: SQExpr): boolean {\r\n            return x.accept(this, y);\r\n        }\r\n\r\n        private equalsAll(x: SQExpr[], y: SQExpr[]): boolean {\r\n            let len = x.length;\r\n            if (len !== y.length)\r\n                return false;\r\n\r\n            for (let i = 0; i < len; i++) {\r\n                if (!this.equals(x[i], y[i]))\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /** Rewrites a root-level expression. */\r\n    class SQExprRootRewriter extends DefaultSQExprVisitor<SQExpr> {\r\n        public visitDefault(expr: SQExpr): SQExpr {\r\n            return expr;\r\n        }\r\n    }\r\n\r\n    export const enum SQExprValidationError {\r\n        invalidAggregateFunction,\r\n        invalidSchemaReference,\r\n        invalidEntityReference,\r\n        invalidColumnReference,\r\n        invalidMeasureReference,\r\n        invalidHierarchyReference,\r\n        invalidHierarchyLevelReference,\r\n        invalidLeftOperandType,\r\n        invalidRightOperandType,\r\n        invalidValueType,\r\n    }\r\n\r\n    export class SQExprValidationVisitor extends SQExprRewriter {\r\n        public errors: SQExprValidationError[];\r\n        private schema: FederatedConceptualSchema;\r\n\r\n        constructor(schema: FederatedConceptualSchema, errors?: SQExprValidationError[]) {\r\n            debug.assertValue(schema, 'schema');\r\n\r\n            super();\r\n            this.schema = schema;\r\n            if (errors)\r\n                this.errors = errors;\r\n        }\r\n\r\n        public visitIn(expr: SQInExpr): SQExpr {\r\n            let inExpr = <SQInExpr>super.visitIn(expr);\r\n            let args = inExpr.args;\r\n            let values = inExpr.values;\r\n            for (let valueTuple of values) {\r\n                debug.assert(valueTuple.length === args.length, 'args and value tuple are not the same length');\r\n                for (let i = 0, len = valueTuple.length; i < len; ++i)\r\n                    this.validateCompatibleType(args[i], valueTuple[i]);\r\n            }\r\n\r\n            return inExpr;\r\n        }\r\n\r\n        public visitCompare(expr: SQCompareExpr): SQExpr {\r\n            let compareExpr = <SQCompareExpr>super.visitCompare(expr);\r\n            this.validateCompatibleType(compareExpr.left, compareExpr.right);\r\n\r\n            return compareExpr;\r\n        }\r\n\r\n        public visitColumnRef(expr: SQColumnRefExpr): SQExpr {\r\n            let fieldExpr = SQExprConverter.asFieldPattern(expr);\r\n            if (fieldExpr) {\r\n                let fieldExprItem = FieldExprPattern.toFieldExprEntityItemPattern(fieldExpr);\r\n                let entity = this.validateEntity(fieldExprItem.schema, fieldExprItem.entity);\r\n                if (entity) {\r\n                    let prop = entity.properties.withName(fieldExpr.column.name);\r\n                    if (!prop ||\r\n                        prop.kind !== ConceptualPropertyKind.Column ||\r\n                        !this.isQueryable(fieldExpr))\r\n                        this.register(SQExprValidationError.invalidColumnReference);\r\n                }\r\n            }\r\n            return expr;\r\n        }\r\n\r\n        public visitMeasureRef(expr: SQMeasureRefExpr): SQExpr {\r\n            let fieldExpr = SQExprConverter.asFieldPattern(expr);\r\n            if (fieldExpr) {\r\n                let fieldExprItem = FieldExprPattern.toFieldExprEntityItemPattern(fieldExpr);\r\n                let entity = this.validateEntity(fieldExprItem.schema, fieldExprItem.entity);\r\n                if (entity) {\r\n                    let prop = entity.properties.withName(fieldExpr.measure.name);\r\n                    if (!prop ||\r\n                        prop.kind !== ConceptualPropertyKind.Measure ||\r\n                        !this.isQueryable(fieldExpr))\r\n                        this.register(SQExprValidationError.invalidMeasureReference);\r\n                }\r\n            }\r\n            return expr;\r\n        }\r\n\r\n        public visitAggr(expr: SQAggregationExpr): SQExpr {\r\n            let aggregateExpr = <SQAggregationExpr>super.visitAggr(expr);\r\n\r\n            let columnRefExpr = SQExprColumnRefInfoVisitor.getColumnRefSQExpr(this.schema, aggregateExpr.arg);\r\n            if (columnRefExpr) {\r\n                if (!SQExprUtils.isSupportedAggregate(expr, this.schema, expr.func))\r\n                    this.register(SQExprValidationError.invalidAggregateFunction);\r\n            }\r\n\r\n            return aggregateExpr;\r\n        }\r\n\r\n        public visitHierarchy(expr: SQHierarchyExpr): SQExpr {\r\n            let fieldExpr = SQExprConverter.asFieldPattern(expr);\r\n            if (fieldExpr) {\r\n                let fieldExprItem: FieldExprHierarchyPattern = <FieldExprHierarchyPattern>fieldExpr.hierarchy;\r\n                if (fieldExprItem) {\r\n                    this.validateHierarchy(fieldExprItem.schema, fieldExprItem.entity, fieldExprItem.name);\r\n                } else {\r\n                    this.register(SQExprValidationError.invalidHierarchyReference);\r\n                }\r\n            }\r\n            return expr;\r\n        }\r\n\r\n        public visitHierarchyLevel(expr: SQHierarchyLevelExpr): SQExpr {\r\n            let fieldExpr = SQExprConverter.asFieldPattern(expr);\r\n            if (fieldExpr) {\r\n                let hierarchyLevelFieldExprItem: FieldExprHierarchyLevelPattern = <FieldExprHierarchyLevelPattern>fieldExpr.hierarchyLevel;\r\n                if (hierarchyLevelFieldExprItem) {\r\n                    this.validateHierarchyLevel(hierarchyLevelFieldExprItem.schema, hierarchyLevelFieldExprItem.entity, hierarchyLevelFieldExprItem.name, hierarchyLevelFieldExprItem.level);\r\n                } else if (!fieldExpr.columnHierarchyLevelVariation) {\r\n                    this.register(SQExprValidationError.invalidHierarchyLevelReference);\r\n                }\r\n            }\r\n            return expr;\r\n        }\r\n\r\n        public visitEntity(expr: SQEntityExpr): SQExpr {\r\n            this.validateEntity(expr.schema, expr.entity);\r\n            return expr;\r\n        }\r\n\r\n        public visitContains(expr: SQContainsExpr): SQExpr {\r\n            this.validateOperandsAndTypeForStartOrContains(expr.left, expr.right);\r\n            return expr;\r\n        }\r\n\r\n        public visitStartsWith(expr: SQContainsExpr): SQExpr {\r\n            this.validateOperandsAndTypeForStartOrContains(expr.left, expr.right);\r\n            return expr;\r\n        }\r\n\r\n        public visitArithmetic(expr: SQArithmeticExpr): SQExpr {\r\n            this.validateArithmeticTypes(expr.left, expr.right);\r\n            return expr;\r\n        }\r\n\r\n        private validateOperandsAndTypeForStartOrContains(left: SQExpr, right: SQExpr): void {\r\n            if (left instanceof SQColumnRefExpr) {\r\n                this.visitColumnRef(<SQColumnRefExpr>left);\r\n            } else if (left instanceof SQHierarchyLevelExpr) {\r\n                this.visitHierarchyLevel(<SQHierarchyLevelExpr>left);\r\n            } else {\r\n                this.register(SQExprValidationError.invalidLeftOperandType);\r\n            }\r\n\r\n            if (!(right instanceof SQConstantExpr) || !(<SQConstantExpr>right).type.text)\r\n                this.register(SQExprValidationError.invalidRightOperandType);\r\n            else\r\n                this.validateCompatibleType(left, right);\r\n        }\r\n\r\n        private validateArithmeticTypes(left: SQExpr, right: SQExpr): void {\r\n            if (!SQExprUtils.supportsArithmetic(left, this.schema))\r\n                this.register(SQExprValidationError.invalidLeftOperandType);\r\n            if (!SQExprUtils.supportsArithmetic(right, this.schema))\r\n                this.register(SQExprValidationError.invalidRightOperandType);\r\n        }\r\n\r\n        private validateCompatibleType(left: SQExpr, right: SQExpr): void {\r\n            let leftMetadata = left.getMetadata(this.schema),\r\n                leftType = leftMetadata && leftMetadata.type,\r\n                rightMetadata = right.getMetadata(this.schema),\r\n                rightType = rightMetadata && rightMetadata.type;\r\n\r\n            if (leftType && rightType && !leftType.isCompatibleFrom(rightType))\r\n                this.register(SQExprValidationError.invalidValueType);\r\n        }\r\n\r\n        private validateEntity(schemaName: string, entityName: string): ConceptualEntity {\r\n            let schema = this.schema.schema(schemaName);\r\n            if (schema) {\r\n                let entity = schema.entities.withName(entityName);\r\n                if (entity)\r\n                    return entity;\r\n\r\n                this.register(SQExprValidationError.invalidEntityReference);\r\n            }\r\n            else {\r\n                this.register(SQExprValidationError.invalidSchemaReference);\r\n            }\r\n        }\r\n\r\n        private validateHierarchy(schemaName: string, entityName: string, hierarchyName: string): ConceptualHierarchy {\r\n            let entity = this.validateEntity(schemaName, entityName);\r\n            if (entity) {\r\n                let hierarchy = entity.hierarchies.withName(hierarchyName);\r\n                if (hierarchy)\r\n                    return hierarchy;\r\n\r\n                this.register(SQExprValidationError.invalidHierarchyReference);\r\n            }\r\n        }\r\n\r\n        private validateHierarchyLevel(schemaName: string, entityName: string, hierarchyName: string, levelName: string): ConceptualHierarchyLevel {\r\n            let hierarchy = this.validateHierarchy(schemaName, entityName, hierarchyName);\r\n            if (hierarchy) {\r\n                let hierarchyLevel = hierarchy.levels.withName(levelName);\r\n                if (hierarchyLevel)\r\n                    return hierarchyLevel;\r\n\r\n                this.register(SQExprValidationError.invalidHierarchyLevelReference);\r\n            }\r\n        }\r\n\r\n        private register(error: SQExprValidationError) {\r\n            if (!this.errors)\r\n                this.errors = [];\r\n            this.errors.push(error);\r\n        }\r\n\r\n        private isQueryable(fieldExpr: FieldExprPattern): boolean {\r\n            let fieldExprItem = FieldExprPattern.toFieldExprEntityItemPattern(fieldExpr);\r\n            if (fieldExpr.hierarchyLevel || fieldExpr.hierarchyLevelAggr) {\r\n                let hierarchyLevelConceptualProperty = SQHierarchyExprUtils.getConceptualHierarchyLevelFromExpr(this.schema, fieldExpr);\r\n                return hierarchyLevelConceptualProperty && hierarchyLevelConceptualProperty.column.queryable !== ConceptualQueryableState.Error;\r\n            }\r\n\r\n            return this.schema.schema(fieldExprItem.schema).findProperty(fieldExprItem.entity, FieldExprPattern.getPropertyName(fieldExpr)).queryable !== ConceptualQueryableState.Error;\r\n        }\r\n    }\r\n\r\n    /** Returns an expression's aggregate function, or undefined if it doesn't have one. */\r\n    class SQExprAggregateInfoVisitor extends DefaultSQExprVisitor<QueryAggregateFunction> {\r\n        public visitAggr(expr: SQAggregationExpr): QueryAggregateFunction {\r\n            return expr.func;\r\n        }\r\n\r\n        public visitDefault(expr: SQExpr): QueryAggregateFunction {\r\n            return;\r\n        }\r\n\r\n        public static getAggregate(expr: SQExpr): QueryAggregateFunction {\r\n            let visitor = new SQExprAggregateInfoVisitor();\r\n            return expr.accept(visitor);\r\n        }\r\n    }\r\n\r\n    /** Returns a SQExprColumnRef expression or undefined.*/\r\n    class SQExprColumnRefInfoVisitor extends DefaultSQExprVisitor<SQColumnRefExpr> {\r\n        private schema: FederatedConceptualSchema;\r\n\r\n        constructor(schema: FederatedConceptualSchema) {\r\n            super();\r\n            this.schema = schema;\r\n        }\r\n\r\n        public visitColumnRef(expr: SQColumnRefExpr): SQColumnRefExpr {\r\n            return expr;\r\n        }\r\n\r\n        public visitHierarchyLevel(expr: SQHierarchyLevelExpr): SQColumnRefExpr {\r\n            let ref: string = expr.level;\r\n            let hierarchy = <SQHierarchyExpr>(expr.arg);\r\n            let sourceExpr: SQColumnRefExpr = hierarchy.accept(this);\r\n\r\n            if (hierarchy && hierarchy.arg instanceof SQPropertyVariationSourceExpr) {\r\n                let propertyVariationSource = <SQPropertyVariationSourceExpr>hierarchy.arg;\r\n                let targetEntity = sourceExpr.getTargetEntityForVariation(this.schema, propertyVariationSource.name);\r\n\r\n                if (sourceExpr && targetEntity) {\r\n                    let schemaName = (<SQEntityExpr>(sourceExpr.source)).schema;\r\n                    let targetEntityExpr = SQExprBuilder.entity(schemaName, targetEntity);\r\n                    let schemaHierarchy = this.schema.schema(schemaName).findHierarchy(targetEntity, hierarchy.hierarchy);\r\n\r\n                    if (schemaHierarchy) {\r\n                        for (let level of schemaHierarchy.levels)\r\n                            if (level.name === ref)\r\n                                return new SQColumnRefExpr(targetEntityExpr, level.column.name);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                let entityExpr = <SQEntityExpr>(hierarchy.arg);\r\n                let hierarchyLevelRef = SQHierarchyExprUtils.getConceptualHierarchyLevel(this.schema,\r\n                    entityExpr.schema,\r\n                    entityExpr.entity,\r\n                    hierarchy.hierarchy,\r\n                    expr.level);\r\n\r\n                if (hierarchyLevelRef)\r\n                    return new SQColumnRefExpr(hierarchy.arg, hierarchyLevelRef.column.name);\r\n            }\r\n        }\r\n\r\n        public visitHierarchy(expr: SQHierarchyExpr): SQColumnRefExpr {\r\n            return expr.arg.accept(this);\r\n        }\r\n\r\n        public visitPropertyVariationSource(expr: SQPropertyVariationSourceExpr): SQColumnRefExpr {\r\n            let propertyName = expr.property;\r\n            return new SQColumnRefExpr(expr.arg, propertyName);\r\n        }\r\n\r\n        public visitDefault(expr: SQExpr): SQColumnRefExpr {\r\n            return;\r\n        }\r\n\r\n        public static getColumnRefSQExpr(schema: FederatedConceptualSchema, expr: SQExpr): SQColumnRefExpr {\r\n            let visitor = new SQExprColumnRefInfoVisitor(schema);\r\n            return expr.accept(visitor);\r\n        }\r\n    }\r\n\r\n    class SQExprChangeAggregateRewriter extends SQExprRootRewriter {\r\n        private func: QueryAggregateFunction;\r\n\r\n        constructor(func: QueryAggregateFunction) {\r\n            debug.assertValue(func, 'func');\r\n\r\n            super();\r\n            this.func = func;\r\n        }\r\n\r\n        public visitAggr(expr: SQAggregationExpr): SQExpr {\r\n            if (expr.func === this.func)\r\n                return expr;\r\n\r\n            return new SQAggregationExpr(expr.arg, this.func);\r\n        }\r\n\r\n        public visitColumnRef(expr: SQColumnRefExpr): SQExpr {\r\n            return new SQAggregationExpr(expr, this.func);\r\n        }\r\n\r\n        public static rewrite(expr: SQExpr, func: QueryAggregateFunction): SQExpr {\r\n            debug.assertValue(expr, 'expr');\r\n            debug.assertValue(func, 'func');\r\n\r\n            let rewriter = new SQExprChangeAggregateRewriter(func);\r\n            return expr.accept(rewriter);\r\n        }\r\n    }\r\n\r\n    class SQExprRemoveAggregateRewriter extends SQExprRootRewriter {\r\n        private static instance: SQExprRemoveAggregateRewriter = new SQExprRemoveAggregateRewriter();\r\n\r\n        public visitAggr(expr: SQAggregationExpr): SQExpr {\r\n            return expr.arg;\r\n        }\r\n\r\n        public static rewrite(expr: SQExpr): SQExpr {\r\n            debug.assertValue(expr, 'expr');\r\n\r\n            return expr.accept(SQExprRemoveAggregateRewriter.instance);\r\n        }\r\n    }\r\n\r\n    class SQExprRemoveEntityVariablesRewriter extends SQExprRewriter {\r\n        private static instance: SQExprRemoveEntityVariablesRewriter = new SQExprRemoveEntityVariablesRewriter();\r\n\r\n        public visitEntity(expr: SQEntityExpr): SQExpr {\r\n            if (expr.variable)\r\n                return SQExprBuilder.entity(expr.schema, expr.entity);\r\n\r\n            return expr;\r\n        }\r\n\r\n        public static rewrite(expr: SQExpr): SQExpr {\r\n            debug.assertValue(expr, 'expr');\r\n\r\n            return expr.accept(SQExprRemoveEntityVariablesRewriter.instance);\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    import StringExtensions = jsCommon.StringExtensions;\r\n\r\n    export module SQExprUtils {\r\n        /** Returns an array of supported aggregates for a given expr and role. */\r\n        export function getSupportedAggregates(\r\n            expr: SQExpr,\r\n            schema: FederatedConceptualSchema): QueryAggregateFunction[] {\r\n            let emptyList: QueryAggregateFunction[] = [];\r\n\r\n            let metadata = getMetadataForUnderlyingType(expr, schema);\r\n\r\n            // don't use expr.validate as validate will be using this function and we end up in a recursive loop\r\n            if (!metadata)\r\n                return emptyList;\r\n\r\n            let valueType = metadata.type,\r\n                fieldKind = metadata.kind,\r\n                isPropertyIdentity = metadata.idOnEntityKey,\r\n                Agg = QueryAggregateFunction; // alias\r\n\r\n            if (!valueType)\r\n                return emptyList;\r\n\r\n            // Cannot aggregate on model measures\r\n            if (fieldKind === FieldKind.Measure)\r\n                return emptyList;\r\n\r\n            if (valueType.numeric || valueType.integer) {\r\n                let aggregates = [Agg.Sum, Agg.Avg, Agg.Min, Agg.Max, Agg.Count, Agg.CountNonNull, Agg.StandardDeviation, Agg.Variance];\r\n                let fieldExpr = SQExprConverter.asFieldPattern(expr);\r\n                let fieldExprItem = FieldExprPattern.toFieldExprEntityItemPattern(fieldExpr);\r\n\r\n                let currentSchema = schema.schema(fieldExprItem.schema);\r\n                if (currentSchema.capabilities.supportsMedian)\r\n                    aggregates.push(Agg.Median);\r\n                return aggregates;\r\n            } else if (valueType.text || valueType.bool || valueType.dateTime) {\r\n                // The supported aggregation types for an identity field are restricted to 'Count Non-Null' (e.g. for the field well aggregation options)\r\n                // but a valid semantic query can return a less-restricted aggregation option which we should honor. (e.g. this results from Q&A)\r\n                let distinctCountAggExists = SQExprInfo.getAggregate(expr) === Agg.Count;\r\n                if (isPropertyIdentity && !distinctCountAggExists)\r\n                    return [Agg.CountNonNull];\r\n                return [Agg.Count, Agg.CountNonNull];\r\n            }\r\n\r\n            debug.assertFail(\"Unexpected expr or role.\");\r\n            return emptyList;\r\n        }\r\n\r\n        export function supportsArithmetic(expr: SQExpr, schema: FederatedConceptualSchema): boolean {\r\n            let metadata = expr.getMetadata(schema),\r\n                type = metadata && metadata.type;\r\n\r\n            if (!metadata || !type) {\r\n                return false;\r\n            }\r\n            \r\n            return type.numeric || type.dateTime || type.duration;\r\n        }\r\n\r\n        export function isSupportedAggregate(\r\n            expr: SQExpr,\r\n            schema: FederatedConceptualSchema,\r\n            aggregate: QueryAggregateFunction): boolean {\r\n            let supportedAggregates = getSupportedAggregates(expr, schema);\r\n            return _.contains(supportedAggregates, aggregate);\r\n        }\r\n\r\n        export function indexOfExpr(items: SQExpr[], searchElement: SQExpr): number {\r\n            debug.assertValue(items, 'items');\r\n            debug.assertValue(searchElement, 'searchElement');\r\n\r\n            for (let i = 0, len = items.length; i < len; i++) {\r\n                if (SQExpr.equals(items[i], searchElement))\r\n                    return i;\r\n            }\r\n            return -1;\r\n        }\r\n\r\n        export function sequenceEqual(x: SQExpr[], y: SQExpr[]): boolean {\r\n            debug.assertValue(x, 'x');\r\n            debug.assertValue(y, 'y');\r\n\r\n            let len = x.length;\r\n            if (len !== y.length)\r\n                return false;\r\n\r\n            for (let i = 0; i < len; i++) {\r\n                if (!SQExpr.equals(x[i], y[i]))\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        }\r\n        \r\n        export function uniqueName(namedItems: NamedSQExpr[], expr: SQExpr, exprDefaultName?: string): string {\r\n            debug.assertValue(namedItems, 'namedItems');\r\n\r\n            // Determine all names\r\n            let names: { [name: string]: boolean } = {};\r\n            for (let i = 0, len = namedItems.length; i < len; i++)\r\n                names[namedItems[i].name] = true;\r\n\r\n            return StringExtensions.findUniqueName(names, exprDefaultName || defaultName(expr));\r\n        }\r\n\r\n        /** Generates a default expression name  */\r\n        export function defaultName(expr: SQExpr, fallback: string = 'select'): string {\r\n            if (!expr)\r\n                return fallback;\r\n\r\n            return expr.accept(SQExprDefaultNameGenerator.instance, fallback);\r\n        }\r\n\r\n        /** Gets a value indicating whether the expr is a model measure or an aggregate. */\r\n        export function isMeasure(expr: SQExpr): boolean {\r\n            debug.assertValue(expr, 'expr');\r\n\r\n            return expr.accept(IsMeasureVisitor.instance);\r\n        }\r\n\r\n        /** Gets a value indicating whether the expr is an AnyValue or equals comparison to AnyValue*/\r\n        export function isAnyValue(expr: SQExpr): boolean {\r\n            debug.assertValue(expr, 'expr');\r\n\r\n            return expr.accept(IsAnyValueVisitor.instance);\r\n        }\r\n\r\n        /** Gets a value indicating whether the expr is a DefaultValue or equals comparison to DefaultValue*/\r\n        export function isDefaultValue(expr: SQExpr): boolean {\r\n            debug.assertValue(expr, 'expr');\r\n\r\n            return expr.accept(IsDefaultValueVisitor.instance);\r\n        }\r\n\r\n        export function discourageAggregation(expr: SQExpr, schema: FederatedConceptualSchema): boolean {\r\n            let capabilities = getSchemaCapabilities(expr, schema);\r\n            return capabilities && capabilities.discourageQueryAggregateUsage;\r\n        }\r\n\r\n        export function getAggregateBehavior(expr: SQExpr, schema: FederatedConceptualSchema): ConceptualAggregateBehavior {\r\n            debug.assertValue(expr, 'expr');\r\n            debug.assertValue(schema, 'schema');\r\n\r\n            let column = getConceptualColumn(expr, schema);\r\n            if (column)\r\n                return column.aggregateBehavior;\r\n        }\r\n\r\n        export function getSchemaCapabilities(expr: SQExpr, schema: FederatedConceptualSchema): ConceptualCapabilities {\r\n            debug.assertValue(expr, 'expr');\r\n            debug.assertValue(schema, 'schema');\r\n\r\n            let field = SQExprConverter.asFieldPattern(expr);\r\n            if (!field)\r\n                return;\r\n\r\n            let fieldExprItem = FieldExprPattern.toFieldExprEntityItemPattern(field);\r\n            let conceptualSchema = schema.schema(fieldExprItem.schema);\r\n            if (conceptualSchema)\r\n                return conceptualSchema.capabilities;\r\n        }\r\n\r\n        export function getKpiMetadata(expr: SQExpr, schema: FederatedConceptualSchema): DataViewKpiColumnMetadata {\r\n            let kpiStatusProperty = getKpiStatusProperty(expr, schema);\r\n            if (kpiStatusProperty)\r\n                return kpiStatusProperty.kpiValue.measure.kpi.statusMetadata;\r\n\r\n            let kpiTrendProperty = getKpiTrendProperty(expr, schema);\r\n            if (kpiTrendProperty)\r\n                return kpiTrendProperty.kpiValue.measure.kpi.trendMetadata;\r\n        }\r\n\r\n        function getKpiStatusProperty(expr: SQExpr, schema: FederatedConceptualSchema): ConceptualProperty {\r\n            let property = expr.getConceptualProperty(schema);\r\n            if (!property)\r\n                return;\r\n\r\n            let kpiValue = property.kpiValue;\r\n            if (kpiValue && kpiValue.measure.kpi.status === property)\r\n                return property;\r\n        }\r\n\r\n        function getKpiTrendProperty(expr: SQExpr, schema: FederatedConceptualSchema): ConceptualProperty {\r\n            let property = expr.getConceptualProperty(schema);\r\n            if (!property)\r\n                return;\r\n\r\n            let kpiValue = property.kpiValue;\r\n            if (kpiValue && kpiValue.measure.kpi.trend === property)\r\n                return property;\r\n        }\r\n\r\n        function getMetadataForUnderlyingType(expr: SQExpr, schema: FederatedConceptualSchema): SQExprMetadata {\r\n            // Unwrap the aggregate (if the expr has one), and look at the underlying type.\r\n            let metadata = SQExprBuilder.removeAggregate(expr).getMetadata(schema);\r\n\r\n            if (!metadata)\r\n                metadata = expr.getMetadata(schema);\r\n\r\n            return metadata;\r\n        }\r\n\r\n        export function getDefaultValue(fieldSQExpr: SQExpr, schema: FederatedConceptualSchema): SQConstantExpr {\r\n            let column = getConceptualColumn(fieldSQExpr, schema);\r\n            if (column)\r\n                return column.defaultValue;\r\n        }\r\n\r\n        function getConceptualColumn(fieldSQExpr: SQExpr, schema: FederatedConceptualSchema): ConceptualColumn {\r\n            if (!fieldSQExpr || !schema)\r\n                return;\r\n\r\n            let sqField = SQExprConverter.asFieldPattern(fieldSQExpr);\r\n            if (!sqField)\r\n                return;\r\n\r\n            let column: FieldExprPropertyPattern = sqField.column;\r\n\r\n            if (column) {\r\n                if (schema.schema(column.schema) && sqField.column.name) {\r\n                    let property = schema.schema(column.schema).findProperty(column.entity, sqField.column.name);\r\n\r\n                    if (property)\r\n                        return property.column;\r\n                }\r\n            }\r\n            else {\r\n                let hierarchyLevelField: FieldExprHierarchyLevelPattern = sqField.hierarchyLevel;\r\n                if (hierarchyLevelField) {\r\n                    let fieldExprItem = FieldExprPattern.toFieldExprEntityItemPattern(sqField);\r\n                    let schemaName = fieldExprItem.schema;\r\n                    if (schema.schema(schemaName)) {\r\n                        let hierarchy = schema.schema(schemaName)\r\n                            .findHierarchy(fieldExprItem.entity, hierarchyLevelField.name);\r\n\r\n                        if (hierarchy) {\r\n                            let hierarchyLevel: ConceptualHierarchyLevel = hierarchy.levels.withName(hierarchyLevelField.level);\r\n                            if (hierarchyLevel && hierarchyLevel.column)\r\n                                return hierarchyLevel.column.column;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        export function getDefaultValues(fieldSQExprs: SQExpr[], schema: FederatedConceptualSchema): SQConstantExpr[] {\r\n            if (_.isEmpty(fieldSQExprs) || !schema)\r\n                return;\r\n            let result: SQConstantExpr[] = [];\r\n            for (let sqExpr of fieldSQExprs) {\r\n                let defaultValue = getDefaultValue(sqExpr, schema);\r\n                if (defaultValue)\r\n                    result.push(defaultValue);\r\n            }\r\n            return result;\r\n        }\r\n\r\n        /** Return compare or and expression for key value pairs. */\r\n        export function getDataViewScopeIdentityComparisonExpr(fieldsExpr: SQExpr[], values: SQConstantExpr[]): SQExpr {\r\n            debug.assert(fieldsExpr.length === values.length, \"fileds and values need to be the same size\");\r\n\r\n            let compareExprs: SQCompareExpr[] = [];\r\n            for (let i = 0; i < fieldsExpr.length; i++) {\r\n                compareExprs.push(SQExprBuilder.compare(QueryComparisonKind.Equal, fieldsExpr[i], values[i]));\r\n            }\r\n\r\n            if (_.isEmpty(compareExprs))\r\n                return;\r\n\r\n            let resultExpr: SQExpr;\r\n            for (let compareExpr of compareExprs) {\r\n                resultExpr = SQExprBuilder.and(resultExpr, compareExpr);\r\n            }\r\n\r\n            return resultExpr;\r\n        }\r\n\r\n        export function getActiveTablesNames(queryDefn: data.SemanticQuery): string[] {\r\n            let tables: string[] = [];\r\n            if (queryDefn) {\r\n                let selectedItems = queryDefn.from();\r\n                if (selectedItems !== undefined) {\r\n                    for (let key of selectedItems.keys()) {\r\n                        let entityObj = selectedItems.entity(key);\r\n                        if (tables.indexOf(entityObj.entity) < 0)\r\n                            tables.push(entityObj.entity);\r\n                    }\r\n                }\r\n            }\r\n            return tables;\r\n        }\r\n\r\n        class SQExprDefaultNameGenerator extends DefaultSQExprVisitorWithArg<string, string> {\r\n            public static instance: SQExprDefaultNameGenerator = new SQExprDefaultNameGenerator();\r\n\r\n            public visitEntity(expr: SQEntityExpr): string {\r\n                return expr.entity;\r\n            }\r\n\r\n            public visitColumnRef(expr: SQColumnRefExpr): string {\r\n                return expr.source.accept(this) + '.' + expr.ref;\r\n            }\r\n\r\n            public visitMeasureRef(expr: SQMeasureRefExpr, fallback: string): string {\r\n                return expr.source.accept(this) + '.' + expr.ref;\r\n            }\r\n\r\n            public visitAggr(expr: SQAggregationExpr, fallback: string): string {\r\n                return QueryAggregateFunction[expr.func] + '(' + expr.arg.accept(this) + ')';\r\n            }\r\n\r\n            public visitArithmetic(expr: SQArithmeticExpr, fallback: string): string {\r\n                return powerbi.data.getArithmeticOperatorName(expr.operator) + '(' + expr.left.accept(this) + ', ' + expr.right.accept(this) + ')';\r\n            }\r\n\r\n            public visitConstant(expr: SQConstantExpr): string {\r\n                return 'const';\r\n            }\r\n\r\n            public visitDefault(expr: SQExpr, fallback: string): string {\r\n                return fallback || 'expr';\r\n            }\r\n        }\r\n\r\n        class IsMeasureVisitor extends DefaultSQExprVisitor<boolean> {\r\n            public static instance: IsMeasureVisitor = new IsMeasureVisitor();\r\n\r\n            public visitMeasureRef(expr: SQMeasureRefExpr): boolean {\r\n                return true;\r\n            }\r\n\r\n            public visitAggr(expr: SQAggregationExpr): boolean {\r\n                return true;\r\n            }\r\n\r\n            public visitArithmetic(expr: SQArithmeticExpr): boolean {\r\n                return true;\r\n            }\r\n\r\n            public visitDefault(expr: SQExpr): boolean {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        class IsDefaultValueVisitor extends DefaultSQExprVisitor<boolean> {\r\n            public static instance: IsDefaultValueVisitor = new IsDefaultValueVisitor();\r\n\r\n            public visitCompare(expr: SQCompareExpr): boolean {\r\n                if (expr.comparison !== QueryComparisonKind.Equal)\r\n                    return false;\r\n\r\n                return expr.right.accept(this);\r\n            }\r\n\r\n            public visitAnd(expr: SQAndExpr): boolean {\r\n                return expr.left.accept(this) && expr.right.accept(this);\r\n            }\r\n\r\n            public visitDefaultValue(expr: SQDefaultValueExpr): boolean {\r\n                return true;\r\n            }\r\n\r\n            public visitDefault(expr: SQExpr): boolean {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        class IsAnyValueVisitor extends DefaultSQExprVisitor<boolean> {\r\n            public static instance: IsAnyValueVisitor = new IsAnyValueVisitor();\r\n\r\n            public visitCompare(expr: SQCompareExpr): boolean {\r\n                if (expr.comparison !== QueryComparisonKind.Equal)\r\n                    return false;\r\n\r\n                return expr.right.accept(this);\r\n            }\r\n\r\n            public visitAnd(expr: SQAndExpr): boolean {\r\n                return expr.left.accept(this) && expr.right.accept(this);\r\n            }\r\n\r\n            public visitAnyValue(expr: SQAnyValueExpr): boolean {\r\n                return true;\r\n            }\r\n\r\n            public visitDefault(expr: SQExpr): boolean {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n\r\n    export class SemanticQueryRewriter {\r\n        private exprRewriter: ISQExprVisitor<SQExpr>;\r\n\r\n        constructor(exprRewriter: ISQExprVisitor<SQExpr>) {\r\n            this.exprRewriter = exprRewriter;\r\n        }\r\n\r\n        public rewriteFrom(fromValue: SQFrom): SQFrom {\r\n            let fromContents: { [name: string]: SQFromEntitySource } = {};\r\n            let originalFrom = fromValue,\r\n                originalFromKeys = originalFrom.keys();\r\n            for (let i = 0, len = originalFromKeys.length; i < len; i++) {\r\n                let keyName = originalFromKeys[i],\r\n                    originalEntityRef = originalFrom.entity(keyName),\r\n                    originalEntityExpr = SQExprBuilder.entity(originalEntityRef.schema, originalEntityRef.entity, keyName),\r\n                    updatedEntityExpr = <SQEntityExpr>originalEntityExpr.accept(this.exprRewriter);\r\n                \r\n                fromContents[keyName] = {\r\n                    schema: updatedEntityExpr.schema,\r\n                    entity: updatedEntityExpr.entity,\r\n                };\r\n            }\r\n            return new SQFrom(fromContents);\r\n        }\r\n\r\n        public rewriteSelect(selectItems: NamedSQExpr[], from: SQFrom): NamedSQExpr[]{\r\n            debug.assertValue(selectItems, 'selectItems');\r\n            debug.assertValue(from, 'from');\r\n\r\n            return this.rewriteNamedSQExpressions(selectItems, from);\r\n        }\r\n\r\n        public rewriteGroupBy(groupByitems: NamedSQExpr[], from: SQFrom): NamedSQExpr[] {\r\n            debug.assertAnyValue(groupByitems, 'groupByitems');\r\n            debug.assertValue(from, 'from');\r\n\r\n            if (_.isEmpty(groupByitems))\r\n                return;\r\n\r\n            return this.rewriteNamedSQExpressions(groupByitems, from);\r\n        }\r\n\r\n        private rewriteNamedSQExpressions(expressions: NamedSQExpr[], from: SQFrom): NamedSQExpr[] {\r\n            debug.assertValue(expressions, 'expressions');\r\n\r\n            return _.map(expressions, item => {\r\n                return {\r\n                    name: item.name,\r\n                    expr: SQExprRewriterWithSourceRenames.rewrite(item.expr.accept(this.exprRewriter), from)\r\n                };\r\n            });\r\n        }\r\n\r\n        public rewriteOrderBy(orderByItems: SQSortDefinition[], from: SQFrom): SQSortDefinition[]{\r\n            debug.assertAnyValue(orderByItems, 'orderByItems');\r\n            debug.assertValue(from, 'from');\r\n\r\n            if (_.isEmpty(orderByItems))\r\n                return;\r\n\r\n            let orderBy: SQSortDefinition[] = [];\r\n            for (let i = 0, len = orderByItems.length; i < len; i++) {\r\n                let item = orderByItems[i],\r\n                    updatedExpr = SQExprRewriterWithSourceRenames.rewrite(item.expr.accept(this.exprRewriter), from);\r\n                orderBy.push({\r\n                        direction: item.direction,\r\n                        expr: updatedExpr,\r\n                    });\r\n            }\r\n\r\n            return orderBy;\r\n        }\r\n\r\n        public rewriteWhere(whereItems: SQFilter[], from: SQFrom): SQFilter[]{\r\n            debug.assertAnyValue(whereItems, 'whereItems');\r\n            debug.assertValue(from, 'from');\r\n\r\n            if (_.isEmpty(whereItems))\r\n                return;\r\n\r\n            let where: SQFilter[] = [];\r\n            for (let i = 0, len = whereItems.length; i < len; i++) {\r\n                let originalWhere = whereItems[i];\r\n\r\n                let updatedWhere: SQFilter = {\r\n                    condition: SQExprRewriterWithSourceRenames.rewrite(originalWhere.condition.accept(this.exprRewriter), from),\r\n                };\r\n\r\n                if (originalWhere.target)\r\n                    updatedWhere.target = _.map(originalWhere.target, e => SQExprRewriterWithSourceRenames.rewrite(e.accept(this.exprRewriter), from));\r\n\r\n                where.push(updatedWhere);\r\n            }\r\n\r\n            return where;\r\n        }\r\n    }\r\n} ","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    import ArrayExtensions = jsCommon.ArrayExtensions;\r\n    import ArrayNamedItems = jsCommon.ArrayNamedItems;\r\n\r\n    export interface NamedSQExpr {\r\n        name: string;\r\n        expr: SQExpr;\r\n    }\r\n\r\n    export interface SQFilter {\r\n        target?: SQExpr[];\r\n        condition: SQExpr;\r\n    }\r\n\r\n    /** Represents an entity reference in SemanticQuery from. */\r\n    export interface SQFromEntitySource {\r\n        entity: string;\r\n        schema: string;\r\n    }\r\n\r\n    /** Represents a sort over an expression. */\r\n    export interface SQSortDefinition {\r\n        expr: SQExpr;\r\n        direction: SortDirection;\r\n    }\r\n\r\n    export interface QueryFromEnsureEntityResult {\r\n        name: string;\r\n        new?: boolean;\r\n    }\r\n\r\n    export interface SQSourceRenames {\r\n        [from: string]: string;\r\n    }\r\n\r\n    /**\r\n     * Represents a semantic query that is:\r\n     * 1) Round-trippable with a JSON QueryDefinition.\r\n     * 2) Immutable\r\n     * 3) Long-lived and does not have strong references to a conceptual model (only names).\r\n     */\r\n    export class SemanticQuery {\r\n        private static empty: SemanticQuery;\r\n        private fromValue: SQFrom;\r\n        private whereItems: SQFilter[];\r\n        private orderByItems: SQSortDefinition[];\r\n        private selectItems: NamedSQExpr[];\r\n        private groupByItems: NamedSQExpr[];\r\n\r\n        constructor(from: SQFrom, where: SQFilter[], orderBy: SQSortDefinition[], select: NamedSQExpr[], groupBy: NamedSQExpr[]) {\r\n            debug.assertValue(from, 'from');\r\n            debug.assertValue(select, 'select');\r\n\r\n            this.fromValue = from;\r\n            this.whereItems = where;\r\n            this.orderByItems = orderBy;\r\n            this.selectItems = select;\r\n            this.groupByItems = groupBy;\r\n        }\r\n\r\n        public static create(): SemanticQuery {\r\n            if (!SemanticQuery.empty)\r\n                SemanticQuery.empty = new SemanticQuery(new SQFrom(), null, null, [], null);\r\n\r\n            return SemanticQuery.empty;\r\n        }\r\n\r\n        private static createWithTrimmedFrom(\r\n            from: SQFrom,\r\n            where: SQFilter[],\r\n            orderBy: SQSortDefinition[],\r\n            select: NamedSQExpr[],\r\n            groupBy: NamedSQExpr[]): SemanticQuery {\r\n\r\n            let unreferencedKeyFinder = new UnreferencedKeyFinder(from.keys());\r\n\r\n            // Where\r\n            if (where) {\r\n                for (let i = 0, len = where.length; i < len; i++) {\r\n                    let filter = where[i];\r\n\r\n                    filter.condition.accept(unreferencedKeyFinder);\r\n\r\n                    let filterTarget = filter.target;\r\n                    if (filterTarget) {\r\n                        for (let j = 0, jlen = filterTarget.length; j < jlen; j++)\r\n                            if (filterTarget[j])\r\n                                filterTarget[j].accept(unreferencedKeyFinder);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // OrderBy\r\n            if (orderBy) {\r\n                for (let i = 0, len = orderBy.length; i < len; i++)\r\n                    orderBy[i].expr.accept(unreferencedKeyFinder);\r\n            }\r\n\r\n            // Select\r\n            for (let i = 0, len = select.length; i < len; i++)\r\n                select[i].expr.accept(unreferencedKeyFinder);\r\n\r\n            // GroupBy\r\n            if (groupBy) {\r\n                for (let i = 0, len = groupBy.length; i < len; i++)\r\n                    groupBy[i].expr.accept(unreferencedKeyFinder);\r\n            }\r\n\r\n            let unreferencedKeys = unreferencedKeyFinder.result();\r\n            for (let i = 0, len = unreferencedKeys.length; i < len; i++)\r\n                from.remove(unreferencedKeys[i]);\r\n\r\n            return new SemanticQuery(from, where, orderBy, select, groupBy);\r\n        }\r\n\r\n        public from(): SQFrom {\r\n            return this.fromValue.clone();\r\n        }\r\n\r\n        /** Returns a query equivalent to this, with the specified selected items. */\r\n        select(values: NamedSQExpr[]): SemanticQuery;\r\n        /** Gets the items being selected in this query. */\r\n        select(): ArrayNamedItems<NamedSQExpr>;\r\n        public select(values?: NamedSQExpr[]): any {\r\n            if (_.isEmpty(arguments))\r\n                return this.getSelect();\r\n\r\n            return this.setSelect(values);\r\n        }\r\n\r\n        private getSelect(): ArrayNamedItems<NamedSQExpr> {\r\n            return SemanticQuery.createNamedExpressionArray(this.selectItems);\r\n        }\r\n\r\n        private static createNamedExpressionArray(items: NamedSQExpr[]): ArrayNamedItems<NamedSQExpr> {\r\n            return ArrayExtensions.extendWithName<NamedSQExpr>(_.map(items, s => {\r\n                return {\r\n                    name: s.name,\r\n                    expr: s.expr,\r\n                };\r\n            }));\r\n        }\r\n\r\n        private setSelect(values: NamedSQExpr[]): SemanticQuery {\r\n            let from = this.fromValue.clone();\r\n            let selectItems = SemanticQuery.rewriteExpressionsWithSourceRenames(values, from);\r\n            return SemanticQuery.createWithTrimmedFrom(from, this.whereItems, this.orderByItems, selectItems, this.groupByItems);\r\n        }\r\n\r\n        private static rewriteExpressionsWithSourceRenames(values: NamedSQExpr[], from: SQFrom): NamedSQExpr[] {\r\n            let items: NamedSQExpr[] = [];\r\n\r\n            for (let i = 0, len = values.length; i < len; i++) {\r\n                let value = values[i];\r\n                items.push({\r\n                    name: value.name,\r\n                    expr: SQExprRewriterWithSourceRenames.rewrite(value.expr, from)\r\n                });\r\n            }\r\n\r\n            return items;\r\n        } \r\n\r\n        /** Removes the given expression from the select. */\r\n        public removeSelect(expr: SQExpr): SemanticQuery {\r\n            debug.assertValue(expr, 'expr');\r\n\r\n            let originalItems = this.selectItems,\r\n                selectItems: NamedSQExpr[] = [];\r\n            for (let i = 0, len = originalItems.length; i < len; i++) {\r\n                let originalExpr = originalItems[i];\r\n                if (SQExpr.equals(originalExpr.expr, expr))\r\n                    continue;\r\n\r\n                selectItems.push(originalExpr);\r\n            }\r\n\r\n            return SemanticQuery.createWithTrimmedFrom(this.fromValue.clone(), this.whereItems, this.orderByItems, selectItems, this.groupByItems);\r\n        }\r\n\r\n        /** Removes the given expression from order by. */\r\n        public removeOrderBy(expr: SQExpr): SemanticQuery {\r\n            let sorts = this.orderBy();\r\n            for (let i = sorts.length - 1; i >= 0; i--) {\r\n                if (SQExpr.equals(sorts[i].expr, expr))\r\n                    sorts.splice(i, 1);\r\n            }\r\n\r\n            return SemanticQuery.createWithTrimmedFrom(this.fromValue.clone(), this.whereItems, sorts, this.selectItems, this.groupByItems);\r\n        }\r\n\r\n        public selectNameOf(expr: SQExpr): string {\r\n            let index = SQExprUtils.indexOfExpr(_.map(this.selectItems, s => s.expr), expr);\r\n            if (index >= 0)\r\n                return this.selectItems[index].name;\r\n        }\r\n\r\n        public setSelectAt(index: number, expr: SQExpr): SemanticQuery {\r\n            debug.assertValue(expr, 'expr');\r\n\r\n            if (index >= this.selectItems.length)\r\n                return;\r\n\r\n            let select = this.select(),\r\n                from = this.fromValue.clone(),\r\n                originalName = select[index].name;\r\n            select[index] = {\r\n                name: originalName,\r\n                expr: SQExprRewriterWithSourceRenames.rewrite(expr, from)\r\n            };\r\n\r\n            return SemanticQuery.createWithTrimmedFrom(from, this.whereItems, this.orderByItems, select, this.groupByItems);\r\n        }\r\n\r\n        /** Adds a the expression to the select clause. */\r\n        public addSelect(expr: SQExpr, exprName?: string): SemanticQuery {\r\n            debug.assertValue(expr, 'expr');\r\n\r\n            let selectItems = this.select(),\r\n                from = this.fromValue.clone();\r\n            selectItems.push({\r\n                name: SQExprUtils.uniqueName(selectItems, expr, exprName),\r\n                expr: SQExprRewriterWithSourceRenames.rewrite(expr, from)\r\n            });\r\n\r\n            return SemanticQuery.createWithTrimmedFrom(from, this.whereItems, this.orderByItems, selectItems, this.groupByItems);\r\n        }\r\n\r\n        /** Returns a query equivalent to this, with the specified groupBy items. */\r\n        groupBy(values: NamedSQExpr[]): SemanticQuery;\r\n        /** Gets the groupby items in this query. */\r\n        groupBy(): ArrayNamedItems<NamedSQExpr>;\r\n        public groupBy(values?: NamedSQExpr[]): any {\r\n            if (_.isEmpty(arguments))\r\n                return this.getGroupBy();\r\n\r\n            return this.setGroupBy(values);\r\n        }\r\n\r\n        private getGroupBy(): ArrayNamedItems<NamedSQExpr> {\r\n            return SemanticQuery.createNamedExpressionArray(this.groupByItems);\r\n        }\r\n\r\n        private setGroupBy(values: NamedSQExpr[]): SemanticQuery {\r\n            let from = this.fromValue.clone();\r\n            let groupByItems = SemanticQuery.rewriteExpressionsWithSourceRenames(values, from);\r\n            return SemanticQuery.createWithTrimmedFrom(from, this.whereItems, this.orderByItems, this.selectItems, groupByItems);\r\n        }\r\n\r\n        /** Gets or sets the sorting for this query. */\r\n        orderBy(values: SQSortDefinition[]): SemanticQuery;\r\n        orderBy(): SQSortDefinition[];\r\n\r\n        public orderBy(values?: SQSortDefinition[]): any {\r\n            if (_.isEmpty(arguments))\r\n                return this.getOrderBy();\r\n\r\n            return this.setOrderBy(values);\r\n        }\r\n\r\n        private getOrderBy(): SQSortDefinition[] {\r\n            let result: SQSortDefinition[] = [];\r\n\r\n            let orderBy = this.orderByItems;\r\n            if (orderBy) {\r\n                for (let i = 0, len = orderBy.length; i < len; i++) {\r\n                    let clause = orderBy[i];\r\n\r\n                    result.push({\r\n                        expr: clause.expr,\r\n                        direction: clause.direction,\r\n                    });\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        private setOrderBy(values: SQSortDefinition[]): SemanticQuery {\r\n            debug.assertValue(values, 'values');\r\n\r\n            let updatedOrderBy: SQSortDefinition[] = [],\r\n                from = this.fromValue.clone();\r\n            for (let i = 0, len = values.length; i < len; i++) {\r\n                let clause = values[i];\r\n                updatedOrderBy.push({\r\n                    expr: SQExprRewriterWithSourceRenames.rewrite(clause.expr, from),\r\n                    direction: clause.direction,\r\n                });\r\n            }\r\n\r\n            return SemanticQuery.createWithTrimmedFrom(from, this.whereItems, updatedOrderBy, this.selectItems, this.groupByItems);\r\n        }\r\n\r\n        /** Gets or sets the filters for this query. */\r\n        where(values: SQFilter[]): SemanticQuery;\r\n        where(): SQFilter[];\r\n\r\n        public where(values?: SQFilter[]): any {\r\n            if (_.isEmpty(arguments))\r\n                return this.getWhere();\r\n\r\n            return this.setWhere(values);\r\n        }\r\n\r\n        private getWhere(): SQFilter[] {\r\n            let result: SQFilter[] = [];\r\n\r\n            let whereItems = this.whereItems;\r\n            if (whereItems) {\r\n                for (let i = 0, len = whereItems.length; i < len; i++)\r\n                    result.push(whereItems[i]);\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        private setWhere(values: SQFilter[]): SemanticQuery {\r\n            debug.assertValue(values, 'values');\r\n\r\n            let updatedWhere: SQFilter[] = [],\r\n                from = this.fromValue.clone();\r\n            for (let i = 0, len = values.length; i < len; i++) {\r\n                let filter = values[i];\r\n                let updatedFilter: SQFilter = {\r\n                    condition: SQExprRewriterWithSourceRenames.rewrite(filter.condition, from),\r\n                };\r\n\r\n                let filterTarget = filter.target;\r\n                if (filterTarget) {\r\n                    updatedFilter.target = [];\r\n                    for (let j = 0, jlen = filterTarget.length; j < jlen; j++)\r\n                        if (filterTarget[j]) {\r\n                            let updatedTarget = SQExprRewriterWithSourceRenames.rewrite(filterTarget[j], from);\r\n                            updatedFilter.target.push(updatedTarget);\r\n                        }\r\n                }\r\n\r\n                updatedWhere.push(updatedFilter);\r\n            }\r\n\r\n            return SemanticQuery.createWithTrimmedFrom(from, updatedWhere, this.orderByItems, this.selectItems, this.groupByItems);\r\n        }\r\n\r\n        public addWhere(filter: SemanticFilter): SemanticQuery {\r\n            debug.assertValue(filter, 'filter');\r\n\r\n            let updatedWhere: SQFilter[] = this.where(),\r\n                incomingWhere: SQFilter[] = filter.where(),\r\n                from = this.fromValue.clone();\r\n\r\n            for (let i = 0, len = incomingWhere.length; i < len; i++) {\r\n                let clause = incomingWhere[i];\r\n\r\n                let updatedClause: SQFilter = {\r\n                    condition: SQExprRewriterWithSourceRenames.rewrite(clause.condition, from),\r\n                };\r\n\r\n                if (clause.target)\r\n                    updatedClause.target = _.map(clause.target, t => SQExprRewriterWithSourceRenames.rewrite(t, from));\r\n\r\n                updatedWhere.push(updatedClause);\r\n            }\r\n\r\n            return SemanticQuery.createWithTrimmedFrom(from, updatedWhere, this.orderByItems, this.selectItems, this.groupByItems);\r\n        }\r\n\r\n        public rewrite(exprRewriter: ISQExprVisitor<SQExpr>): SemanticQuery {\r\n            let rewriter = new SemanticQueryRewriter(exprRewriter);\r\n            let from = rewriter.rewriteFrom(this.fromValue);\r\n            let where = rewriter.rewriteWhere(this.whereItems, from);\r\n            let orderBy = rewriter.rewriteOrderBy(this.orderByItems, from);\r\n            let select = rewriter.rewriteSelect(this.selectItems, from);\r\n            let groupBy = rewriter.rewriteGroupBy(this.groupByItems, from);\r\n\r\n            return SemanticQuery.createWithTrimmedFrom(from, where, orderBy, select, groupBy);\r\n        }\r\n    }\r\n\r\n    /** Represents a semantic filter condition.  Round-trippable with a JSON FilterDefinition.  Instances of this class are immutable. */\r\n    export class SemanticFilter implements ISemanticFilter {\r\n        private fromValue: SQFrom;\r\n        private whereItems: SQFilter[];\r\n\r\n        constructor(from: SQFrom, where: SQFilter[]) {\r\n            debug.assertValue(from, 'from');\r\n            debug.assertValue(where, 'where');\r\n\r\n            this.fromValue = from;\r\n            this.whereItems = where;\r\n        }\r\n\r\n        public static fromSQExpr(contract: SQExpr): SemanticFilter {\r\n            debug.assertValue(contract, 'contract');\r\n\r\n            let from = new SQFrom();\r\n\r\n            let rewrittenContract = SQExprRewriterWithSourceRenames.rewrite(contract, from);\r\n            // DEVNOTE targets of some filters are visual specific and will get resolved only during query generation.\r\n            //         Thus not setting a target here.\r\n            let where: SQFilter[] = [{\r\n                condition: rewrittenContract\r\n            }];\r\n\r\n            return new SemanticFilter(from, where);\r\n        }\r\n\r\n        public static getDefaultValueFilter(fieldSQExprs: SQExpr | SQExpr[]): SemanticFilter {\r\n            return SemanticFilter.getDataViewScopeIdentityComparisonFilters(fieldSQExprs, SQExprBuilder.defaultValue());\r\n        }\r\n\r\n        public static getAnyValueFilter(fieldSQExprs: SQExpr | SQExpr[]): SemanticFilter {\r\n            return SemanticFilter.getDataViewScopeIdentityComparisonFilters(fieldSQExprs, SQExprBuilder.anyValue());\r\n        }\r\n\r\n        private static getDataViewScopeIdentityComparisonFilters(fieldSQExprs: SQExpr | SQExpr[], value: SQExpr): SemanticFilter {\r\n            debug.assertValue(fieldSQExprs, 'fieldSQExprs');\r\n            debug.assertValue(value, 'value');\r\n\r\n            if (fieldSQExprs instanceof Array) {\r\n                let values: SQConstantExpr[] = Array.apply(null, Array(fieldSQExprs.length)).map(() => { return value; });\r\n                return SemanticFilter.fromSQExpr(SQExprUtils.getDataViewScopeIdentityComparisonExpr(<SQExpr[]>fieldSQExprs, values));\r\n            }\r\n\r\n            return SemanticFilter.fromSQExpr(SQExprBuilder.equal(<SQExpr>fieldSQExprs, value));\r\n        }\r\n\r\n        public from(): SQFrom {\r\n            return this.fromValue.clone();\r\n        }\r\n\r\n        public conditions(): SQExpr[] {\r\n            let expressions: SQExpr[] = [];\r\n\r\n            let where = this.whereItems;\r\n            for (let i = 0, len = where.length; i < len; i++) {\r\n                let filter = where[i];\r\n                expressions.push(filter.condition);\r\n            }\r\n            return expressions;\r\n        }\r\n\r\n        public where(): SQFilter[] {\r\n            let result: SQFilter[] = [];\r\n\r\n            let whereItems = this.whereItems;\r\n            for (let i = 0, len = whereItems.length; i < len; i++)\r\n                result.push(whereItems[i]);\r\n\r\n            return result;\r\n        }\r\n\r\n        public rewrite(exprRewriter: ISQExprVisitor<SQExpr>): SemanticFilter {\r\n            let rewriter = new SemanticQueryRewriter(exprRewriter);\r\n            let from = rewriter.rewriteFrom(this.fromValue);\r\n            let where = rewriter.rewriteWhere(this.whereItems, from);\r\n\r\n            return new SemanticFilter(from, where);\r\n        }\r\n\r\n        public validate(schema: FederatedConceptualSchema, errors?: SQExprValidationError[]): SQExprValidationError[] {\r\n            let validator = new SQExprValidationVisitor(schema, errors);\r\n            this.rewrite(validator);\r\n            return validator.errors;\r\n        }\r\n\r\n        /** Merges a list of SemanticFilters into one. */\r\n        public static merge(filters: SemanticFilter[]): SemanticFilter {\r\n            if (_.isEmpty(filters))\r\n                return null;\r\n\r\n            if (filters.length === 1)\r\n                return filters[0];\r\n\r\n            let firstFilter = filters[0];\r\n            let from = firstFilter.from(),\r\n                where: SQFilter[] = ArrayExtensions.take(firstFilter.whereItems, firstFilter.whereItems.length);\r\n\r\n            for (let i = 1, len = filters.length; i < len; i++)\r\n                SemanticFilter.applyFilter(filters[i], from, where);\r\n\r\n            return new SemanticFilter(from, where);\r\n        }\r\n\r\n        public static isDefaultFilter(filter: SemanticFilter): boolean {\r\n            if (!filter || filter.where().length !== 1)\r\n                return false;\r\n\r\n            return SQExprUtils.isDefaultValue(filter.where()[0].condition);\r\n        }\r\n\r\n        public static isAnyFilter(filter: SemanticFilter): boolean {\r\n            if (!filter || filter.where().length !== 1)\r\n                return false;\r\n\r\n            return SQExprUtils.isAnyValue(filter.where()[0].condition);\r\n        }\r\n\r\n        public static isSameFilter(leftFilter: SemanticFilter, rightFilter: SemanticFilter): boolean {\r\n            if (jsCommon.JsonComparer.equals<SemanticFilter>(leftFilter, rightFilter)) {\r\n                return !((SemanticFilter.isDefaultFilter(leftFilter) && SemanticFilter.isAnyFilter(rightFilter))\r\n                    || (SemanticFilter.isAnyFilter(leftFilter) && SemanticFilter.isDefaultFilter(rightFilter)));\r\n            }\r\n            return false;\r\n        }\r\n\r\n        private static applyFilter(filter: SemanticFilter, from: SQFrom, where: SQFilter[]): void {\r\n            debug.assertValue(filter, 'filter');\r\n            debug.assertValue(from, 'from');\r\n            debug.assertValue(where, 'where');\r\n\r\n            // Where\r\n            let filterWhereItems = filter.whereItems;\r\n            for (let i = 0; i < filterWhereItems.length; i++) {\r\n                let filterWhereItem = filterWhereItems[i];\r\n\r\n                let updatedWhereItem: SQFilter = {\r\n                    condition: SQExprRewriterWithSourceRenames.rewrite(filterWhereItem.condition, from),\r\n                };\r\n\r\n                if (filterWhereItem.target)\r\n                    updatedWhereItem.target = _.map(filterWhereItem.target, e => SQExprRewriterWithSourceRenames.rewrite(e, from));\r\n\r\n                where.push(updatedWhereItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Represents a SemanticQuery/SemanticFilter from clause. */\r\n    export class SQFrom {\r\n        private items: { [name: string]: SQFromEntitySource };\r\n\r\n        constructor(items?: { [name: string]: SQFromEntitySource }) {\r\n            this.items = items || {};\r\n        }\r\n\r\n        public keys(): string[] {\r\n            return Object.keys(this.items);\r\n        }\r\n\r\n        public entity(key: string): SQFromEntitySource {\r\n            return this.items[key];\r\n        }\r\n\r\n        public ensureEntity(entity: SQFromEntitySource, desiredVariableName?: string): QueryFromEnsureEntityResult {\r\n            debug.assertValue(entity, 'entity');\r\n\r\n            // 1) Reuse a reference to the entity among the already referenced\r\n            let keys = this.keys();\r\n            for (let i = 0, len = keys.length; i < len; i++) {\r\n                let key = keys[i],\r\n                    item = this.items[key];\r\n                if (item && entity.entity === item.entity && entity.schema === item.schema)\r\n                    return { name: key };\r\n            }\r\n\r\n            // 2) Add a reference to the entity\r\n            let candidateName = desiredVariableName || this.candidateName(entity.entity),\r\n                uniqueName: string = candidateName,\r\n                i = 2;\r\n            while (this.items[uniqueName]) {\r\n                uniqueName = candidateName + i++;\r\n            }\r\n\r\n            this.items[uniqueName] = entity;\r\n            return { name: uniqueName, new: true };\r\n        }\r\n\r\n        public remove(key: string): void {\r\n            delete this.items[key];\r\n        }\r\n\r\n        /** Converts the entity name into a short reference name.  Follows the Semantic Query convention of a short name. */\r\n        private candidateName(ref: string): string {\r\n            debug.assertValue(ref, 'ref');\r\n\r\n            let idx = ref.lastIndexOf('.');\r\n            if (idx >= 0 && (idx !== ref.length - 1))\r\n                ref = ref.substr(idx + 1);\r\n\r\n            return ref.substring(0, 1).toLowerCase();\r\n        }\r\n\r\n        public clone(): SQFrom {\r\n            // NOTE: consider deprecating this method and instead making QueryFrom be CopyOnWrite (currently we proactively clone).\r\n            let cloned = new SQFrom();\r\n\r\n            // NOTE: we use extend rather than prototypical inheritance on items because we use Object.keys.\r\n            $.extend(cloned.items, this.items);\r\n\r\n            return cloned;\r\n        }\r\n    }\r\n\r\n    export class SQExprRewriterWithSourceRenames extends SQExprRewriter {\r\n        private renames: SQSourceRenames;\r\n\r\n        constructor(renames: SQSourceRenames) {\r\n            debug.assertValue(renames, 'renames');\r\n\r\n            super();\r\n            this.renames = renames;\r\n        }\r\n\r\n        public visitEntity(expr: SQEntityExpr): SQExpr {\r\n            let updatedName = this.renames[expr.entity];\r\n\r\n            if (updatedName)\r\n                return new SQEntityExpr(expr.schema, expr.entity, updatedName);\r\n\r\n            return super.visitEntity(expr);\r\n        }\r\n\r\n        public rewriteFilter(filter: SQFilter): SQFilter {\r\n            debug.assertValue(filter, 'filter');\r\n\r\n            let updatedTargets = undefined;\r\n            if (filter.target)\r\n                updatedTargets = this.rewriteArray(filter.target);\r\n\r\n            let updatedCondition = filter.condition.accept(this);\r\n\r\n            if (filter.condition === updatedCondition && filter.target === updatedTargets)\r\n                return filter;\r\n\r\n            let updatedFilter: SQFilter = {\r\n                condition: updatedCondition,\r\n            };\r\n\r\n            if (updatedTargets)\r\n                updatedFilter.target = updatedTargets;\r\n\r\n            return updatedFilter;\r\n        }\r\n\r\n        public rewriteArray(exprs: SQExpr[]): SQExpr[] {\r\n            debug.assertValue(exprs, 'exprs');\r\n\r\n            let updatedExprs: SQExpr[];\r\n\r\n            for (let i = 0, len = exprs.length; i < len; i++) {\r\n                let expr = exprs[i],\r\n                    rewrittenExpr = expr.accept(this);\r\n\r\n                if (expr !== rewrittenExpr && !updatedExprs)\r\n                    updatedExprs = ArrayExtensions.take(exprs, i);\r\n\r\n                if (updatedExprs)\r\n                    updatedExprs.push(rewrittenExpr);\r\n            }\r\n\r\n            return updatedExprs || exprs;\r\n        }\r\n\r\n        public static rewrite(expr: SQExpr, from: SQFrom): SQExpr {\r\n            debug.assertValue(expr, 'expr');\r\n            debug.assertValue(from, 'from');\r\n\r\n            let renames = QuerySourceRenameDetector.run(expr, from);\r\n            let rewriter = new SQExprRewriterWithSourceRenames(renames);\r\n            return expr.accept(rewriter);\r\n        }\r\n    }\r\n\r\n    /** Responsible for updating a QueryFrom based on SQExpr references. */\r\n    class QuerySourceRenameDetector extends DefaultSQExprVisitorWithTraversal {\r\n        private from: SQFrom;\r\n        private renames: SQSourceRenames;\r\n\r\n        public static run(expr: SQExpr, from: SQFrom): SQSourceRenames {\r\n            let detector = new QuerySourceRenameDetector(from);\r\n            expr.accept(detector);\r\n\r\n            return detector.renames;\r\n        }\r\n\r\n        constructor(from: SQFrom) {\r\n            debug.assertValue(from, 'from');\r\n            super();\r\n\r\n            this.from = from;\r\n            this.renames = {};\r\n        }\r\n\r\n        public visitEntity(expr: SQEntityExpr): void {\r\n            // TODO: Renames must take the schema into account, not just entity set name.\r\n            let existingEntity = this.from.entity(expr.variable);\r\n            if (existingEntity && existingEntity.schema === expr.schema && existingEntity.entity === expr.entity)\r\n                return;\r\n\r\n            let actualEntity = this.from.ensureEntity(\r\n                {\r\n                    schema: expr.schema,\r\n                    entity: expr.entity,\r\n                },\r\n                expr.variable);\r\n\r\n            this.renames[expr.entity] = actualEntity.name;\r\n        }\r\n    }\r\n\r\n    /** Visitor for finding unreferenced sources. */\r\n    class UnreferencedKeyFinder extends DefaultSQExprVisitorWithTraversal {\r\n        private keys: string[];\r\n\r\n        constructor(keys: string[]) {\r\n            debug.assertValue(keys, 'keys');\r\n\r\n            super();\r\n            this.keys = keys;\r\n        }\r\n\r\n        public visitEntity(expr: SQEntityExpr): void {\r\n            let index = this.keys.indexOf(expr.variable);\r\n            if (index >= 0)\r\n                this.keys.splice(index, 1);\r\n        }\r\n\r\n        public result(): string[] {\r\n            return this.keys;\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    import DataViewTransform = powerbi.data.DataViewTransform;\r\n    import SQExprBuilder = powerbi.data.SQExprBuilder;\r\n\r\n    /** Utility for creating a DataView from columns of data. */\r\n    export interface IDataViewBuilderCategorical {\r\n        withCategory(options: DataViewBuilderCategoryColumnOptions): IDataViewBuilderCategorical;\r\n        withCategories(categories: DataViewCategoryColumn[]): IDataViewBuilderCategorical;\r\n        withValues(options: DataViewBuilderValuesOptions): IDataViewBuilderCategorical;\r\n        withGroupedValues(options: DataViewBuilderGroupedValuesOptions): IDataViewBuilderCategorical;\r\n\r\n        build(): DataView;\r\n    }\r\n\r\n    export interface DataViewBuilderColumnOptions {\r\n        source: DataViewMetadataColumn;\r\n    }\r\n\r\n    export interface DataViewBuilderCategoryColumnOptions extends DataViewBuilderColumnOptions {\r\n        values: PrimitiveValue[];\r\n        identityFrom: DataViewBuilderColumnIdentitySource;\r\n    }\r\n\r\n    export interface DataViewBuilderValuesOptions {\r\n        columns: DataViewBuilderValuesColumnOptions[];\r\n    }\r\n\r\n    export interface DataViewBuilderGroupedValuesOptions {\r\n        groupColumn: DataViewBuilderCategoryColumnOptions;\r\n        valueColumns: DataViewBuilderColumnOptions[];\r\n        data: DataViewBuilderSeriesData[][];\r\n    }\r\n\r\n    /** Indicates the source set of identities. */\r\n    export interface DataViewBuilderColumnIdentitySource {\r\n        fields: SQExpr[];\r\n        identities?: DataViewScopeIdentity[];\r\n    }\r\n\r\n    export interface DataViewBuilderValuesColumnOptions extends DataViewBuilderColumnOptions, DataViewBuilderSeriesData {\r\n    }\r\n\r\n    export interface DataViewBuilderSeriesData {\r\n        values: PrimitiveValue[];\r\n        highlights?: PrimitiveValue[];\r\n\r\n        /** Client-computed maximum value for a column. */\r\n        maxLocal?: any;\r\n\r\n        /** Client-computed maximum value for a column. */\r\n        minLocal?: any;\r\n    }\r\n\r\n    export function createCategoricalDataViewBuilder(): IDataViewBuilderCategorical {\r\n        return new CategoricalDataViewBuilder();\r\n    }\r\n\r\n    interface ColumnMetadata {\r\n        column: DataViewMetadataColumn;\r\n        identityFrom: DataViewBuilderColumnIdentitySource;\r\n        values: PrimitiveValue[];\r\n    }\r\n\r\n    class CategoricalDataViewBuilder implements IDataViewBuilderCategorical {\r\n        private categories: DataViewCategoryColumn[];\r\n        private measureColumns: DataViewMetadataColumn[];\r\n        private hasDynamicSeries: boolean;\r\n        private dynamicSeriesMetadata: ColumnMetadata;\r\n        private columnIndex: number;\r\n        private data: DataViewBuilderValuesColumnOptions[]| DataViewBuilderSeriesData[][];\r\n\r\n        constructor() {\r\n            this.categories = [];\r\n            this.measureColumns = [];\r\n            this.columnIndex = 0;\r\n        }\r\n\r\n        public withCategory(options: DataViewBuilderCategoryColumnOptions): IDataViewBuilderCategorical {\r\n            let categoryValues = options.values,\r\n                identityFrom = options.identityFrom,\r\n                type = options.source.type;\r\n\r\n            let categoryColumn: DataViewCategoryColumn = {\r\n                source: options.source,\r\n                identityFields: options.identityFrom.fields,\r\n                identity: options.identityFrom.identities || [],\r\n                values: categoryValues,\r\n            };\r\n\r\n            if (!options.identityFrom.identities) {\r\n                for (let categoryIndex = 0, categoryLength = categoryValues.length; categoryIndex < categoryLength; categoryIndex++) {\r\n                    categoryColumn.identity.push(\r\n                        getScopeIdentity(identityFrom, categoryIndex, categoryValues[categoryIndex], type));\r\n                }\r\n            }\r\n\r\n            if (!this.categories)\r\n                this.categories = [];\r\n\r\n            this.categories.push(categoryColumn);\r\n\r\n            return this;\r\n        }\r\n\r\n        public withCategories(categories: DataViewCategoryColumn[]): IDataViewBuilderCategorical {\r\n            if (_.isEmpty(this.categories))\r\n                this.categories = categories;\r\n            else\r\n                Array.prototype.push.apply(this.categories, categories);\r\n\r\n            return this;\r\n        }\r\n\r\n        public withValues(options: DataViewBuilderValuesOptions): IDataViewBuilderCategorical {\r\n            debug.assertValue(options, 'options');\r\n\r\n            let columns = options.columns;\r\n            debug.assertValue(columns, 'columns');\r\n\r\n            for (let column of columns) {\r\n                this.measureColumns.push(column.source);\r\n            }\r\n\r\n            this.data = columns;\r\n\r\n            return this;\r\n        }\r\n\r\n        public withGroupedValues(options: DataViewBuilderGroupedValuesOptions): IDataViewBuilderCategorical {\r\n            debug.assertValue(options, 'options');\r\n\r\n            this.hasDynamicSeries = true;\r\n\r\n            let groupColumn = options.groupColumn;\r\n            debug.assertValue(groupColumn, 'groupColumn');\r\n\r\n            this.dynamicSeriesMetadata = {\r\n                column: groupColumn.source,\r\n                identityFrom: groupColumn.identityFrom,\r\n                values: groupColumn.values,\r\n            };\r\n\r\n            let valueColumns = options.valueColumns;\r\n            for (let valueColumn of valueColumns) {\r\n                this.measureColumns.push(valueColumn.source);\r\n            }\r\n\r\n            this.data = options.data;\r\n\r\n            return this;\r\n        }\r\n\r\n        private fillData(dataViewValues: DataViewValueColumns, groups: DataViewMetadataColumn[]) {\r\n            let categoryColumn = _.first(this.categories);\r\n            let categoryLength = (categoryColumn && categoryColumn.values) ? categoryColumn.values.length : 1;\r\n\r\n            if (this.hasDynamicSeries) {\r\n                // Dynamic series\r\n                let data = <DataViewBuilderSeriesData[][]>this.data;\r\n                for (let seriesIndex = 0; seriesIndex < this.dynamicSeriesMetadata.values.length; seriesIndex++) {\r\n                    let seriesMeasures = data[seriesIndex];\r\n                    debug.assert(seriesMeasures.length === this.measureColumns.length, 'seriesMeasures.length === this.measureColumns.length');\r\n\r\n                    for (let measureIndex = 0, measuresLen = this.measureColumns.length; measureIndex < measuresLen; measureIndex++) {\r\n                        let groupIndex = seriesIndex * measuresLen + measureIndex;\r\n\r\n                        applySeriesData(dataViewValues[groupIndex], seriesMeasures[measureIndex], categoryLength);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // Static series\r\n                let data = <DataViewBuilderValuesColumnOptions[]>this.data;\r\n                for (let measureIndex = 0, measuresLen = this.measureColumns.length; measureIndex < measuresLen; measureIndex++) {\r\n                    applySeriesData(dataViewValues[measureIndex], data[measureIndex], categoryLength);\r\n                }\r\n            }\r\n        }\r\n\r\n        public build(): DataView {\r\n            let metadataColumns: DataViewMetadataColumn[] = [];\r\n            let categorical: DataViewCategorical = {};\r\n            let groups: DataViewMetadataColumn[];\r\n\r\n            let categoryMetadata = this.categories;\r\n            let dynamicSeriesMetadata = this.dynamicSeriesMetadata;\r\n\r\n            // --- Build metadata columns and value groups ---\r\n            for (let columnMetadata of categoryMetadata) {\r\n                pushIfNotExists(metadataColumns, columnMetadata.source);\r\n            }\r\n\r\n            if (this.hasDynamicSeries) {\r\n                pushIfNotExists(metadataColumns, dynamicSeriesMetadata.column);\r\n            }\r\n\r\n            if (this.hasDynamicSeries) {\r\n                // Dynamic series\r\n                categorical.values = DataViewTransform.createValueColumns([], dynamicSeriesMetadata.identityFrom.fields, dynamicSeriesMetadata.column);\r\n\r\n                let measures = this.measureColumns;\r\n                groups = [];\r\n\r\n                // For each series value we will make one column per measure\r\n                let seriesValues = dynamicSeriesMetadata.values;\r\n                for (let seriesIndex = 0; seriesIndex < seriesValues.length; seriesIndex++) {\r\n                    let seriesValue = seriesValues[seriesIndex];\r\n                    let seriesIdentity = getScopeIdentity(dynamicSeriesMetadata.identityFrom, seriesIndex, seriesValue, dynamicSeriesMetadata.column.type);\r\n\r\n                    for (let measure of measures) {\r\n                        let column = _.clone(measure);\r\n                        column.groupName = <string>seriesValue;\r\n                        groups.push(column);\r\n\r\n                        pushIfNotExists(metadataColumns, column);\r\n                        categorical.values.push({\r\n                            source: column,\r\n                            values: [],\r\n                            identity: seriesIdentity,\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // Static series / no series\r\n                categorical.values = DataViewTransform.createValueColumns();\r\n                groups = this.measureColumns;\r\n                for (let measure of groups) {\r\n                    let column = measure;\r\n                    pushIfNotExists(metadataColumns, column);\r\n                    categorical.values.push({\r\n                        source: column,\r\n                        values: [],\r\n                    });\r\n                }\r\n            }\r\n\r\n            let categories = this.categories;\r\n            if (!_.isEmpty(categories))\r\n                categorical.categories = categories;\r\n\r\n            // --- Fill in data point values ---\r\n            this.fillData(categorical.values, groups);\r\n\r\n            return {\r\n                metadata: {\r\n                    columns: metadataColumns,\r\n                },\r\n                categorical: categorical,\r\n            };\r\n        }\r\n    }\r\n\r\n    function getScopeIdentity(\r\n        source: DataViewBuilderColumnIdentitySource,\r\n        index: number,\r\n        value: PrimitiveValue,\r\n        valueType: ValueTypeDescriptor): DataViewScopeIdentity {\r\n        let identities = source.identities;\r\n        if (identities) {\r\n            return identities[index];\r\n        }\r\n\r\n        debug.assert(source.fields && source.fields.length === 1, 'Inferring identity, expect exactly one field.');\r\n\r\n        return createDataViewScopeIdentity(\r\n            SQExprBuilder.equal(\r\n                source.fields[0],\r\n                SQExprBuilder.typedConstant(value, valueType)));\r\n    }\r\n\r\n    function pushIfNotExists(items: DataViewMetadataColumn[], itemToAdd: DataViewMetadataColumn): void {\r\n        if (_.contains(items, itemToAdd))\r\n            return;\r\n\r\n        items.push(itemToAdd);\r\n    }\r\n\r\n    function applySeriesData(target: DataViewValueColumn, source: DataViewBuilderSeriesData, categoryLength: number): void {\r\n        debug.assertValue(target, 'target');\r\n        debug.assertValue(source, 'source');\r\n        debug.assertValue(categoryLength, 'categoryLength');\r\n\r\n        let values = source.values;\r\n        debug.assert(categoryLength === values.length, 'categoryLength === values.length');\r\n\r\n        target.values = values;\r\n\r\n        let highlights = source.highlights;\r\n        if (highlights) {\r\n            debug.assert(categoryLength === highlights.length, 'categoryLength === highlights.length');\r\n\r\n            target.highlights = highlights;\r\n        }\r\n\r\n        if (source.minLocal !== undefined)\r\n            target.minLocal = source.minLocal;\r\n\r\n        if (source.maxLocal !== undefined)\r\n            target.maxLocal = source.maxLocal;\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    import SQExpr = powerbi.data.SQExpr;\r\n\r\n    export function createStaticEvalContext(): IEvalContext;\r\n    export function createStaticEvalContext(dataView: DataView, selectTransforms: DataViewSelectTransform[]): IEvalContext;\r\n    export function createStaticEvalContext(dataView?: DataView, selectTransforms?: DataViewSelectTransform[]): IEvalContext {\r\n        return new StaticEvalContext(dataView || { metadata: { columns: [] } }, selectTransforms);\r\n    }\r\n\r\n    /**\r\n     * Represents an eval context over a potentially empty DataView.  Only static repetition data view objects\r\n     * are supported.\r\n     */\r\n    class StaticEvalContext implements IEvalContext {\r\n        private dataView: DataView;\r\n        private selectTransforms: DataViewSelectTransform[];\r\n\r\n        constructor(dataView: DataView, selectTransforms: DataViewSelectTransform[]) {\r\n            debug.assertValue(dataView, 'dataView');\r\n            debug.assertAnyValue(selectTransforms, 'selectTransforms');\r\n\r\n            this.dataView = dataView;\r\n            this.selectTransforms = selectTransforms;\r\n        }\r\n\r\n        public getExprValue(expr: SQExpr): PrimitiveValue {\r\n            let dataView = this.dataView,\r\n                selectTransforms = this.selectTransforms;\r\n            if (dataView && dataView.table && selectTransforms)\r\n                return getExprValueFromTable(expr, selectTransforms, dataView.table, /*rowIdx*/ 0);\r\n        }\r\n\r\n        public getRoleValue(roleName: string): PrimitiveValue {\r\n            return;\r\n        }\r\n    }\r\n\r\n    export function getExprValueFromTable(expr: SQExpr, selectTransforms: DataViewSelectTransform[], table: DataViewTable, rowIdx: number): PrimitiveValue {\r\n        debug.assertValue(expr, 'expr');\r\n        debug.assertValue(selectTransforms, 'selectTransforms');\r\n        debug.assertValue(table, 'table');\r\n        debug.assertValue(rowIdx, 'rowIdx');\r\n\r\n        let rows = table.rows;\r\n        if (_.isEmpty(rows) || rows.length <= rowIdx)\r\n            return;\r\n\r\n        let cols = table.columns;\r\n        for (let selectIdx = 0, selectLen = selectTransforms.length; selectIdx < selectLen; selectIdx++) {\r\n            let selectTransform = selectTransforms[selectIdx];\r\n            if (!SQExpr.equals(selectTransform.expr, expr) || !selectTransform.queryName)\r\n                continue;\r\n\r\n            for (let colIdx = 0, colLen = cols.length; colIdx < colLen; colIdx++) {\r\n                if (selectIdx !== cols[colIdx].index)\r\n                    continue;\r\n\r\n                return rows[rowIdx][colIdx];\r\n            }\r\n        }\r\n\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    export function createMatrixEvalContext(dataViewMatrix: DataViewMatrix): IEvalContext {\r\n        // NOTE: Matrix context-sensitive evaluation is not yet implemented.\r\n        return createStaticEvalContext();\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved.\r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *\r\n *  The above copyright notice and this permission notice shall be included in\r\n *  all copies or substantial portions of the Software.\r\n *\r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi {\r\n\r\n    import StringExtensions = jsCommon.StringExtensions;\r\n    import Formatting = jsCommon.Formatting;\r\n    import RegExpExtensions = jsCommon.RegExpExtensions;\r\n\r\n    /** Culture interfaces. These match the Globalize library interfaces intentionally. */\r\n    export interface Culture {\r\n        name: string;\r\n        calendar: Calendar;\r\n        calendars: CalendarDictionary;\r\n        numberFormat: NumberFormatInfo;\r\n    }\r\n\r\n    export interface Calendar {\r\n        patterns: any;\r\n        firstDay: number;\r\n    }\r\n\r\n    export interface CalendarDictionary {\r\n        [key: string]: Calendar;\r\n    }\r\n\r\n    export interface NumberFormatInfo {\r\n        decimals: number;\r\n        groupSizes: number[];\r\n        negativeInfinity: string;\r\n        positiveInfinity: string;\r\n    }\r\n\r\n    /**\r\n     *  Creating a dummy module to declare cultureInfo string, so we could do a strongly typed usage in Visuals\r\n     */\r\n    declare module powerbi.common {\r\n        let cultureInfo: string;\r\n    }\r\n\r\n    /** Formatting Encoder */\r\n    module FormattingEncoder {\r\n        export function preserveEscaped(format: string, specialChars: string): string {\r\n            // Unicode U+E000 - U+F8FF is a private area and so we can use the chars from the range to encode the escaped sequences\r\n            let length = specialChars.length;\r\n            for (let i = 0; i < length; i++) {\r\n                let oldText = \"\\\\\" + specialChars[i];\r\n                let newText = String.fromCharCode(0xE000 + i);\r\n                format = StringExtensions.replaceAll(format, oldText, newText);\r\n            }\r\n            return format;\r\n        }\r\n\r\n        export function restoreEscaped(format: string, specialChars: string): string {\r\n            // After formatting is complete we should restore the encoded escaped chars into the unescaped chars\r\n            let length = specialChars.length;\r\n            for (let i = 0; i < length; i++) {\r\n                let oldText = String.fromCharCode(0xE000 + i);\r\n                let newText = specialChars[i];\r\n                format = StringExtensions.replaceAll(format, oldText, newText);\r\n            }\r\n            return StringExtensions.replaceAll(format, \"\\\\\", \"\");\r\n        }\r\n\r\n        export function preserveLiterals(format: string, literals: string[]): string {\r\n            // Unicode U+E000 - U+F8FF is a private area and so we can use the chars from the range to encode the escaped sequences\r\n            format = StringExtensions.replaceAll(format, \"\\\"\", \"'\");\r\n            for (let i = 0; ; i++) {\r\n                let fromIndex = format.indexOf(\"'\");\r\n                if (fromIndex < 0) {\r\n                    break;\r\n                }\r\n                let toIndex = format.indexOf(\"'\", fromIndex + 1);\r\n                if (toIndex < 0) {\r\n                    break;\r\n                }\r\n                let literal = format.substring(fromIndex, toIndex + 1);\r\n                literals.push(literal.substring(1, toIndex - fromIndex));\r\n                let token = String.fromCharCode(0xE100 + i);\r\n                format = format.replace(literal, token);\r\n            }\r\n            return format;\r\n        }\r\n\r\n        export function restoreLiterals(format: string, literals: string[]): string {\r\n            let count = literals.length;\r\n            for (let i = 0; i < count; i++) {\r\n                let token = String.fromCharCode(0xE100 + i);\r\n                let literal = literals[i];\r\n                format = format.replace(token, literal);\r\n            }\r\n            return format;\r\n        }\r\n    }\r\n\r\n    const IndexedTokensRegex = /({{)|(}})|{(\\d+[^}]*)}/g;\r\n    const ZeroPlaceholder = '0';\r\n    const DigitPlaceholder = '#';\r\n    const ExponentialFormatChar = 'E';\r\n    const NumericPlaceholders = [ZeroPlaceholder, DigitPlaceholder];\r\n    const NumericPlaceholderRegex = new RegExp(NumericPlaceholders.join('|'), 'g');\r\n\r\n    /** Formatting Service */\r\n    class FormattingService implements IFormattingService {\r\n\r\n        _currentCultureSelector: string;\r\n        _currentCulture: Culture;\r\n        _dateTimeScaleFormatInfo: DateTimeScaleFormatInfo;\r\n\r\n        public formatValue(value: any, format?: string, culture?: string): string {\r\n            // Handle special cases\r\n            if (value === undefined || value === null) {\r\n                return '';\r\n            }\r\n            let gculture = this.getCulture(culture);\r\n\r\n            if (DateTimeFormat.canFormat(value)) {\r\n                // Dates\r\n                return DateTimeFormat.format(value, format, gculture);\r\n            } else if (NumberFormat.canFormat(value)) {\r\n                // Numbers\r\n                return NumberFormat.format(value, format, gculture);\r\n            } else {\r\n                // Other data types - return as string\r\n                return value.toString();\r\n            }\r\n        }\r\n\r\n        public format(formatWithIndexedTokens: string, args: any[], culture?: string): string {\r\n            if (!formatWithIndexedTokens) {\r\n                return \"\";\r\n            }\r\n            let result = formatWithIndexedTokens.replace(IndexedTokensRegex, (match: string, left: string, right: string, argToken: string) => {\r\n                if (left) {\r\n                    return \"{\";\r\n                } else if (right) {\r\n                    return \"}\";\r\n                } else {\r\n                    let parts = argToken.split(\":\");\r\n                    let argIndex = parseInt(parts[0], 10);\r\n                    let argFormat = parts[1];\r\n                    return this.formatValue(args[argIndex], argFormat, culture);\r\n                }\r\n                return \"\";\r\n            });\r\n\r\n            return result;\r\n        }\r\n\r\n        public isStandardNumberFormat(format: string): boolean {\r\n            return NumberFormat.isStandardFormat(format);\r\n        }\r\n\r\n        public formatNumberWithCustomOverride(value: number, format: string, nonScientificOverrideFormat: string, culture?: string): string {\r\n            let gculture = this.getCulture(culture);\r\n\r\n            return NumberFormat.formatWithCustomOverride(value, format, nonScientificOverrideFormat, gculture);\r\n        }\r\n\r\n        public dateFormatString(unit: DateTimeUnit): string {\r\n            if (!this._dateTimeScaleFormatInfo)\r\n                this.initialize();\r\n            return this._dateTimeScaleFormatInfo.getFormatString(unit);\r\n        }\r\n\r\n        /**\r\n         * Sets the current localization culture\r\n         * @param cultureSelector - name of a culture: \"en\", \"en-UK\", \"fr-FR\" etc. (See National Language Support (NLS) for full lists. Use \"default\" for invariant culture).\r\n         */\r\n        private setCurrentCulture(cultureSelector: string): void {\r\n            if (this._currentCultureSelector !== cultureSelector) {\r\n                this._currentCulture = this.getCulture(cultureSelector);\r\n                this._currentCultureSelector = cultureSelector;\r\n                this._dateTimeScaleFormatInfo = new DateTimeScaleFormatInfo(this._currentCulture);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Gets the culture assotiated with the specified cultureSelector (\"en\", \"en-US\", \"fr-FR\" etc).\r\n         * @param cultureSelector - name of a culture: \"en\", \"en-UK\", \"fr-FR\" etc. (See National Language Support (NLS) for full lists. Use \"default\" for invariant culture).\r\n         * Exposing this function for testability of unsupported cultures\r\n         */\r\n        public getCulture(cultureSelector?: string): Culture {\r\n            if (cultureSelector == null) {\r\n                if (this._currentCulture == null) {\r\n                    this.initialize();\r\n                }\r\n                return this._currentCulture;\r\n            } else {\r\n                let culture = Globalize.findClosestCulture(cultureSelector);\r\n                if (!culture)\r\n                    culture = Globalize.culture(\"en-US\");\r\n                return culture;\r\n            }\r\n        }\r\n\r\n        /** By default the Globalization module initializes to the culture/calendar provided in the language/culture URL params */\r\n        private initialize() {\r\n            let cultureName = this.getCurrentCulture();\r\n            this.setCurrentCulture(cultureName);\r\n            let calendarName = this.getUrlParam(\"calendar\");\r\n            if (calendarName) {\r\n                let culture = this._currentCulture;\r\n                let c = culture.calendars[calendarName];\r\n                if (c) {\r\n                    culture.calendar = c;\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         *  Exposing this function for testability \r\n         */\r\n        public getCurrentCulture(): string {\r\n            let urlParam = this.getUrlParam(\"language\");\r\n\r\n            if (urlParam) {\r\n                return urlParam;\r\n            }\r\n\r\n            if (powerbi && powerbi.common && powerbi.common.cultureInfo) {\r\n                // Get cultureInfo set in powerbi\r\n                return powerbi.common.cultureInfo;\r\n            }\r\n\r\n            return window.navigator.userLanguage || window.navigator[\"language\"] || Globalize.culture().name;\r\n        }\r\n\r\n        /**\r\n         *  Exposing this function for testability\r\n         *  @param name: queryString name\r\n         */\r\n        public getUrlParam(name: string): string {\r\n            let param = window.location.search.match(RegExp(\"[?&]\" + name + \"=([^&]*)\"));\r\n            return param ? param[1] : undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * DateTimeFormat module contains the static methods for formatting the DateTimes.\r\n     * It extends the JQuery.Globalize functionality to support complete set of .NET\r\n     * formatting expressions for dates.\r\n     */\r\n    module DateTimeFormat {\r\n\r\n        let _currentCachedFormat: string;\r\n        let _currentCachedProcessedFormat: string;\r\n\r\n        /** Evaluates if the value can be formatted using the NumberFormat */\r\n        export function canFormat(value: any) {\r\n            let result = value instanceof Date;\r\n            return result;\r\n        }\r\n\r\n        /** Formats the date using provided format and culture */\r\n        export function format(value: Date, format: string, culture: Culture): string {\r\n            format = format || \"G\";\r\n            let isStandard = format.length === 1;\r\n            try {\r\n                if (isStandard) {\r\n                    return formatDateStandard(value, format, culture);\r\n                } else {\r\n                    return formatDateCustom(value, format, culture);\r\n                }\r\n            } catch (e) {\r\n                return formatDateStandard(value, \"G\", culture);\r\n            }\r\n        }\r\n\r\n        /** Formats the date using standard format expression */\r\n        function formatDateStandard(value: Date, format: string, culture: Culture) {\r\n            // In order to provide parity with .NET we have to support additional set of DateTime patterns.\r\n            let patterns = culture.calendar.patterns;\r\n            // Extend supported set of patterns\r\n            ensurePatterns(culture.calendar);\r\n            // Handle extended set of formats\r\n            let output = Formatting.findDateFormat(value, format, culture.name);\r\n            if (output.format.length === 1)\r\n                format = patterns[output.format];\r\n            else\r\n                format = output.format;\r\n            //need to revisit when globalization is enabled\r\n            culture = Globalize.culture(\"en-US\");\r\n            return Globalize.format(output.value, format, culture);\r\n        }\r\n\r\n        /** Formats the date using custom format expression */\r\n        function formatDateCustom(value: Date, format: string, culture: Culture): string {\r\n            let result: string;\r\n            let literals: string[] = [];\r\n            format = FormattingEncoder.preserveEscaped(format, \"\\\\dfFghHKmstyz:/%'\\\"\");\r\n            format = FormattingEncoder.preserveLiterals(format, literals);\r\n            format = StringExtensions.replaceAll(format, \"\\\"\", \"'\");\r\n            if (format.indexOf(\"F\") > -1) {\r\n                // F is not supported so we need to replace the F with f based on the milliseconds\r\n                // Replace all sequences of F longer than 3 with \"FFF\"\r\n                format = StringExtensions.replaceAll(format, \"FFFF\", \"FFF\");\r\n                // Based on milliseconds update the format to use fff\r\n                let milliseconds = value.getMilliseconds();\r\n                if (milliseconds % 10 >= 1) {\r\n                    format = StringExtensions.replaceAll(format, \"FFF\", \"fff\");\r\n                }\r\n                format = StringExtensions.replaceAll(format, \"FFF\", \"FF\");\r\n                if ((milliseconds % 100) / 10 >= 1) {\r\n                    format = StringExtensions.replaceAll(format, \"FF\", \"ff\");\r\n                }\r\n                format = StringExtensions.replaceAll(format, \"FF\", \"F\");\r\n                if ((milliseconds % 1000) / 100 >= 1) {\r\n                    format = StringExtensions.replaceAll(format, \"F\", \"f\");\r\n                }\r\n                format = StringExtensions.replaceAll(format, \"F\", \"\");\r\n                if (format === \"\" || format === \"%\")\r\n                    return \"\";\r\n            }\r\n            format = processCustomDateTimeFormat(format);\r\n            result = Globalize.format(value, format, culture);\r\n            result = localize(result, culture.calendar);\r\n            result = FormattingEncoder.restoreLiterals(result, literals);\r\n            result = FormattingEncoder.restoreEscaped(result, \"\\\\dfFghHKmstyz:/%'\\\"\");\r\n            return result;\r\n        }\r\n\r\n        /** Translates unsupported .NET custom format expressions to the custom expressions supported by JQuery.Globalize */\r\n        function processCustomDateTimeFormat(format: string): string {\r\n            if (format === _currentCachedFormat) {\r\n                return _currentCachedProcessedFormat;\r\n            }\r\n            _currentCachedFormat = format;\r\n            format = Formatting.fixDateTimeFormat(format);\r\n            _currentCachedProcessedFormat = format;\r\n            return format;\r\n        }\r\n\r\n        /** Localizes the time separator symbol */\r\n        function localize(value: string, dictionary: any): string {\r\n            let timeSeparator = dictionary[\":\"];\r\n            if (timeSeparator === \":\") {\r\n                return value;\r\n            }\r\n            let result = \"\";\r\n            let count = value.length;\r\n            for (let i = 0; i < count; i++) {\r\n                let char = value.charAt(i);\r\n                switch (char) {\r\n                    case \":\":\r\n                        result += timeSeparator;\r\n                        break;\r\n                    default:\r\n                        result += char;\r\n                        break;\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n\r\n        function ensurePatterns(calendar: GlobalizeCalendar) {\r\n            let patterns = calendar.patterns;\r\n            if (patterns[\"g\"] === undefined) {\r\n                patterns[\"g\"] = patterns[\"f\"].replace(patterns[\"D\"], patterns[\"d\"]);  // Generic: Short date, short time\r\n                patterns[\"G\"] = patterns[\"F\"].replace(patterns[\"D\"], patterns[\"d\"]);  // Generic: Short date, long time\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * NumberFormat module contains the static methods for formatting the numbers.\r\n     * It extends the JQuery.Globalize functionality to support complete set of .NET\r\n     * formatting expressions for numeric types including custom formats.\r\n     */\r\n    export module NumberFormat {\r\n\r\n        const NonScientificFormatRegex = /^\\{.+\\}.*/;\r\n        const NumericalPlaceHolderRegex = /\\{.+\\}/;\r\n        const ScientificFormatRegex = /e[+-]*[0#]+/i;\r\n        const StandardFormatRegex = /^[a-z]\\d{0,2}$/i; // a letter + up to 2 digits for precision specifier\r\n        const TrailingZerosRegex = /0+$/;\r\n        const DecimalFormatRegex = /\\.([0#]*)/g;\r\n        const NumericFormatRegex = /[0#,\\.]+[0,#]*/g;\r\n        const LastNumericPlaceholderRegex = /(0|#)([^(0|#)]*)$/;\r\n        const DecimalFormatCharacter = '.';\r\n\r\n        export const NumberFormatComponentsDelimeter = ';';\r\n\r\n        export interface NumericFormatMetadata {\r\n            format: string;\r\n            hasEscapes: boolean;\r\n            hasQuotes: boolean;\r\n            hasE: boolean;\r\n            hasCommas: boolean;\r\n            hasDots: boolean;\r\n            hasPercent: boolean;\r\n            hasPermile: boolean;\r\n            precision: number;\r\n            scale: number;\r\n        }\r\n\r\n        export interface NumberFormatComponents {\r\n            hasNegative: boolean;\r\n            positive: string;\r\n            negative: string;\r\n            zero: string;\r\n        }\r\n\r\n        function getNonScientificFormatWithPrecision(baseFormat: string, numericFormat: string): string {\r\n            if (!numericFormat || baseFormat === undefined)\r\n                return baseFormat;\r\n\r\n            let newFormat = \"{0:\" + numericFormat + \"}\";\r\n\r\n            return baseFormat.replace(\"{0}\", newFormat);\r\n        }\r\n\r\n        export function getNumericFormat(value: number, baseFormat: string): string {\r\n            if (baseFormat == null)\r\n                return baseFormat;\r\n\r\n            if (hasFormatComponents(baseFormat)) {\r\n                let {positive, negative, zero} = NumberFormat.getComponents(baseFormat);\r\n\r\n                if (value > 0)\r\n                    return getNumericFormatFromComponent(value, positive);\r\n                else if (value === 0)\r\n                    return getNumericFormatFromComponent(value, zero);\r\n\r\n                return getNumericFormatFromComponent(value, negative);\r\n            }\r\n\r\n            return getNumericFormatFromComponent(value, baseFormat);\r\n        }\r\n\r\n        function getNumericFormatFromComponent(value: number, format: string): string {\r\n            let match = RegExpExtensions.run(NumericFormatRegex, format);\r\n            if (match)\r\n                return match[0];\r\n\r\n            return format;\r\n        }\r\n\r\n        export function addDecimalsToFormat(baseFormat: string, decimals: number, trailingZeros: boolean): string {\r\n            if (decimals == null)\r\n                return baseFormat;\r\n\r\n            // Default format string\r\n            if (baseFormat == null)\r\n                baseFormat = ZeroPlaceholder;\r\n\r\n            if (hasFormatComponents(baseFormat)) {\r\n                let {positive, negative, zero} = NumberFormat.getComponents(baseFormat);\r\n                let formats = [positive, negative, zero];\r\n                for (let i = 0; i < formats.length; i++) {\r\n                    // Update format in formats array\r\n                    formats[i] = addDecimalsToFormatComponent(formats[i], decimals, trailingZeros);\r\n                }\r\n\r\n                return formats.join(NumberFormat.NumberFormatComponentsDelimeter);\r\n            }\r\n\r\n            return addDecimalsToFormatComponent(baseFormat, decimals, trailingZeros);\r\n        }\r\n\r\n        function addDecimalsToFormatComponent(format: string, decimals: number, trailingZeros: boolean): string {\r\n            decimals = Math.abs(decimals);\r\n\r\n            if (decimals >= 0) {\r\n                let placeholder = trailingZeros ? ZeroPlaceholder : DigitPlaceholder;\r\n                let decimalPlaceholders = StringExtensions.repeat(placeholder, Math.abs(decimals));\r\n\r\n                let match = RegExpExtensions.run(DecimalFormatRegex, format);\r\n                if (match) {\r\n                    let beforeDecimal = format.substr(0, match.index);\r\n                    let formatDecimal = format.substr(match.index + 1, match[1].length);\r\n                    let afterDecimal = format.substr(match.index + match[0].length);\r\n\r\n                    if (trailingZeros)\r\n                        // Use explicit decimals argument as placeholders\r\n                        formatDecimal = decimalPlaceholders;\r\n                    else {\r\n                        let decimalChange = decimalPlaceholders.length - formatDecimal.length;\r\n                        if (decimalChange > 0)\r\n                            // Append decimalPlaceholders to existing decimal portion of format string\r\n                            formatDecimal = formatDecimal + decimalPlaceholders.slice(-decimalChange);\r\n                        else if (decimalChange < 0)\r\n                            // Remove decimals from formatDecimal\r\n                            formatDecimal = formatDecimal.slice(0, decimalChange);\r\n                    }\r\n\r\n                    if (formatDecimal.length > 0)\r\n                        formatDecimal = DecimalFormatCharacter + formatDecimal;\r\n\r\n                    return beforeDecimal + formatDecimal + afterDecimal;\r\n                }\r\n                else if (decimalPlaceholders.length > 0)\r\n                    // Replace last numeric placeholder with decimal portion\r\n                    return format.replace(LastNumericPlaceholderRegex, '$1' + DecimalFormatCharacter + decimalPlaceholders);\r\n            }\r\n\r\n            return format;\r\n        }\r\n\r\n        export function hasFormatComponents(format: string): boolean {\r\n            return format.indexOf(NumberFormat.NumberFormatComponentsDelimeter) !== -1;\r\n        }\r\n\r\n        export function getComponents(format: string): NumberFormatComponents {\r\n            let signFormat: NumberFormatComponents = {\r\n                hasNegative: false,\r\n                positive: format,\r\n                negative: format,\r\n                zero: format,\r\n            };\r\n\r\n            let signSpecificFormats = format.split(NumberFormatComponentsDelimeter);\r\n            let formatCount = signSpecificFormats.length;\r\n            debug.assert(!(formatCount > 3), 'format string should be of form positive[;negative;zero]');\r\n\r\n            if (formatCount > 1) {\r\n                signFormat.hasNegative = true;\r\n\r\n                signFormat.positive = signFormat.zero = signSpecificFormats[0];\r\n                signFormat.negative = signSpecificFormats[1];\r\n\r\n                if (formatCount > 2)\r\n                    signFormat.zero = signSpecificFormats[2];\r\n            }\r\n\r\n            return signFormat;\r\n        }\r\n\r\n        let _lastCustomFormatMeta: NumericFormatMetadata;\r\n\r\n        /** Evaluates if the value can be formatted using the NumberFormat */\r\n        export function canFormat(value: any) {\r\n            let result = typeof (value) === \"number\";\r\n            return result;\r\n        }\r\n\r\n        export function isStandardFormat(format: string): boolean {\r\n            debug.assertValue(format, 'format');\r\n            return StandardFormatRegex.test(format);\r\n        }\r\n\r\n        /** Formats the number using specified format expression and culture */\r\n        export function format(\r\n            value: number,\r\n            format: string,\r\n            culture: Culture): string {\r\n            format = format || \"G\";\r\n            try {\r\n                if (isStandardFormat(format))\r\n                    return formatNumberStandard(value, format, culture);\r\n\r\n                return formatNumberCustom(value, format, culture);\r\n            } catch (e) {\r\n                return Globalize.format(value, undefined, culture);\r\n            }\r\n        }\r\n\r\n        /** Performs a custom format with a value override.  Typically used for custom formats showing scaled values. */\r\n        export function formatWithCustomOverride(\r\n            value: number,\r\n            format: string,\r\n            nonScientificOverrideFormat: string,\r\n            culture: Culture): string {\r\n            debug.assertValue(value, 'value');\r\n            debug.assertValue(format, 'format');\r\n            debug.assertValue(nonScientificOverrideFormat, 'nonScientificOverrideFormat');\r\n            debug.assertValue(culture, 'culture');\r\n            debug.assert(!isStandardFormat(format), 'Standard format');\r\n\r\n            return formatNumberCustom(value, format, culture, nonScientificOverrideFormat);\r\n        }\r\n\r\n        /** Formats the number using standard format expression */\r\n        function formatNumberStandard(value: number, format: string, culture: Culture): string {\r\n            let result: string;\r\n            let precision = <number>(format.length > 1 ? parseInt(format.substr(1, format.length - 1), 10) : undefined);\r\n            let numberFormatInfo = culture.numberFormat;\r\n            let formatChar = format.charAt(0);\r\n            switch (formatChar) {\r\n                case \"e\":\r\n                case \"E\":\r\n                    if (precision === undefined) {\r\n                        precision = 6;\r\n                    }\r\n                    let mantissaDecimalDigits = StringExtensions.repeat(\"0\", precision);\r\n                    format = \"0.\" + mantissaDecimalDigits + formatChar + \"+000\";\r\n                    result = formatNumberCustom(value, format, culture);\r\n                    break;\r\n                case \"f\":\r\n                case \"F\":\r\n                    result = precision !== undefined ? value.toFixed(precision) : value.toFixed(numberFormatInfo.decimals);\r\n                    result = localize(result, numberFormatInfo);\r\n                    break;\r\n                case \"g\":\r\n                case \"G\":\r\n                    let abs = Math.abs(value);\r\n                    if (abs === 0 || (1E-4 <= abs && abs < 1E15)) {\r\n                        // For the range of 0.0001 to 1,000,000,000,000,000 - use the normal form\r\n                        result = precision !== undefined ? value.toPrecision(precision) : value.toString();\r\n                    } else {\r\n                        // Otherwise use exponential\r\n                        result = precision !== undefined ? value.toExponential(precision) : value.toExponential();\r\n                        result = result.replace(\"e\", \"E\");\r\n                    }\r\n                    result = localize(result, numberFormatInfo);\r\n                    break;\r\n                case \"r\":\r\n                case \"R\":\r\n                    result = value.toString();\r\n                    result = localize(result, numberFormatInfo);\r\n                    break;\r\n                case \"x\":\r\n                case \"X\":\r\n                    result = value.toString(16);\r\n                    if (formatChar === \"X\") {\r\n                        result = result.toUpperCase();\r\n                    }\r\n                    if (precision !== undefined) {\r\n                        let actualPrecision = result.length;\r\n                        let isNegative = value < 0;\r\n                        if (isNegative) {\r\n                            actualPrecision--;\r\n                        }\r\n                        let paddingZerosCount = precision - actualPrecision;\r\n                        let paddingZeros = undefined;\r\n                        if (paddingZerosCount > 0) {\r\n                            paddingZeros = StringExtensions.repeat(\"0\", paddingZerosCount);\r\n                        }\r\n                        if (isNegative) {\r\n                            result = \"-\" + paddingZeros + result.substr(1);\r\n                        } else {\r\n                            result = paddingZeros + result;\r\n                        }\r\n                    }\r\n                    result = localize(result, numberFormatInfo);\r\n                    break;\r\n                default:\r\n                    result = Globalize.format(value, format, culture);\r\n            }\r\n            return result;\r\n        }\r\n\r\n        /** Formats the number using custom format expression */\r\n        function formatNumberCustom(\r\n            value: number,\r\n            format: string,\r\n            culture: Culture,\r\n            nonScientificOverrideFormat?: string): string {\r\n            let result: string;\r\n            let numberFormatInfo = culture.numberFormat;\r\n            if (isFinite(value)) {\r\n                // Split format by positive[;negative;zero] pattern\r\n                let formatComponents = getComponents(format);\r\n\r\n                // Pick a format based on the sign of value\r\n                if (value > 0) {\r\n                    format = formatComponents.positive;\r\n                } else if (value === 0) {\r\n                    format = formatComponents.zero;\r\n                } else {\r\n                    format = formatComponents.negative;\r\n                }\r\n\r\n                // Normalize value if we have an explicit negative format\r\n                if (formatComponents.hasNegative)\r\n                    value = Math.abs(value);\r\n\r\n                // Get format metadata\r\n                let formatMeta = getCustomFormatMetadata(format, true /*calculatePrecision*/);\r\n\r\n                // Preserve literals and escaped chars\r\n                if (formatMeta.hasEscapes) {\r\n                    format = FormattingEncoder.preserveEscaped(format, \"\\\\0#.,%‰\");\r\n                }\r\n                let literals: string[] = [];\r\n                if (formatMeta.hasQuotes) {\r\n                    format = FormattingEncoder.preserveLiterals(format, literals);\r\n                }\r\n\r\n                // Scientific format\r\n                if (formatMeta.hasE && !nonScientificOverrideFormat) {\r\n                    let scientificMatch = RegExpExtensions.run(ScientificFormatRegex, format);\r\n                    if (scientificMatch) {\r\n                        // Case 2.1. Scientific custom format\r\n                        let formatM = format.substr(0, scientificMatch.index);\r\n                        let formatE = format.substr(scientificMatch.index + 2); // E(+|-)\r\n                        let precision = getCustomFormatPrecision(formatM, formatMeta);\r\n                        let scale = getCustomFormatScale(formatM, formatMeta);\r\n                        if (scale !== 1) {\r\n                            value = value * scale;\r\n                        }\r\n                        let s = value.toExponential(precision);\r\n                        let indexOfE = s.indexOf(\"e\");\r\n                        let mantissa = s.substr(0, indexOfE);\r\n                        let exp = s.substr(indexOfE + 1);\r\n                        let resultM = fuseNumberWithCustomFormat(mantissa, formatM, numberFormatInfo);\r\n                        let resultE = fuseNumberWithCustomFormat(exp, formatE, numberFormatInfo);\r\n                        if (resultE.charAt(0) === \"+\" && scientificMatch[0].charAt(1) !== \"+\") {\r\n                            resultE = resultE.substr(1);\r\n                        }\r\n                        let e = scientificMatch[0].charAt(0);\r\n                        result = resultM + e + resultE;\r\n                    }\r\n                }\r\n\r\n                // Non scientific format\r\n                if (result === undefined) {\r\n                    let valueFormatted: string;\r\n                    let isValueGlobalized: boolean = false;\r\n                    let precision = getCustomFormatPrecision(format, formatMeta);\r\n                    let scale = getCustomFormatScale(format, formatMeta);\r\n\r\n                    if (scale !== 1)\r\n                        value = value * scale;\r\n\r\n                    // Rounding\r\n                    value = parseFloat(toNonScientific(value, precision));\r\n\r\n                    if (nonScientificOverrideFormat) {\r\n                        // Get numeric format from format string\r\n                        let numericFormat = NumberFormat.getNumericFormat(value, format);\r\n\r\n                        // Add separators and decimalFormat to nonScientificFormat\r\n                        nonScientificOverrideFormat = getNonScientificFormatWithPrecision(nonScientificOverrideFormat, numericFormat);\r\n\r\n                        // Format the value\r\n                        valueFormatted = formattingService.format(nonScientificOverrideFormat, [value], culture.name);\r\n                        isValueGlobalized = true;\r\n                    }\r\n                    else\r\n                        valueFormatted = toNonScientific(value, precision);\r\n\r\n                    result = fuseNumberWithCustomFormat(valueFormatted, format, numberFormatInfo, nonScientificOverrideFormat, isValueGlobalized);\r\n                }\r\n                if (formatMeta.hasQuotes) {\r\n                    result = FormattingEncoder.restoreLiterals(result, literals);\r\n                }\r\n                if (formatMeta.hasEscapes) {\r\n                    result = FormattingEncoder.restoreEscaped(result, \"\\\\0#.,%‰\");\r\n                }\r\n\r\n                _lastCustomFormatMeta = formatMeta;\r\n            } else {\r\n                return Globalize.format(value, undefined);\r\n            }\r\n            return result;\r\n        }\r\n\r\n        /** Returns string with the fixed point respresentation of the number */\r\n        function toNonScientific(value: number, precision: number): string {\r\n            let result = \"\";\r\n            let precisionZeros = 0;\r\n            // Double precision numbers support actual 15-16 decimal digits of precision.\r\n            if (precision > 16) {\r\n                precisionZeros = precision - 16;\r\n                precision = 16;\r\n            }\r\n            let digitsBeforeDecimalPoint = Double.log10(Math.abs(value));\r\n            if (digitsBeforeDecimalPoint < 16) {\r\n                if (digitsBeforeDecimalPoint > 0) {\r\n                    let maxPrecision = 16 - digitsBeforeDecimalPoint;\r\n                    if (precision > maxPrecision) {\r\n                        precisionZeros += precision - maxPrecision;\r\n                        precision = maxPrecision;\r\n                    }\r\n                }\r\n                result = value.toFixed(precision);\r\n            } else if (digitsBeforeDecimalPoint === 16) {\r\n                result = value.toFixed(0);\r\n                precisionZeros += precision;\r\n                if (precisionZeros > 0) {\r\n                    result += \".\";\r\n                }\r\n            } else { // digitsBeforeDecimalPoint > 16\r\n                // Different browsers have different implementations of the toFixed().\r\n                // In IE it returns fixed format no matter what's the number. In FF and Chrome the method returns exponential format for numbers greater than 1E21.\r\n                // So we need to check for range and convert the to exponential with the max precision.\r\n                // Then we convert exponential string to fixed by removing the dot and padding with \"power\" zeros.\r\n                result = value.toExponential(15);\r\n                let indexOfE = result.indexOf(\"e\");\r\n                if (indexOfE > 0) {\r\n                    let indexOfDot = result.indexOf(\".\");\r\n                    let mantissa = result.substr(0, indexOfE);\r\n                    let exp = result.substr(indexOfE + 1);\r\n                    let powerZeros = parseInt(exp, 10) - (mantissa.length - indexOfDot - 1);\r\n                    result = mantissa.replace(\".\", \"\") + StringExtensions.repeat(\"0\", powerZeros);\r\n                    if (precision > 0) {\r\n                        result = result + \".\" + StringExtensions.repeat(\"0\", precision);\r\n                    }\r\n                }\r\n            }\r\n            if (precisionZeros > 0) {\r\n                result = result + StringExtensions.repeat(\"0\", precisionZeros);\r\n            }\r\n            return result;\r\n        }\r\n\r\n        /**\r\n         * Returns the formatMetadata of the format\r\n         * When calculating precision and scale, if format string of\r\n         * positive[;negative;zero] => positive format will be used\r\n         * @param (required) format - format string\r\n         * @param (optional) calculatePrecision - calculate precision of positive format\r\n         * @param (optional) calculateScale - calculate scale of positive format\r\n         */\r\n        export function getCustomFormatMetadata(format: string, calculatePrecision?: boolean, calculateScale?: boolean): NumericFormatMetadata {\r\n            if (_lastCustomFormatMeta !== undefined && format === _lastCustomFormatMeta.format) {\r\n                return _lastCustomFormatMeta;\r\n            }\r\n\r\n            let result = {\r\n                format: format,\r\n                hasEscapes: false,\r\n                hasQuotes: false,\r\n                hasE: false,\r\n                hasCommas: false,\r\n                hasDots: false,\r\n                hasPercent: false,\r\n                hasPermile: false,\r\n                precision: undefined,\r\n                scale: undefined,\r\n            };\r\n\r\n            for (let i = 0, length = format.length; i < length; i++) {\r\n                let c = format.charAt(i);\r\n                switch (c) {\r\n                    case \"\\\\\":\r\n                        result.hasEscapes = true;\r\n                        break;\r\n                    case \"'\":\r\n                    case \"\\\"\":\r\n                        result.hasQuotes = true;\r\n                        break;\r\n                    case \"e\":\r\n                    case \"E\":\r\n                        result.hasE = true;\r\n                        break;\r\n                    case \",\":\r\n                        result.hasCommas = true;\r\n                        break;\r\n                    case \".\":\r\n                        result.hasDots = true;\r\n                        break;\r\n                    case \"%\":\r\n                        result.hasPercent = true;\r\n                        break;\r\n                    case \"‰\":\r\n                        result.hasPermile = true;\r\n                        break;\r\n                }\r\n            }\r\n\r\n            // Use positive format for calculating these values\r\n            let formatComponents = getComponents(format);\r\n\r\n            if (calculatePrecision)\r\n                result.precision = getCustomFormatPrecision(formatComponents.positive, result);\r\n            if (calculateScale)\r\n                result.scale = getCustomFormatScale(formatComponents.positive, result);\r\n\r\n            return result;\r\n        }\r\n\r\n        /** Returns the decimal precision of format based on the number of # and 0 chars after the decimal point\r\n          * Important: The input format string needs to be split to the appropriate pos/neg/zero portion to work correctly */\r\n        function getCustomFormatPrecision(format: string, formatMeta: NumericFormatMetadata): number {\r\n            if (formatMeta.precision > -1) {\r\n                return formatMeta.precision;\r\n            }\r\n            let result = 0;\r\n            if (formatMeta.hasDots) {\r\n                let dotIndex = format.indexOf(\".\");\r\n                if (dotIndex > -1) {\r\n                    let count = format.length;\r\n                    for (let i = dotIndex; i < count; i++) {\r\n                        let char = format.charAt(i);\r\n                        if (char.match(NumericPlaceholderRegex))\r\n                            result++;\r\n                        // 0.00E+0 :: Break before counting 0 in\r\n                        // exponential portion of format string\r\n                        if (char === ExponentialFormatChar)\r\n                            break;\r\n                    }\r\n                    result = Math.min(19, result);\r\n                }\r\n            }\r\n\r\n            formatMeta.precision = result;\r\n            return result;\r\n        }\r\n\r\n        /** Returns the scale factor of the format based on the \"%\" and scaling \",\" chars in the format */\r\n        function getCustomFormatScale(format: string, formatMeta: NumericFormatMetadata): number {\r\n            if (formatMeta.scale > -1) {\r\n                return formatMeta.scale;\r\n            }\r\n            let result = 1;\r\n            if (formatMeta.hasPercent && format.indexOf(\"%\") > -1) {\r\n                result = result * 100;\r\n            }\r\n            if (formatMeta.hasPermile && format.indexOf(\"‰\") > -1) {\r\n                result = result * 1000;\r\n            }\r\n            if (formatMeta.hasCommas) {\r\n                let dotIndex = format.indexOf(\".\");\r\n                if (dotIndex === -1) {\r\n                    dotIndex = format.length;\r\n                }\r\n                for (let i = dotIndex - 1; i > -1; i--) {\r\n                    let char = format.charAt(i);\r\n                    if (char === \",\") {\r\n                        result = result / 1000;\r\n                    } else {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            formatMeta.scale = result;\r\n            return result;\r\n        }\r\n\r\n        function fuseNumberWithCustomFormat(value: string, format: string, numberFormatInfo: GlobalizeNumberFormat, nonScientificOverrideFormat?: string, isValueGlobalized?: boolean): string {\r\n            let suppressModifyValue = !!nonScientificOverrideFormat;\r\n            let formatParts = format.split(\".\", 2);\r\n            if (formatParts.length === 2) {\r\n                let wholeFormat = formatParts[0];\r\n                let fractionFormat = formatParts[1];\r\n                let displayUnit = \"\";\r\n\r\n                // Remove display unit from value before splitting on \".\" as localized display units sometimes end with \".\"\r\n                if (nonScientificOverrideFormat) {\r\n                    debug.assert(NonScientificFormatRegex.test(nonScientificOverrideFormat), \"Number should always precede the display unit\");\r\n                    displayUnit = nonScientificOverrideFormat.replace(NumericalPlaceHolderRegex, \"\");\r\n                    value = value.replace(displayUnit, \"\");\r\n                }\r\n\r\n                let globalizedDecimalSeparator = numberFormatInfo[\".\"];\r\n                let decimalSeparator = isValueGlobalized ? globalizedDecimalSeparator : \".\";\r\n                let valueParts = value.split(decimalSeparator, 2);\r\n                let wholeValue = valueParts.length === 1 ? valueParts[0] + displayUnit : valueParts[0];\r\n                let fractionValue = valueParts.length === 2 ? valueParts[1] + displayUnit : \"\";\r\n                fractionValue = fractionValue.replace(TrailingZerosRegex, \"\");\r\n\r\n                let wholeFormattedValue = fuseNumberWithCustomFormatLeft(wholeValue, wholeFormat, numberFormatInfo, suppressModifyValue);\r\n                let fractionFormattedValue = fuseNumberWithCustomFormatRight(fractionValue, fractionFormat, suppressModifyValue);\r\n\r\n                if (fractionFormattedValue.fmtOnly || fractionFormattedValue.value === \"\")\r\n                    return wholeFormattedValue + fractionFormattedValue.value;\r\n\r\n                return wholeFormattedValue + globalizedDecimalSeparator + fractionFormattedValue.value;\r\n            }\r\n            return fuseNumberWithCustomFormatLeft(value, format, numberFormatInfo, suppressModifyValue);\r\n        }\r\n\r\n        function fuseNumberWithCustomFormatLeft(value: string, format: string, numberFormatInfo: GlobalizeNumberFormat, suppressModifyValue?: boolean): string {\r\n            let groupSymbolIndex = format.indexOf(\",\");\r\n            let enableGroups = groupSymbolIndex > -1 && groupSymbolIndex < Math.max(format.lastIndexOf(\"0\"), format.lastIndexOf(\"#\")) && numberFormatInfo[\",\"];\r\n            let groupDigitCount = 0;\r\n            let groupIndex = 0;\r\n            let groupSizes = numberFormatInfo.groupSizes || [3];\r\n            let groupSize = groupSizes[0];\r\n            let groupSeparator = numberFormatInfo[\",\"];\r\n            let sign = \"\";\r\n            let firstChar = value.charAt(0);\r\n            if (firstChar === \"+\" || firstChar === \"-\") {\r\n                sign = numberFormatInfo[firstChar];\r\n                value = value.substr(1);\r\n            }\r\n            let isZero = value === \"0\";\r\n            let result = \"\";\r\n            let leftBuffer = \"\";\r\n            let vi = value.length - 1;\r\n            let fmtOnly = true;\r\n            // Iterate through format chars and replace 0 and # with the digits from the value string\r\n            for (let fi = format.length - 1; fi > -1; fi--) {\r\n                let formatChar = format.charAt(fi);\r\n                switch (formatChar) {\r\n                    case ZeroPlaceholder:\r\n                    case DigitPlaceholder:\r\n                        fmtOnly = false;\r\n                        if (leftBuffer !== \"\") {\r\n                            result = leftBuffer + result;\r\n                            leftBuffer = \"\";\r\n                        }\r\n                        if (!suppressModifyValue) {\r\n                            if (vi > -1 || formatChar === ZeroPlaceholder) {\r\n                                if (enableGroups) {\r\n                                    // If the groups are enabled we'll need to keep track of the current group index and periodically insert group separator,\r\n                                    if (groupDigitCount === groupSize) {\r\n                                        result = groupSeparator + result;\r\n                                        groupIndex++;\r\n                                        if (groupIndex < groupSizes.length) {\r\n                                            groupSize = groupSizes[groupIndex];\r\n                                        }\r\n                                        groupDigitCount = 1;\r\n                                    } else {\r\n                                        groupDigitCount++;\r\n                                    }\r\n                                }\r\n                            }\r\n                            if (vi > -1) {\r\n                                if (isZero && formatChar === DigitPlaceholder) {\r\n                                    // Special case - if we need to format a zero value and the # symbol is used - we don't copy it into the result)\r\n                                } else {\r\n                                    result = value.charAt(vi) + result;\r\n                                }\r\n                                vi--;\r\n                            } else if (formatChar !== DigitPlaceholder) {\r\n                                result = formatChar + result;\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \",\":\r\n                        // We should skip all the , chars\r\n                        break;\r\n                    default:\r\n                        leftBuffer = formatChar + leftBuffer;\r\n                        break;\r\n                }\r\n            }\r\n\r\n            // If the value didn't fit into the number of zeros provided in the format then we should insert the missing part of the value into the result\r\n            if (!suppressModifyValue) {\r\n                if (vi > -1 && result !== \"\") {\r\n                    if (enableGroups) {\r\n                        while (vi > -1) {\r\n                            if (groupDigitCount === groupSize) {\r\n                                result = groupSeparator + result;\r\n                                groupIndex++;\r\n                                if (groupIndex < groupSizes.length) {\r\n                                    groupSize = groupSizes[groupIndex];\r\n                                }\r\n                                groupDigitCount = 1;\r\n                            } else {\r\n                                groupDigitCount++;\r\n                            }\r\n                            result = value.charAt(vi) + result;\r\n                            vi--;\r\n                        }\r\n                    } else {\r\n                        result = value.substr(0, vi + 1) + result;\r\n                    }\r\n                }\r\n                // Insert sign in front of the leftBuffer and result\r\n                return sign + leftBuffer + result;\r\n            }\r\n\r\n            if (fmtOnly)\r\n                // If the format doesn't specify any digits to be displayed, then just return the format we've parsed up until now.\r\n                return sign + leftBuffer + result;\r\n\r\n            return sign + leftBuffer + value + result;\r\n        }\r\n\r\n        function fuseNumberWithCustomFormatRight(value: string, format: string, suppressModifyValue?: boolean): { value: string; fmtOnly?: boolean } {\r\n            let vi = 0;\r\n            let fCount = format.length;\r\n            let vCount = value.length;\r\n\r\n            if (suppressModifyValue) {\r\n                debug.assert(fCount > 0, \"Empty formatting string\");\r\n\r\n                let lastChar = format.charAt(fCount - 1);\r\n                if (!lastChar.match(NumericPlaceholderRegex))\r\n                    return {\r\n                        value: value + lastChar,\r\n                        fmtOnly: value === \"\",\r\n                    };\r\n\r\n                return {\r\n                    value: value,\r\n                    fmtOnly: value === \"\",\r\n                };\r\n            }\r\n\r\n            let result = \"\",\r\n                fmtOnly: boolean = true;\r\n            for (let fi = 0; fi < fCount; fi++) {\r\n                let formatChar = format.charAt(fi);\r\n                if (vi < vCount) {\r\n                    switch (formatChar) {\r\n                        case ZeroPlaceholder:\r\n                        case DigitPlaceholder:\r\n                            result += value[vi++];\r\n                            fmtOnly = false;\r\n                            break;\r\n                        default:\r\n                            result += formatChar;\r\n                    }\r\n                } else {\r\n                    if (formatChar !== DigitPlaceholder) {\r\n                        result += formatChar;\r\n                        fmtOnly = fmtOnly && (formatChar !== ZeroPlaceholder);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return {\r\n                value: result,\r\n                fmtOnly: fmtOnly,\r\n            };\r\n        }\r\n\r\n        function localize(value: string, dictionary: any): string {\r\n            let plus = dictionary[\"+\"];\r\n            let minus = dictionary[\"-\"];\r\n            let dot = dictionary[\".\"];\r\n            let comma = dictionary[\",\"];\r\n            if (plus === \"+\" && minus === \"-\" && dot === \".\" && comma === \",\") {\r\n                return value;\r\n            }\r\n            let count = value.length;\r\n            let result = \"\";\r\n            for (let i = 0; i < count; i++) {\r\n                let char = value.charAt(i);\r\n                switch (char) {\r\n                    case \"+\":\r\n                        result = result + plus;\r\n                        break;\r\n                    case \"-\":\r\n                        result = result + minus;\r\n                        break;\r\n                    case \".\":\r\n                        result = result + dot;\r\n                        break;\r\n                    case \",\":\r\n                        result = result + comma;\r\n                        break;\r\n                    default:\r\n                        result = result + char;\r\n                        break;\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n\r\n    }\r\n\r\n    /** DateTimeScaleFormatInfo is used to calculate and keep the Date formats used for different units supported by the DateTimeScaleModel */\r\n    class DateTimeScaleFormatInfo {\r\n\r\n        // Fields\r\n        public YearPattern: string;\r\n        public MonthPattern: string;\r\n        public DayPattern: string;\r\n        public HourPattern: string;\r\n        public MinutePattern: string;\r\n        public SecondPattern: string;\r\n        public MillisecondPattern: string;\r\n\r\n        // Constructor\r\n        /**\r\n         * Creates new instance of the DateTimeScaleFormatInfo class.\r\n         * @param culture - culture which calendar info is going to be used to derive the formats.\r\n         */\r\n        constructor(culture: Culture) {\r\n            let calendar: Calendar = culture.calendar;\r\n            let patterns: any = calendar.patterns;\r\n            let monthAbbreviations: any = calendar[\"months\"][\"namesAbbr\"];\r\n            let cultureHasMonthAbbr: boolean = monthAbbreviations && monthAbbreviations[0];\r\n            let yearMonthPattern: string = patterns[\"Y\"];\r\n            let monthDayPattern: string = patterns[\"M\"];\r\n            let fullPattern: string = patterns[\"f\"];\r\n            let longTimePattern: string = patterns[\"T\"];\r\n            let shortTimePattern: string = patterns[\"t\"];\r\n            let separator: string = fullPattern.indexOf(\",\") > -1 ? \", \" : \" \";\r\n\r\n            let hasYearSymbol: boolean = yearMonthPattern.indexOf(\"yyyy'\") === 0 && yearMonthPattern.length > 6 && yearMonthPattern[6] === '\\'';\r\n            this.YearPattern = hasYearSymbol ? yearMonthPattern.substr(0, 7) : \"yyyy\";\r\n\r\n            let yearPos: number = fullPattern.indexOf(\"yy\");\r\n            let monthPos: number = fullPattern.indexOf(\"MMMM\");\r\n            this.MonthPattern = cultureHasMonthAbbr && monthPos > -1 ? (yearPos > monthPos ? \"MMM yyyy\" : \"yyyy MMM\") : yearMonthPattern;\r\n\r\n            this.DayPattern = cultureHasMonthAbbr ? monthDayPattern.replace(\"MMMM\", \"MMM\") : monthDayPattern;\r\n\r\n            let minutePos: number = fullPattern.indexOf(\"mm\");\r\n            let pmPos: number = fullPattern.indexOf(\"tt\");\r\n            let shortHourPattern: string = pmPos > -1 ? shortTimePattern.replace(\":mm \", \"\") : shortTimePattern;\r\n            this.HourPattern = yearPos < minutePos ? this.DayPattern + separator + shortHourPattern : shortHourPattern + separator + this.DayPattern;\r\n\r\n            this.MinutePattern = shortTimePattern;\r\n\r\n            this.SecondPattern = longTimePattern;\r\n\r\n            this.MillisecondPattern = longTimePattern.replace(\"ss\", \"ss.fff\");\r\n\r\n            // Special cases\r\n            switch (culture.name) {\r\n                case \"fi-FI\":\r\n                    this.DayPattern = this.DayPattern.replace(\"'ta'\", \"\"); // Fix for finish 'ta' suffix for month names.\r\n                    this.HourPattern = this.HourPattern.replace(\"'ta'\", \"\");\r\n                    break;\r\n            }\r\n        }\r\n\r\n        // Methods\r\n\r\n        /**\r\n         * Returns the format string of the provided DateTimeUnit.\r\n         * @param unit - date or time unit\r\n         */\r\n        public getFormatString(unit: DateTimeUnit): string {\r\n            switch (unit) {\r\n                case DateTimeUnit.Year:\r\n                    return this.YearPattern;\r\n                case DateTimeUnit.Month:\r\n                    return this.MonthPattern;\r\n                case DateTimeUnit.Week:\r\n                case DateTimeUnit.Day:\r\n                    return this.DayPattern;\r\n                case DateTimeUnit.Hour:\r\n                    return this.HourPattern;\r\n                case DateTimeUnit.Minute:\r\n                    return this.MinutePattern;\r\n                case DateTimeUnit.Second:\r\n                    return this.SecondPattern;\r\n                case DateTimeUnit.Millisecond:\r\n                    return this.MillisecondPattern;\r\n            }\r\n\r\n            debug.assertFail('Unexpected unit: ' + unit);\r\n        }\r\n    }\r\n\r\n    export var formattingService: IFormattingService = new FormattingService();\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    /** Serializes SQExpr in a form optimized in-memory comparison, but not intended for storage on disk. */\r\n    export module SQExprShortSerializer {\r\n        export function serialize(expr: SQExpr): string {\r\n            return JSON.stringify(expr.accept(SQExprSerializer.instance));\r\n        }\r\n\r\n        export function serializeArray(exprs: SQExpr[]): string {\r\n            let str = '[';\r\n            for (let i = 0, len = exprs.length; i < len; i++) {\r\n                if (i > 0)\r\n                    str += ',';\r\n                str += SQExprShortSerializer.serialize(exprs[i]);\r\n            }\r\n            return str + ']';\r\n        }\r\n\r\n        /** Responsible for serializing an SQExpr into a comparable string. */\r\n        class SQExprSerializer extends DefaultSQExprVisitor<{}> {\r\n            public static instance: SQExprSerializer = new SQExprSerializer();\r\n\r\n            public visitColumnRef(expr: SQColumnRefExpr): {} {\r\n                return {\r\n                    col: {\r\n                        s: expr.source.accept(this),\r\n                        r: expr.ref,\r\n                    }\r\n                };\r\n            }\r\n\r\n            public visitMeasureRef(expr: SQMeasureRefExpr): {} {\r\n                return {\r\n                    measure: {\r\n                        s: expr.source.accept(this),\r\n                        r: expr.ref,\r\n                    }\r\n                };\r\n            }\r\n\r\n            public visitAggr(expr: SQAggregationExpr): {} {\r\n                return {\r\n                    agg: {\r\n                        a: expr.arg.accept(this),\r\n                        f: expr.func,\r\n                    }\r\n                };\r\n            }\r\n\r\n            public visitEntity(expr: SQEntityExpr): {} {\r\n                debug.assertValue(expr, 'expr');\r\n                debug.assertValue(expr.entity, 'expr.entity');\r\n\r\n                return {\r\n                    e: expr.entity\r\n                };\r\n            }\r\n\r\n            public visitAnd(expr: SQAndExpr): {} {\r\n                debug.assertValue(expr, 'expr');\r\n\r\n                return {\r\n                    and: {\r\n                        l: expr.left.accept(this),\r\n                        r: expr.right.accept(this),\r\n                    }\r\n                };\r\n            }\r\n\r\n            public visitCompare(expr: SQCompareExpr): {} {\r\n                debug.assertValue(expr, 'expr');\r\n\r\n                return {\r\n                    comp: {\r\n                        k: expr.comparison,\r\n                        l: expr.left.accept(this),\r\n                        r: expr.right.accept(this),\r\n                    }\r\n                };\r\n            }\r\n\r\n            public visitConstant(expr: SQConstantExpr): {} {\r\n                debug.assertValue(expr, 'expr');\r\n\r\n                return {\r\n                    const: {\r\n                        t: expr.type.primitiveType,\r\n                        v: expr.value,\r\n                    }\r\n                };\r\n            }\r\n\r\n            public visitArithmetic(expr: SQArithmeticExpr): {} {\r\n                debug.assertValue(expr, 'expr');\r\n\r\n                return {\r\n                    arithmetic: {\r\n                        o: expr.operator,\r\n                        l: expr.left.accept(this),\r\n                        r: expr.right.accept(this)\r\n                    }\r\n                };\r\n            }\r\n\r\n            public visitDefault(expr: SQExpr): {} {\r\n                debug.assertFail('Unexpected expression type found in DataViewScopeIdentity.');\r\n\r\n                return;\r\n            }\r\n        }\r\n    }\r\n}"],"sourceRoot":"../ts/visualsData"}